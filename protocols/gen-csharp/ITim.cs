/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ITim {
  public interface Iface {
    /// <summary>
    /// 流程开始
    /// </summary>
    /// <param name="param"></param>
    void timStream(TimParam param);
    #if SILVERLIGHT
    IAsyncResult Begin_timStream(AsyncCallback callback, object state, TimParam param);
    void End_timStream(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// tls协议
    /// </summary>
    void timStarttls();
    #if SILVERLIGHT
    IAsyncResult Begin_timStarttls(AsyncCallback callback, object state);
    void End_timStarttls(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 登陆协议
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="pwd"></param>
    void timLogin(Tid tid, string pwd);
    #if SILVERLIGHT
    IAsyncResult Begin_timLogin(AsyncCallback callback, object state, Tid tid, string pwd);
    void End_timLogin(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 回执信息
    /// </summary>
    /// <param name="ab"></param>
    void timAck(TimAckBean ab);
    #if SILVERLIGHT
    IAsyncResult Begin_timAck(AsyncCallback callback, object state, TimAckBean ab);
    void End_timAck(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbean"></param>
    void timPresence(TimPBean pbean);
    #if SILVERLIGHT
    IAsyncResult Begin_timPresence(AsyncCallback callback, object state, TimPBean pbean);
    void End_timPresence(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbean"></param>
    void timMessage(TimMBean mbean);
    #if SILVERLIGHT
    IAsyncResult Begin_timMessage(AsyncCallback callback, object state, TimMBean mbean);
    void End_timMessage(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// ping 心跳协议
    /// </summary>
    /// <param name="threadId"></param>
    void timPing(string threadId);
    #if SILVERLIGHT
    IAsyncResult Begin_timPing(AsyncCallback callback, object state, string threadId);
    void End_timPing(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 错误通知
    /// </summary>
    /// <param name="e"></param>
    void timError(TimError e);
    #if SILVERLIGHT
    IAsyncResult Begin_timError(AsyncCallback callback, object state, TimError e);
    void End_timError(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 登出协议
    /// </summary>
    void timLogout();
    #if SILVERLIGHT
    IAsyncResult Begin_timLogout(AsyncCallback callback, object state);
    void End_timLogout(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 注册协议
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="auth"></param>
    void timRegist(Tid tid, string auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timRegist(AsyncCallback callback, object state, Tid tid, string auth);
    void End_timRegist(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 花名册
    /// </summary>
    /// <param name="roster"></param>
    void timRoser(TimRoster roster);
    #if SILVERLIGHT
    IAsyncResult Begin_timRoser(AsyncCallback callback, object state, TimRoster roster);
    void End_timRoser(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 发送信息或接收信息列表（合流）
    /// </summary>
    /// <param name="mbeanList"></param>
    void timMessageList(TimMBeanList mbeanList);
    #if SILVERLIGHT
    IAsyncResult Begin_timMessageList(AsyncCallback callback, object state, TimMBeanList mbeanList);
    void End_timMessageList(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 发送状态信息列表（合流）
    /// </summary>
    /// <param name="pbeanList"></param>
    void timPresenceList(TimPBeanList pbeanList);
    #if SILVERLIGHT
    IAsyncResult Begin_timPresenceList(AsyncCallback callback, object state, TimPBeanList pbeanList);
    void End_timPresenceList(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 信息请求 get请求数据 del删除
    /// </summary>
    /// <param name="timMsgIq"></param>
    /// <param name="iqType"></param>
    void timMessageIq(TimMessageIq timMsgIq, string iqType);
    #if SILVERLIGHT
    IAsyncResult Begin_timMessageIq(AsyncCallback callback, object state, TimMessageIq timMsgIq, string iqType);
    void End_timMessageIq(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 信息请求
    /// </summary>
    /// <param name="mbean"></param>
    void timMessageResult(TimMBean mbean);
    #if SILVERLIGHT
    IAsyncResult Begin_timMessageResult(AsyncCallback callback, object state, TimMBean mbean);
    void End_timMessageResult(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 用户协议属性请求
    /// </summary>
    /// <param name="tpb"></param>
    void timProperty(TimPropertyBean tpb);
    #if SILVERLIGHT
    IAsyncResult Begin_timProperty(AsyncCallback callback, object state, TimPropertyBean tpb);
    void End_timProperty(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 请求远程验证信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="pwd"></param>
    /// <param name="auth"></param>
    TimRemoteUserBean timRemoteUserAuth(Tid tid, string pwd, TimAuth auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timRemoteUserAuth(AsyncCallback callback, object state, Tid tid, string pwd, TimAuth auth);
    TimRemoteUserBean End_timRemoteUserAuth(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 请求远程用户信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="auth"></param>
    TimRemoteUserBean timRemoteUserGet(Tid tid, TimAuth auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timRemoteUserGet(AsyncCallback callback, object state, Tid tid, TimAuth auth);
    TimRemoteUserBean End_timRemoteUserGet(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 编辑远程用户信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="ub"></param>
    /// <param name="auth"></param>
    TimRemoteUserBean timRemoteUserEdit(Tid tid, TimUserBean ub, TimAuth auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timRemoteUserEdit(AsyncCallback callback, object state, Tid tid, TimUserBean ub, TimAuth auth);
    TimRemoteUserBean End_timRemoteUserEdit(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbean"></param>
    /// <param name="auth"></param>
    TimResponseBean timResponsePresence(TimPBean pbean, TimAuth auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timResponsePresence(AsyncCallback callback, object state, TimPBean pbean, TimAuth auth);
    TimResponseBean End_timResponsePresence(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbean"></param>
    /// <param name="auth"></param>
    TimResponseBean timResponseMessage(TimMBean mbean, TimAuth auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timResponseMessage(AsyncCallback callback, object state, TimMBean mbean, TimAuth auth);
    TimResponseBean End_timResponseMessage(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 信息请求 get请求数据 del删除（辅助接口）
    /// </summary>
    /// <param name="timMsgIq"></param>
    /// <param name="iqType"></param>
    /// <param name="auth"></param>
    TimMBeanList timResponseMessageIq(TimMessageIq timMsgIq, string iqType, TimAuth auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timResponseMessageIq(AsyncCallback callback, object state, TimMessageIq timMsgIq, string iqType, TimAuth auth);
    TimMBeanList End_timResponseMessageIq(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbeanList"></param>
    /// <param name="auth"></param>
    TimResponseBean timResponsePresenceList(TimPBeanList pbeanList, TimAuth auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timResponsePresenceList(AsyncCallback callback, object state, TimPBeanList pbeanList, TimAuth auth);
    TimResponseBean End_timResponsePresenceList(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbeanList"></param>
    /// <param name="auth"></param>
    TimResponseBean timResponseMessageList(TimMBeanList mbeanList, TimAuth auth);
    #if SILVERLIGHT
    IAsyncResult Begin_timResponseMessageList(AsyncCallback callback, object state, TimMBeanList mbeanList, TimAuth auth);
    TimResponseBean End_timResponseMessageList(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_timStream(AsyncCallback callback, object state, TimParam param)
    {
      return send_timStream(callback, state, param);
    }

    public void End_timStream(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 流程开始
    /// </summary>
    /// <param name="param"></param>
    public void timStream(TimParam param)
    {
      #if !SILVERLIGHT
      send_timStream(param);

      #else
      var asyncResult = Begin_timStream(null, null, param);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timStream(AsyncCallback callback, object state, TimParam param)
    #else
    public void send_timStream(TimParam param)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timStream", TMessageType.Oneway, seqid_));
      timStream_args args = new timStream_args();
      args.Param = param;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timStarttls(AsyncCallback callback, object state)
    {
      return send_timStarttls(callback, state);
    }

    public void End_timStarttls(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// tls协议
    /// </summary>
    public void timStarttls()
    {
      #if !SILVERLIGHT
      send_timStarttls();

      #else
      var asyncResult = Begin_timStarttls(null, null);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timStarttls(AsyncCallback callback, object state)
    #else
    public void send_timStarttls()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timStarttls", TMessageType.Oneway, seqid_));
      timStarttls_args args = new timStarttls_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timLogin(AsyncCallback callback, object state, Tid tid, string pwd)
    {
      return send_timLogin(callback, state, tid, pwd);
    }

    public void End_timLogin(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 登陆协议
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="pwd"></param>
    public void timLogin(Tid tid, string pwd)
    {
      #if !SILVERLIGHT
      send_timLogin(tid, pwd);

      #else
      var asyncResult = Begin_timLogin(null, null, tid, pwd);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timLogin(AsyncCallback callback, object state, Tid tid, string pwd)
    #else
    public void send_timLogin(Tid tid, string pwd)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timLogin", TMessageType.Oneway, seqid_));
      timLogin_args args = new timLogin_args();
      args.Tid = tid;
      args.Pwd = pwd;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timAck(AsyncCallback callback, object state, TimAckBean ab)
    {
      return send_timAck(callback, state, ab);
    }

    public void End_timAck(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 回执信息
    /// </summary>
    /// <param name="ab"></param>
    public void timAck(TimAckBean ab)
    {
      #if !SILVERLIGHT
      send_timAck(ab);

      #else
      var asyncResult = Begin_timAck(null, null, ab);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timAck(AsyncCallback callback, object state, TimAckBean ab)
    #else
    public void send_timAck(TimAckBean ab)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timAck", TMessageType.Oneway, seqid_));
      timAck_args args = new timAck_args();
      args.Ab = ab;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timPresence(AsyncCallback callback, object state, TimPBean pbean)
    {
      return send_timPresence(callback, state, pbean);
    }

    public void End_timPresence(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbean"></param>
    public void timPresence(TimPBean pbean)
    {
      #if !SILVERLIGHT
      send_timPresence(pbean);

      #else
      var asyncResult = Begin_timPresence(null, null, pbean);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timPresence(AsyncCallback callback, object state, TimPBean pbean)
    #else
    public void send_timPresence(TimPBean pbean)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timPresence", TMessageType.Oneway, seqid_));
      timPresence_args args = new timPresence_args();
      args.Pbean = pbean;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timMessage(AsyncCallback callback, object state, TimMBean mbean)
    {
      return send_timMessage(callback, state, mbean);
    }

    public void End_timMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbean"></param>
    public void timMessage(TimMBean mbean)
    {
      #if !SILVERLIGHT
      send_timMessage(mbean);

      #else
      var asyncResult = Begin_timMessage(null, null, mbean);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timMessage(AsyncCallback callback, object state, TimMBean mbean)
    #else
    public void send_timMessage(TimMBean mbean)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timMessage", TMessageType.Oneway, seqid_));
      timMessage_args args = new timMessage_args();
      args.Mbean = mbean;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timPing(AsyncCallback callback, object state, string threadId)
    {
      return send_timPing(callback, state, threadId);
    }

    public void End_timPing(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// ping 心跳协议
    /// </summary>
    /// <param name="threadId"></param>
    public void timPing(string threadId)
    {
      #if !SILVERLIGHT
      send_timPing(threadId);

      #else
      var asyncResult = Begin_timPing(null, null, threadId);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timPing(AsyncCallback callback, object state, string threadId)
    #else
    public void send_timPing(string threadId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timPing", TMessageType.Oneway, seqid_));
      timPing_args args = new timPing_args();
      args.ThreadId = threadId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timError(AsyncCallback callback, object state, TimError e)
    {
      return send_timError(callback, state, e);
    }

    public void End_timError(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 错误通知
    /// </summary>
    /// <param name="e"></param>
    public void timError(TimError e)
    {
      #if !SILVERLIGHT
      send_timError(e);

      #else
      var asyncResult = Begin_timError(null, null, e);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timError(AsyncCallback callback, object state, TimError e)
    #else
    public void send_timError(TimError e)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timError", TMessageType.Oneway, seqid_));
      timError_args args = new timError_args();
      args.E = e;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timLogout(AsyncCallback callback, object state)
    {
      return send_timLogout(callback, state);
    }

    public void End_timLogout(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 登出协议
    /// </summary>
    public void timLogout()
    {
      #if !SILVERLIGHT
      send_timLogout();

      #else
      var asyncResult = Begin_timLogout(null, null);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timLogout(AsyncCallback callback, object state)
    #else
    public void send_timLogout()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timLogout", TMessageType.Oneway, seqid_));
      timLogout_args args = new timLogout_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timRegist(AsyncCallback callback, object state, Tid tid, string auth)
    {
      return send_timRegist(callback, state, tid, auth);
    }

    public void End_timRegist(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 注册协议
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="auth"></param>
    public void timRegist(Tid tid, string auth)
    {
      #if !SILVERLIGHT
      send_timRegist(tid, auth);

      #else
      var asyncResult = Begin_timRegist(null, null, tid, auth);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timRegist(AsyncCallback callback, object state, Tid tid, string auth)
    #else
    public void send_timRegist(Tid tid, string auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timRegist", TMessageType.Oneway, seqid_));
      timRegist_args args = new timRegist_args();
      args.Tid = tid;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timRoser(AsyncCallback callback, object state, TimRoster roster)
    {
      return send_timRoser(callback, state, roster);
    }

    public void End_timRoser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 花名册
    /// </summary>
    /// <param name="roster"></param>
    public void timRoser(TimRoster roster)
    {
      #if !SILVERLIGHT
      send_timRoser(roster);

      #else
      var asyncResult = Begin_timRoser(null, null, roster);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timRoser(AsyncCallback callback, object state, TimRoster roster)
    #else
    public void send_timRoser(TimRoster roster)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timRoser", TMessageType.Oneway, seqid_));
      timRoser_args args = new timRoser_args();
      args.Roster = roster;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timMessageList(AsyncCallback callback, object state, TimMBeanList mbeanList)
    {
      return send_timMessageList(callback, state, mbeanList);
    }

    public void End_timMessageList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 发送信息或接收信息列表（合流）
    /// </summary>
    /// <param name="mbeanList"></param>
    public void timMessageList(TimMBeanList mbeanList)
    {
      #if !SILVERLIGHT
      send_timMessageList(mbeanList);

      #else
      var asyncResult = Begin_timMessageList(null, null, mbeanList);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timMessageList(AsyncCallback callback, object state, TimMBeanList mbeanList)
    #else
    public void send_timMessageList(TimMBeanList mbeanList)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timMessageList", TMessageType.Oneway, seqid_));
      timMessageList_args args = new timMessageList_args();
      args.MbeanList = mbeanList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timPresenceList(AsyncCallback callback, object state, TimPBeanList pbeanList)
    {
      return send_timPresenceList(callback, state, pbeanList);
    }

    public void End_timPresenceList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 发送状态信息列表（合流）
    /// </summary>
    /// <param name="pbeanList"></param>
    public void timPresenceList(TimPBeanList pbeanList)
    {
      #if !SILVERLIGHT
      send_timPresenceList(pbeanList);

      #else
      var asyncResult = Begin_timPresenceList(null, null, pbeanList);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timPresenceList(AsyncCallback callback, object state, TimPBeanList pbeanList)
    #else
    public void send_timPresenceList(TimPBeanList pbeanList)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timPresenceList", TMessageType.Oneway, seqid_));
      timPresenceList_args args = new timPresenceList_args();
      args.PbeanList = pbeanList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timMessageIq(AsyncCallback callback, object state, TimMessageIq timMsgIq, string iqType)
    {
      return send_timMessageIq(callback, state, timMsgIq, iqType);
    }

    public void End_timMessageIq(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 信息请求 get请求数据 del删除
    /// </summary>
    /// <param name="timMsgIq"></param>
    /// <param name="iqType"></param>
    public void timMessageIq(TimMessageIq timMsgIq, string iqType)
    {
      #if !SILVERLIGHT
      send_timMessageIq(timMsgIq, iqType);

      #else
      var asyncResult = Begin_timMessageIq(null, null, timMsgIq, iqType);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timMessageIq(AsyncCallback callback, object state, TimMessageIq timMsgIq, string iqType)
    #else
    public void send_timMessageIq(TimMessageIq timMsgIq, string iqType)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timMessageIq", TMessageType.Oneway, seqid_));
      timMessageIq_args args = new timMessageIq_args();
      args.TimMsgIq = timMsgIq;
      args.IqType = iqType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timMessageResult(AsyncCallback callback, object state, TimMBean mbean)
    {
      return send_timMessageResult(callback, state, mbean);
    }

    public void End_timMessageResult(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 信息请求
    /// </summary>
    /// <param name="mbean"></param>
    public void timMessageResult(TimMBean mbean)
    {
      #if !SILVERLIGHT
      send_timMessageResult(mbean);

      #else
      var asyncResult = Begin_timMessageResult(null, null, mbean);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timMessageResult(AsyncCallback callback, object state, TimMBean mbean)
    #else
    public void send_timMessageResult(TimMBean mbean)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timMessageResult", TMessageType.Oneway, seqid_));
      timMessageResult_args args = new timMessageResult_args();
      args.Mbean = mbean;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timProperty(AsyncCallback callback, object state, TimPropertyBean tpb)
    {
      return send_timProperty(callback, state, tpb);
    }

    public void End_timProperty(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// 用户协议属性请求
    /// </summary>
    /// <param name="tpb"></param>
    public void timProperty(TimPropertyBean tpb)
    {
      #if !SILVERLIGHT
      send_timProperty(tpb);

      #else
      var asyncResult = Begin_timProperty(null, null, tpb);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timProperty(AsyncCallback callback, object state, TimPropertyBean tpb)
    #else
    public void send_timProperty(TimPropertyBean tpb)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timProperty", TMessageType.Oneway, seqid_));
      timProperty_args args = new timProperty_args();
      args.Tpb = tpb;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timRemoteUserAuth(AsyncCallback callback, object state, Tid tid, string pwd, TimAuth auth)
    {
      return send_timRemoteUserAuth(callback, state, tid, pwd, auth);
    }

    public TimRemoteUserBean End_timRemoteUserAuth(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_timRemoteUserAuth();
    }

    #endif

    /// <summary>
    /// 请求远程验证信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="pwd"></param>
    /// <param name="auth"></param>
    public TimRemoteUserBean timRemoteUserAuth(Tid tid, string pwd, TimAuth auth)
    {
      #if !SILVERLIGHT
      send_timRemoteUserAuth(tid, pwd, auth);
      return recv_timRemoteUserAuth();

      #else
      var asyncResult = Begin_timRemoteUserAuth(null, null, tid, pwd, auth);
      return End_timRemoteUserAuth(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timRemoteUserAuth(AsyncCallback callback, object state, Tid tid, string pwd, TimAuth auth)
    #else
    public void send_timRemoteUserAuth(Tid tid, string pwd, TimAuth auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timRemoteUserAuth", TMessageType.Call, seqid_));
      timRemoteUserAuth_args args = new timRemoteUserAuth_args();
      args.Tid = tid;
      args.Pwd = pwd;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimRemoteUserBean recv_timRemoteUserAuth()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      timRemoteUserAuth_result result = new timRemoteUserAuth_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timRemoteUserAuth failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timRemoteUserGet(AsyncCallback callback, object state, Tid tid, TimAuth auth)
    {
      return send_timRemoteUserGet(callback, state, tid, auth);
    }

    public TimRemoteUserBean End_timRemoteUserGet(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_timRemoteUserGet();
    }

    #endif

    /// <summary>
    /// 请求远程用户信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="auth"></param>
    public TimRemoteUserBean timRemoteUserGet(Tid tid, TimAuth auth)
    {
      #if !SILVERLIGHT
      send_timRemoteUserGet(tid, auth);
      return recv_timRemoteUserGet();

      #else
      var asyncResult = Begin_timRemoteUserGet(null, null, tid, auth);
      return End_timRemoteUserGet(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timRemoteUserGet(AsyncCallback callback, object state, Tid tid, TimAuth auth)
    #else
    public void send_timRemoteUserGet(Tid tid, TimAuth auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timRemoteUserGet", TMessageType.Call, seqid_));
      timRemoteUserGet_args args = new timRemoteUserGet_args();
      args.Tid = tid;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimRemoteUserBean recv_timRemoteUserGet()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      timRemoteUserGet_result result = new timRemoteUserGet_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timRemoteUserGet failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timRemoteUserEdit(AsyncCallback callback, object state, Tid tid, TimUserBean ub, TimAuth auth)
    {
      return send_timRemoteUserEdit(callback, state, tid, ub, auth);
    }

    public TimRemoteUserBean End_timRemoteUserEdit(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_timRemoteUserEdit();
    }

    #endif

    /// <summary>
    /// 编辑远程用户信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="ub"></param>
    /// <param name="auth"></param>
    public TimRemoteUserBean timRemoteUserEdit(Tid tid, TimUserBean ub, TimAuth auth)
    {
      #if !SILVERLIGHT
      send_timRemoteUserEdit(tid, ub, auth);
      return recv_timRemoteUserEdit();

      #else
      var asyncResult = Begin_timRemoteUserEdit(null, null, tid, ub, auth);
      return End_timRemoteUserEdit(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timRemoteUserEdit(AsyncCallback callback, object state, Tid tid, TimUserBean ub, TimAuth auth)
    #else
    public void send_timRemoteUserEdit(Tid tid, TimUserBean ub, TimAuth auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timRemoteUserEdit", TMessageType.Call, seqid_));
      timRemoteUserEdit_args args = new timRemoteUserEdit_args();
      args.Tid = tid;
      args.Ub = ub;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimRemoteUserBean recv_timRemoteUserEdit()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      timRemoteUserEdit_result result = new timRemoteUserEdit_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timRemoteUserEdit failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timResponsePresence(AsyncCallback callback, object state, TimPBean pbean, TimAuth auth)
    {
      return send_timResponsePresence(callback, state, pbean, auth);
    }

    public TimResponseBean End_timResponsePresence(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_timResponsePresence();
    }

    #endif

    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbean"></param>
    /// <param name="auth"></param>
    public TimResponseBean timResponsePresence(TimPBean pbean, TimAuth auth)
    {
      #if !SILVERLIGHT
      send_timResponsePresence(pbean, auth);
      return recv_timResponsePresence();

      #else
      var asyncResult = Begin_timResponsePresence(null, null, pbean, auth);
      return End_timResponsePresence(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timResponsePresence(AsyncCallback callback, object state, TimPBean pbean, TimAuth auth)
    #else
    public void send_timResponsePresence(TimPBean pbean, TimAuth auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timResponsePresence", TMessageType.Call, seqid_));
      timResponsePresence_args args = new timResponsePresence_args();
      args.Pbean = pbean;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimResponseBean recv_timResponsePresence()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      timResponsePresence_result result = new timResponsePresence_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponsePresence failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timResponseMessage(AsyncCallback callback, object state, TimMBean mbean, TimAuth auth)
    {
      return send_timResponseMessage(callback, state, mbean, auth);
    }

    public TimResponseBean End_timResponseMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_timResponseMessage();
    }

    #endif

    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbean"></param>
    /// <param name="auth"></param>
    public TimResponseBean timResponseMessage(TimMBean mbean, TimAuth auth)
    {
      #if !SILVERLIGHT
      send_timResponseMessage(mbean, auth);
      return recv_timResponseMessage();

      #else
      var asyncResult = Begin_timResponseMessage(null, null, mbean, auth);
      return End_timResponseMessage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timResponseMessage(AsyncCallback callback, object state, TimMBean mbean, TimAuth auth)
    #else
    public void send_timResponseMessage(TimMBean mbean, TimAuth auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timResponseMessage", TMessageType.Call, seqid_));
      timResponseMessage_args args = new timResponseMessage_args();
      args.Mbean = mbean;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimResponseBean recv_timResponseMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      timResponseMessage_result result = new timResponseMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponseMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timResponseMessageIq(AsyncCallback callback, object state, TimMessageIq timMsgIq, string iqType, TimAuth auth)
    {
      return send_timResponseMessageIq(callback, state, timMsgIq, iqType, auth);
    }

    public TimMBeanList End_timResponseMessageIq(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_timResponseMessageIq();
    }

    #endif

    /// <summary>
    /// 信息请求 get请求数据 del删除（辅助接口）
    /// </summary>
    /// <param name="timMsgIq"></param>
    /// <param name="iqType"></param>
    /// <param name="auth"></param>
    public TimMBeanList timResponseMessageIq(TimMessageIq timMsgIq, string iqType, TimAuth auth)
    {
      #if !SILVERLIGHT
      send_timResponseMessageIq(timMsgIq, iqType, auth);
      return recv_timResponseMessageIq();

      #else
      var asyncResult = Begin_timResponseMessageIq(null, null, timMsgIq, iqType, auth);
      return End_timResponseMessageIq(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timResponseMessageIq(AsyncCallback callback, object state, TimMessageIq timMsgIq, string iqType, TimAuth auth)
    #else
    public void send_timResponseMessageIq(TimMessageIq timMsgIq, string iqType, TimAuth auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timResponseMessageIq", TMessageType.Call, seqid_));
      timResponseMessageIq_args args = new timResponseMessageIq_args();
      args.TimMsgIq = timMsgIq;
      args.IqType = iqType;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimMBeanList recv_timResponseMessageIq()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      timResponseMessageIq_result result = new timResponseMessageIq_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponseMessageIq failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timResponsePresenceList(AsyncCallback callback, object state, TimPBeanList pbeanList, TimAuth auth)
    {
      return send_timResponsePresenceList(callback, state, pbeanList, auth);
    }

    public TimResponseBean End_timResponsePresenceList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_timResponsePresenceList();
    }

    #endif

    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbeanList"></param>
    /// <param name="auth"></param>
    public TimResponseBean timResponsePresenceList(TimPBeanList pbeanList, TimAuth auth)
    {
      #if !SILVERLIGHT
      send_timResponsePresenceList(pbeanList, auth);
      return recv_timResponsePresenceList();

      #else
      var asyncResult = Begin_timResponsePresenceList(null, null, pbeanList, auth);
      return End_timResponsePresenceList(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timResponsePresenceList(AsyncCallback callback, object state, TimPBeanList pbeanList, TimAuth auth)
    #else
    public void send_timResponsePresenceList(TimPBeanList pbeanList, TimAuth auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timResponsePresenceList", TMessageType.Call, seqid_));
      timResponsePresenceList_args args = new timResponsePresenceList_args();
      args.PbeanList = pbeanList;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimResponseBean recv_timResponsePresenceList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      timResponsePresenceList_result result = new timResponsePresenceList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponsePresenceList failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_timResponseMessageList(AsyncCallback callback, object state, TimMBeanList mbeanList, TimAuth auth)
    {
      return send_timResponseMessageList(callback, state, mbeanList, auth);
    }

    public TimResponseBean End_timResponseMessageList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_timResponseMessageList();
    }

    #endif

    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbeanList"></param>
    /// <param name="auth"></param>
    public TimResponseBean timResponseMessageList(TimMBeanList mbeanList, TimAuth auth)
    {
      #if !SILVERLIGHT
      send_timResponseMessageList(mbeanList, auth);
      return recv_timResponseMessageList();

      #else
      var asyncResult = Begin_timResponseMessageList(null, null, mbeanList, auth);
      return End_timResponseMessageList(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_timResponseMessageList(AsyncCallback callback, object state, TimMBeanList mbeanList, TimAuth auth)
    #else
    public void send_timResponseMessageList(TimMBeanList mbeanList, TimAuth auth)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("timResponseMessageList", TMessageType.Call, seqid_));
      timResponseMessageList_args args = new timResponseMessageList_args();
      args.MbeanList = mbeanList;
      args.Auth = auth;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TimResponseBean recv_timResponseMessageList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      timResponseMessageList_result result = new timResponseMessageList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponseMessageList failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["timStream"] = timStream_Process;
      processMap_["timStarttls"] = timStarttls_Process;
      processMap_["timLogin"] = timLogin_Process;
      processMap_["timAck"] = timAck_Process;
      processMap_["timPresence"] = timPresence_Process;
      processMap_["timMessage"] = timMessage_Process;
      processMap_["timPing"] = timPing_Process;
      processMap_["timError"] = timError_Process;
      processMap_["timLogout"] = timLogout_Process;
      processMap_["timRegist"] = timRegist_Process;
      processMap_["timRoser"] = timRoser_Process;
      processMap_["timMessageList"] = timMessageList_Process;
      processMap_["timPresenceList"] = timPresenceList_Process;
      processMap_["timMessageIq"] = timMessageIq_Process;
      processMap_["timMessageResult"] = timMessageResult_Process;
      processMap_["timProperty"] = timProperty_Process;
      processMap_["timRemoteUserAuth"] = timRemoteUserAuth_Process;
      processMap_["timRemoteUserGet"] = timRemoteUserGet_Process;
      processMap_["timRemoteUserEdit"] = timRemoteUserEdit_Process;
      processMap_["timResponsePresence"] = timResponsePresence_Process;
      processMap_["timResponseMessage"] = timResponseMessage_Process;
      processMap_["timResponseMessageIq"] = timResponseMessageIq_Process;
      processMap_["timResponsePresenceList"] = timResponsePresenceList_Process;
      processMap_["timResponseMessageList"] = timResponseMessageList_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void timStream_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timStream_args args = new timStream_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timStream(args.Param);
      return;
    }
    public void timStarttls_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timStarttls_args args = new timStarttls_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timStarttls();
      return;
    }
    public void timLogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timLogin_args args = new timLogin_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timLogin(args.Tid, args.Pwd);
      return;
    }
    public void timAck_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timAck_args args = new timAck_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timAck(args.Ab);
      return;
    }
    public void timPresence_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timPresence_args args = new timPresence_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timPresence(args.Pbean);
      return;
    }
    public void timMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timMessage_args args = new timMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timMessage(args.Mbean);
      return;
    }
    public void timPing_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timPing_args args = new timPing_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timPing(args.ThreadId);
      return;
    }
    public void timError_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timError_args args = new timError_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timError(args.E);
      return;
    }
    public void timLogout_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timLogout_args args = new timLogout_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timLogout();
      return;
    }
    public void timRegist_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timRegist_args args = new timRegist_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timRegist(args.Tid, args.Auth);
      return;
    }
    public void timRoser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timRoser_args args = new timRoser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timRoser(args.Roster);
      return;
    }
    public void timMessageList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timMessageList_args args = new timMessageList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timMessageList(args.MbeanList);
      return;
    }
    public void timPresenceList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timPresenceList_args args = new timPresenceList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timPresenceList(args.PbeanList);
      return;
    }
    public void timMessageIq_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timMessageIq_args args = new timMessageIq_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timMessageIq(args.TimMsgIq, args.IqType);
      return;
    }
    public void timMessageResult_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timMessageResult_args args = new timMessageResult_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timMessageResult(args.Mbean);
      return;
    }
    public void timProperty_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timProperty_args args = new timProperty_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.timProperty(args.Tpb);
      return;
    }
    public void timRemoteUserAuth_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timRemoteUserAuth_args args = new timRemoteUserAuth_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      timRemoteUserAuth_result result = new timRemoteUserAuth_result();
      result.Success = iface_.timRemoteUserAuth(args.Tid, args.Pwd, args.Auth);
      oprot.WriteMessageBegin(new TMessage("timRemoteUserAuth", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void timRemoteUserGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timRemoteUserGet_args args = new timRemoteUserGet_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      timRemoteUserGet_result result = new timRemoteUserGet_result();
      result.Success = iface_.timRemoteUserGet(args.Tid, args.Auth);
      oprot.WriteMessageBegin(new TMessage("timRemoteUserGet", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void timRemoteUserEdit_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timRemoteUserEdit_args args = new timRemoteUserEdit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      timRemoteUserEdit_result result = new timRemoteUserEdit_result();
      result.Success = iface_.timRemoteUserEdit(args.Tid, args.Ub, args.Auth);
      oprot.WriteMessageBegin(new TMessage("timRemoteUserEdit", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void timResponsePresence_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timResponsePresence_args args = new timResponsePresence_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      timResponsePresence_result result = new timResponsePresence_result();
      result.Success = iface_.timResponsePresence(args.Pbean, args.Auth);
      oprot.WriteMessageBegin(new TMessage("timResponsePresence", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void timResponseMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timResponseMessage_args args = new timResponseMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      timResponseMessage_result result = new timResponseMessage_result();
      result.Success = iface_.timResponseMessage(args.Mbean, args.Auth);
      oprot.WriteMessageBegin(new TMessage("timResponseMessage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void timResponseMessageIq_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timResponseMessageIq_args args = new timResponseMessageIq_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      timResponseMessageIq_result result = new timResponseMessageIq_result();
      result.Success = iface_.timResponseMessageIq(args.TimMsgIq, args.IqType, args.Auth);
      oprot.WriteMessageBegin(new TMessage("timResponseMessageIq", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void timResponsePresenceList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timResponsePresenceList_args args = new timResponsePresenceList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      timResponsePresenceList_result result = new timResponsePresenceList_result();
      result.Success = iface_.timResponsePresenceList(args.PbeanList, args.Auth);
      oprot.WriteMessageBegin(new TMessage("timResponsePresenceList", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void timResponseMessageList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      timResponseMessageList_args args = new timResponseMessageList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      timResponseMessageList_result result = new timResponseMessageList_result();
      result.Success = iface_.timResponseMessageList(args.MbeanList, args.Auth);
      oprot.WriteMessageBegin(new TMessage("timResponseMessageList", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timStream_args : TBase
  {
    private TimParam _param;

    public TimParam Param
    {
      get
      {
        return _param;
      }
      set
      {
        __isset.param = true;
        this._param = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool param;
    }

    public timStream_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Param = new TimParam();
                Param.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timStream_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Param != null && __isset.param) {
          field.Name = "param";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Param.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timStream_args(");
      bool __first = true;
      if (Param != null && __isset.param) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param: ");
        __sb.Append(Param== null ? "<null>" : Param.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timStarttls_args : TBase
  {

    public timStarttls_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timStarttls_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timStarttls_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timLogin_args : TBase
  {
    private Tid _tid;
    private string _pwd;

    public Tid Tid
    {
      get
      {
        return _tid;
      }
      set
      {
        __isset.tid = true;
        this._tid = value;
      }
    }

    public string Pwd
    {
      get
      {
        return _pwd;
      }
      set
      {
        __isset.pwd = true;
        this._pwd = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tid;
      public bool pwd;
    }

    public timLogin_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tid = new Tid();
                Tid.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Pwd = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timLogin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tid != null && __isset.tid) {
          field.Name = "tid";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tid.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Pwd != null && __isset.pwd) {
          field.Name = "pwd";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Pwd);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timLogin_args(");
      bool __first = true;
      if (Tid != null && __isset.tid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tid: ");
        __sb.Append(Tid== null ? "<null>" : Tid.ToString());
      }
      if (Pwd != null && __isset.pwd) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pwd: ");
        __sb.Append(Pwd);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timAck_args : TBase
  {
    private TimAckBean _ab;

    public TimAckBean Ab
    {
      get
      {
        return _ab;
      }
      set
      {
        __isset.ab = true;
        this._ab = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ab;
    }

    public timAck_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ab = new TimAckBean();
                Ab.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timAck_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ab != null && __isset.ab) {
          field.Name = "ab";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ab.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timAck_args(");
      bool __first = true;
      if (Ab != null && __isset.ab) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ab: ");
        __sb.Append(Ab== null ? "<null>" : Ab.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timPresence_args : TBase
  {
    private TimPBean _pbean;

    public TimPBean Pbean
    {
      get
      {
        return _pbean;
      }
      set
      {
        __isset.pbean = true;
        this._pbean = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pbean;
    }

    public timPresence_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Pbean = new TimPBean();
                Pbean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timPresence_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Pbean != null && __isset.pbean) {
          field.Name = "pbean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Pbean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timPresence_args(");
      bool __first = true;
      if (Pbean != null && __isset.pbean) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pbean: ");
        __sb.Append(Pbean== null ? "<null>" : Pbean.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timMessage_args : TBase
  {
    private TimMBean _mbean;

    public TimMBean Mbean
    {
      get
      {
        return _mbean;
      }
      set
      {
        __isset.mbean = true;
        this._mbean = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mbean;
    }

    public timMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Mbean = new TimMBean();
                Mbean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mbean != null && __isset.mbean) {
          field.Name = "mbean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Mbean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timMessage_args(");
      bool __first = true;
      if (Mbean != null && __isset.mbean) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mbean: ");
        __sb.Append(Mbean== null ? "<null>" : Mbean.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timPing_args : TBase
  {
    private string _threadId;

    public string ThreadId
    {
      get
      {
        return _threadId;
      }
      set
      {
        __isset.threadId = true;
        this._threadId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool threadId;
    }

    public timPing_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ThreadId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timPing_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ThreadId != null && __isset.threadId) {
          field.Name = "threadId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ThreadId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timPing_args(");
      bool __first = true;
      if (ThreadId != null && __isset.threadId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThreadId: ");
        __sb.Append(ThreadId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timError_args : TBase
  {
    private TimError _e;

    public TimError E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public timError_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TimError();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timError_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (E != null && __isset.e) {
          field.Name = "e";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timError_args(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timLogout_args : TBase
  {

    public timLogout_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timLogout_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timLogout_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timRegist_args : TBase
  {
    private Tid _tid;
    private string _auth;

    public Tid Tid
    {
      get
      {
        return _tid;
      }
      set
      {
        __isset.tid = true;
        this._tid = value;
      }
    }

    public string Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tid;
      public bool auth;
    }

    public timRegist_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tid = new Tid();
                Tid.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Auth = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timRegist_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tid != null && __isset.tid) {
          field.Name = "tid";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tid.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Auth);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timRegist_args(");
      bool __first = true;
      if (Tid != null && __isset.tid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tid: ");
        __sb.Append(Tid== null ? "<null>" : Tid.ToString());
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timRoser_args : TBase
  {
    private TimRoster _roster;

    public TimRoster Roster
    {
      get
      {
        return _roster;
      }
      set
      {
        __isset.roster = true;
        this._roster = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool roster;
    }

    public timRoser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Roster = new TimRoster();
                Roster.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timRoser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Roster != null && __isset.roster) {
          field.Name = "roster";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Roster.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timRoser_args(");
      bool __first = true;
      if (Roster != null && __isset.roster) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Roster: ");
        __sb.Append(Roster== null ? "<null>" : Roster.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timMessageList_args : TBase
  {
    private TimMBeanList _mbeanList;

    public TimMBeanList MbeanList
    {
      get
      {
        return _mbeanList;
      }
      set
      {
        __isset.mbeanList = true;
        this._mbeanList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mbeanList;
    }

    public timMessageList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                MbeanList = new TimMBeanList();
                MbeanList.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timMessageList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MbeanList != null && __isset.mbeanList) {
          field.Name = "mbeanList";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          MbeanList.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timMessageList_args(");
      bool __first = true;
      if (MbeanList != null && __isset.mbeanList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MbeanList: ");
        __sb.Append(MbeanList== null ? "<null>" : MbeanList.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timPresenceList_args : TBase
  {
    private TimPBeanList _pbeanList;

    public TimPBeanList PbeanList
    {
      get
      {
        return _pbeanList;
      }
      set
      {
        __isset.pbeanList = true;
        this._pbeanList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pbeanList;
    }

    public timPresenceList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PbeanList = new TimPBeanList();
                PbeanList.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timPresenceList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PbeanList != null && __isset.pbeanList) {
          field.Name = "pbeanList";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PbeanList.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timPresenceList_args(");
      bool __first = true;
      if (PbeanList != null && __isset.pbeanList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PbeanList: ");
        __sb.Append(PbeanList== null ? "<null>" : PbeanList.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timMessageIq_args : TBase
  {
    private TimMessageIq _timMsgIq;
    private string _iqType;

    public TimMessageIq TimMsgIq
    {
      get
      {
        return _timMsgIq;
      }
      set
      {
        __isset.timMsgIq = true;
        this._timMsgIq = value;
      }
    }

    public string IqType
    {
      get
      {
        return _iqType;
      }
      set
      {
        __isset.iqType = true;
        this._iqType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool timMsgIq;
      public bool iqType;
    }

    public timMessageIq_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TimMsgIq = new TimMessageIq();
                TimMsgIq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                IqType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timMessageIq_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TimMsgIq != null && __isset.timMsgIq) {
          field.Name = "timMsgIq";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TimMsgIq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (IqType != null && __isset.iqType) {
          field.Name = "iqType";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IqType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timMessageIq_args(");
      bool __first = true;
      if (TimMsgIq != null && __isset.timMsgIq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimMsgIq: ");
        __sb.Append(TimMsgIq== null ? "<null>" : TimMsgIq.ToString());
      }
      if (IqType != null && __isset.iqType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IqType: ");
        __sb.Append(IqType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timMessageResult_args : TBase
  {
    private TimMBean _mbean;

    public TimMBean Mbean
    {
      get
      {
        return _mbean;
      }
      set
      {
        __isset.mbean = true;
        this._mbean = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mbean;
    }

    public timMessageResult_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Mbean = new TimMBean();
                Mbean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timMessageResult_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mbean != null && __isset.mbean) {
          field.Name = "mbean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Mbean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timMessageResult_args(");
      bool __first = true;
      if (Mbean != null && __isset.mbean) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mbean: ");
        __sb.Append(Mbean== null ? "<null>" : Mbean.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timProperty_args : TBase
  {
    private TimPropertyBean _tpb;

    public TimPropertyBean Tpb
    {
      get
      {
        return _tpb;
      }
      set
      {
        __isset.tpb = true;
        this._tpb = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tpb;
    }

    public timProperty_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tpb = new TimPropertyBean();
                Tpb.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timProperty_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tpb != null && __isset.tpb) {
          field.Name = "tpb";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tpb.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timProperty_args(");
      bool __first = true;
      if (Tpb != null && __isset.tpb) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tpb: ");
        __sb.Append(Tpb== null ? "<null>" : Tpb.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timRemoteUserAuth_args : TBase
  {
    private Tid _tid;
    private string _pwd;
    private TimAuth _auth;

    public Tid Tid
    {
      get
      {
        return _tid;
      }
      set
      {
        __isset.tid = true;
        this._tid = value;
      }
    }

    public string Pwd
    {
      get
      {
        return _pwd;
      }
      set
      {
        __isset.pwd = true;
        this._pwd = value;
      }
    }

    public TimAuth Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tid;
      public bool pwd;
      public bool auth;
    }

    public timRemoteUserAuth_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tid = new Tid();
                Tid.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Pwd = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Auth = new TimAuth();
                Auth.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timRemoteUserAuth_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tid != null && __isset.tid) {
          field.Name = "tid";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tid.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Pwd != null && __isset.pwd) {
          field.Name = "pwd";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Pwd);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Auth.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timRemoteUserAuth_args(");
      bool __first = true;
      if (Tid != null && __isset.tid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tid: ");
        __sb.Append(Tid== null ? "<null>" : Tid.ToString());
      }
      if (Pwd != null && __isset.pwd) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pwd: ");
        __sb.Append(Pwd);
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth== null ? "<null>" : Auth.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timRemoteUserAuth_result : TBase
  {
    private TimRemoteUserBean _success;

    public TimRemoteUserBean Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public timRemoteUserAuth_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimRemoteUserBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timRemoteUserAuth_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timRemoteUserAuth_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timRemoteUserGet_args : TBase
  {
    private Tid _tid;
    private TimAuth _auth;

    public Tid Tid
    {
      get
      {
        return _tid;
      }
      set
      {
        __isset.tid = true;
        this._tid = value;
      }
    }

    public TimAuth Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tid;
      public bool auth;
    }

    public timRemoteUserGet_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tid = new Tid();
                Tid.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Auth = new TimAuth();
                Auth.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timRemoteUserGet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tid != null && __isset.tid) {
          field.Name = "tid";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tid.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Auth.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timRemoteUserGet_args(");
      bool __first = true;
      if (Tid != null && __isset.tid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tid: ");
        __sb.Append(Tid== null ? "<null>" : Tid.ToString());
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth== null ? "<null>" : Auth.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timRemoteUserGet_result : TBase
  {
    private TimRemoteUserBean _success;

    public TimRemoteUserBean Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public timRemoteUserGet_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimRemoteUserBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timRemoteUserGet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timRemoteUserGet_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timRemoteUserEdit_args : TBase
  {
    private Tid _tid;
    private TimUserBean _ub;
    private TimAuth _auth;

    public Tid Tid
    {
      get
      {
        return _tid;
      }
      set
      {
        __isset.tid = true;
        this._tid = value;
      }
    }

    public TimUserBean Ub
    {
      get
      {
        return _ub;
      }
      set
      {
        __isset.ub = true;
        this._ub = value;
      }
    }

    public TimAuth Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tid;
      public bool ub;
      public bool auth;
    }

    public timRemoteUserEdit_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Tid = new Tid();
                Tid.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ub = new TimUserBean();
                Ub.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Auth = new TimAuth();
                Auth.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timRemoteUserEdit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Tid != null && __isset.tid) {
          field.Name = "tid";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Tid.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Ub != null && __isset.ub) {
          field.Name = "ub";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ub.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Auth.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timRemoteUserEdit_args(");
      bool __first = true;
      if (Tid != null && __isset.tid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tid: ");
        __sb.Append(Tid== null ? "<null>" : Tid.ToString());
      }
      if (Ub != null && __isset.ub) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ub: ");
        __sb.Append(Ub== null ? "<null>" : Ub.ToString());
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth== null ? "<null>" : Auth.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timRemoteUserEdit_result : TBase
  {
    private TimRemoteUserBean _success;

    public TimRemoteUserBean Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public timRemoteUserEdit_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimRemoteUserBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timRemoteUserEdit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timRemoteUserEdit_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponsePresence_args : TBase
  {
    private TimPBean _pbean;
    private TimAuth _auth;

    public TimPBean Pbean
    {
      get
      {
        return _pbean;
      }
      set
      {
        __isset.pbean = true;
        this._pbean = value;
      }
    }

    public TimAuth Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pbean;
      public bool auth;
    }

    public timResponsePresence_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Pbean = new TimPBean();
                Pbean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Auth = new TimAuth();
                Auth.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponsePresence_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Pbean != null && __isset.pbean) {
          field.Name = "pbean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Pbean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Auth.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponsePresence_args(");
      bool __first = true;
      if (Pbean != null && __isset.pbean) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pbean: ");
        __sb.Append(Pbean== null ? "<null>" : Pbean.ToString());
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth== null ? "<null>" : Auth.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponsePresence_result : TBase
  {
    private TimResponseBean _success;

    public TimResponseBean Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public timResponsePresence_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimResponseBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponsePresence_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponsePresence_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponseMessage_args : TBase
  {
    private TimMBean _mbean;
    private TimAuth _auth;

    public TimMBean Mbean
    {
      get
      {
        return _mbean;
      }
      set
      {
        __isset.mbean = true;
        this._mbean = value;
      }
    }

    public TimAuth Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mbean;
      public bool auth;
    }

    public timResponseMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Mbean = new TimMBean();
                Mbean.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Auth = new TimAuth();
                Auth.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponseMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mbean != null && __isset.mbean) {
          field.Name = "mbean";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Mbean.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Auth.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponseMessage_args(");
      bool __first = true;
      if (Mbean != null && __isset.mbean) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mbean: ");
        __sb.Append(Mbean== null ? "<null>" : Mbean.ToString());
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth== null ? "<null>" : Auth.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponseMessage_result : TBase
  {
    private TimResponseBean _success;

    public TimResponseBean Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public timResponseMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimResponseBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponseMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponseMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponseMessageIq_args : TBase
  {
    private TimMessageIq _timMsgIq;
    private string _iqType;
    private TimAuth _auth;

    public TimMessageIq TimMsgIq
    {
      get
      {
        return _timMsgIq;
      }
      set
      {
        __isset.timMsgIq = true;
        this._timMsgIq = value;
      }
    }

    public string IqType
    {
      get
      {
        return _iqType;
      }
      set
      {
        __isset.iqType = true;
        this._iqType = value;
      }
    }

    public TimAuth Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool timMsgIq;
      public bool iqType;
      public bool auth;
    }

    public timResponseMessageIq_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                TimMsgIq = new TimMessageIq();
                TimMsgIq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                IqType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Auth = new TimAuth();
                Auth.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponseMessageIq_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TimMsgIq != null && __isset.timMsgIq) {
          field.Name = "timMsgIq";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          TimMsgIq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (IqType != null && __isset.iqType) {
          field.Name = "iqType";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IqType);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Auth.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponseMessageIq_args(");
      bool __first = true;
      if (TimMsgIq != null && __isset.timMsgIq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimMsgIq: ");
        __sb.Append(TimMsgIq== null ? "<null>" : TimMsgIq.ToString());
      }
      if (IqType != null && __isset.iqType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IqType: ");
        __sb.Append(IqType);
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth== null ? "<null>" : Auth.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponseMessageIq_result : TBase
  {
    private TimMBeanList _success;

    public TimMBeanList Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public timResponseMessageIq_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimMBeanList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponseMessageIq_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponseMessageIq_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponsePresenceList_args : TBase
  {
    private TimPBeanList _pbeanList;
    private TimAuth _auth;

    public TimPBeanList PbeanList
    {
      get
      {
        return _pbeanList;
      }
      set
      {
        __isset.pbeanList = true;
        this._pbeanList = value;
      }
    }

    public TimAuth Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pbeanList;
      public bool auth;
    }

    public timResponsePresenceList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PbeanList = new TimPBeanList();
                PbeanList.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Auth = new TimAuth();
                Auth.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponsePresenceList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PbeanList != null && __isset.pbeanList) {
          field.Name = "pbeanList";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PbeanList.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Auth.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponsePresenceList_args(");
      bool __first = true;
      if (PbeanList != null && __isset.pbeanList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PbeanList: ");
        __sb.Append(PbeanList== null ? "<null>" : PbeanList.ToString());
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth== null ? "<null>" : Auth.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponsePresenceList_result : TBase
  {
    private TimResponseBean _success;

    public TimResponseBean Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public timResponsePresenceList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimResponseBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponsePresenceList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponsePresenceList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponseMessageList_args : TBase
  {
    private TimMBeanList _mbeanList;
    private TimAuth _auth;

    public TimMBeanList MbeanList
    {
      get
      {
        return _mbeanList;
      }
      set
      {
        __isset.mbeanList = true;
        this._mbeanList = value;
      }
    }

    public TimAuth Auth
    {
      get
      {
        return _auth;
      }
      set
      {
        __isset.auth = true;
        this._auth = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mbeanList;
      public bool auth;
    }

    public timResponseMessageList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                MbeanList = new TimMBeanList();
                MbeanList.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Auth = new TimAuth();
                Auth.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponseMessageList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MbeanList != null && __isset.mbeanList) {
          field.Name = "mbeanList";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          MbeanList.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Auth != null && __isset.auth) {
          field.Name = "auth";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Auth.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponseMessageList_args(");
      bool __first = true;
      if (MbeanList != null && __isset.mbeanList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MbeanList: ");
        __sb.Append(MbeanList== null ? "<null>" : MbeanList.ToString());
      }
      if (Auth != null && __isset.auth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Auth: ");
        __sb.Append(Auth== null ? "<null>" : Auth.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class timResponseMessageList_result : TBase
  {
    private TimResponseBean _success;

    public TimResponseBean Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public timResponseMessageList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TimResponseBean();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("timResponseMessageList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("timResponseMessageList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
