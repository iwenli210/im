/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Tid : TBase
{
  private string _domain;
  private string _resource;
  private string _type;
  private List<TimNode> _extraList;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 登陆名   用户登录号，房间号等
  /// </summary>
  public string Name { get; set; }

  /// <summary>
  /// 域名 用于区分渠道等 appid，appsecret
  /// </summary>
  public string Domain
  {
    get
    {
      return _domain;
    }
    set
    {
      __isset.domain = true;
      this._domain = value;
    }
  }

  /// <summary>
  /// 系统 自行约定 如 ： 1IOS，2android，3H5，4WEB 等
  /// </summary>
  public string Resource
  {
    get
    {
      return _resource;
    }
    set
    {
      __isset.resource = true;
      this._resource = value;
    }
  }

  /// <summary>
  /// normal，group
  /// </summary>
  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  /// <summary>
  /// 附加信息：如传递客户端信息 iphone6，xiaomi，huawei等
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool domain;
    public bool resource;
    public bool type;
    public bool extraList;
    public bool extraMap;
  }

  public Tid() {
  }

  public Tid(string name) : this() {
    this.Name = name;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_name = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
              isset_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Domain = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Resource = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Type = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                ExtraList = new List<TimNode>();
                TList _list27 = iprot.ReadListBegin();
                for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                {
                  TimNode _elem29;
                  _elem29 = new TimNode();
                  _elem29.Read(iprot);
                  ExtraList.Add(_elem29);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map30 = iprot.ReadMapBegin();
                for( int _i31 = 0; _i31 < _map30.Count; ++_i31)
                {
                  string _key32;
                  string _val33;
                  _key32 = iprot.ReadString();
                  _val33 = iprot.ReadString();
                  ExtraMap[_key32] = _val33;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_name)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Tid");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "name";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Name);
      oprot.WriteFieldEnd();
      if (Domain != null && __isset.domain) {
        field.Name = "domain";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Domain);
        oprot.WriteFieldEnd();
      }
      if (Resource != null && __isset.resource) {
        field.Name = "resource";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Resource);
        oprot.WriteFieldEnd();
      }
      if (Type != null && __isset.type) {
        field.Name = "type";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type);
        oprot.WriteFieldEnd();
      }
      if (ExtraList != null && __isset.extraList) {
        field.Name = "extraList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExtraList.Count));
          foreach (TimNode _iter34 in ExtraList)
          {
            _iter34.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter35 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter35);
            oprot.WriteString(ExtraMap[_iter35]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Tid(");
    __sb.Append(", Name: ");
    __sb.Append(Name);
    if (Domain != null && __isset.domain) {
      __sb.Append(", Domain: ");
      __sb.Append(Domain);
    }
    if (Resource != null && __isset.resource) {
      __sb.Append(", Resource: ");
      __sb.Append(Resource);
    }
    if (Type != null && __isset.type) {
      __sb.Append(", Type: ");
      __sb.Append(Type);
    }
    if (ExtraList != null && __isset.extraList) {
      __sb.Append(", ExtraList: ");
      __sb.Append(ExtraList);
    }
    if (ExtraMap != null && __isset.extraMap) {
      __sb.Append(", ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

