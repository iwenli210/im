/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimAckBean : TBase
{
  private string _id;
  private string _ackType;
  private string _ackStatus;
  private List<TimNode> _extraList;
  private TimError _err;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// id，返回所要回执协议的线程id
  /// </summary>
  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  /// <summary>
  /// 类型，自定义 如：ping，message等
  /// </summary>
  public string AckType
  {
    get
    {
      return _ackType;
    }
    set
    {
      __isset.ackType = true;
      this._ackType = value;
    }
  }

  /// <summary>
  /// 状态，如成功，失败等
  /// </summary>
  public string AckStatus
  {
    get
    {
      return _ackStatus;
    }
    set
    {
      __isset.ackStatus = true;
      this._ackStatus = value;
    }
  }

  /// <summary>
  /// 附加信息
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  /// <summary>
  /// 错误信息
  /// </summary>
  public TimError Err
  {
    get
    {
      return _err;
    }
    set
    {
      __isset.err = true;
      this._err = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool ackType;
    public bool ackStatus;
    public bool extraList;
    public bool err;
    public bool extraMap;
  }

  public TimAckBean() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              AckType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              AckStatus = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ExtraList = new List<TimNode>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  TimNode _elem2;
                  _elem2 = new TimNode();
                  _elem2.Read(iprot);
                  ExtraList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Err = new TimError();
              Err.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map3 = iprot.ReadMapBegin();
                for( int _i4 = 0; _i4 < _map3.Count; ++_i4)
                {
                  string _key5;
                  string _val6;
                  _key5 = iprot.ReadString();
                  _val6 = iprot.ReadString();
                  ExtraMap[_key5] = _val6;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimAckBean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (AckType != null && __isset.ackType) {
        field.Name = "ackType";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AckType);
        oprot.WriteFieldEnd();
      }
      if (AckStatus != null && __isset.ackStatus) {
        field.Name = "ackStatus";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AckStatus);
        oprot.WriteFieldEnd();
      }
      if (ExtraList != null && __isset.extraList) {
        field.Name = "extraList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExtraList.Count));
          foreach (TimNode _iter7 in ExtraList)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Err != null && __isset.err) {
        field.Name = "err";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Err.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter8 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter8);
            oprot.WriteString(ExtraMap[_iter8]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimAckBean(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (AckType != null && __isset.ackType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AckType: ");
      __sb.Append(AckType);
    }
    if (AckStatus != null && __isset.ackStatus) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AckStatus: ");
      __sb.Append(AckStatus);
    }
    if (ExtraList != null && __isset.extraList) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraList: ");
      __sb.Append(ExtraList);
    }
    if (Err != null && __isset.err) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Err: ");
      __sb.Append(Err== null ? "<null>" : Err.ToString());
    }
    if (ExtraMap != null && __isset.extraMap) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

