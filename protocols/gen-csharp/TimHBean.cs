/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimHBean : TBase
{
  private int _platform;

  /// <summary>
  /// 渠道
  /// </summary>
  public int Chl { get; set; }

  /// <summary>
  /// 平台
  /// </summary>
  public int Platform
  {
    get
    {
      return _platform;
    }
    set
    {
      __isset.platform = true;
      this._platform = value;
    }
  }

  /// <summary>
  /// version 客户端协议版本
  /// </summary>
  public short Version { get; set; }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool platform;
  }

  public TimHBean() {
  }

  public TimHBean(int chl, short version) : this() {
    this.Chl = chl;
    this.Version = version;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_chl = false;
      bool isset_version = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Chl = iprot.ReadI32();
              isset_chl = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Platform = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              Version = iprot.ReadI16();
              isset_version = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_chl)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_version)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimHBean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "chl";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Chl);
      oprot.WriteFieldEnd();
      if (__isset.platform) {
        field.Name = "platform";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Platform);
        oprot.WriteFieldEnd();
      }
      field.Name = "version";
      field.Type = TType.I16;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI16(Version);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimHBean(");
    __sb.Append(", Chl: ");
    __sb.Append(Chl);
    if (__isset.platform) {
      __sb.Append(", Platform: ");
      __sb.Append(Platform);
    }
    __sb.Append(", Version: ");
    __sb.Append(Version);
    __sb.Append(")");
    return __sb.ToString();
  }

}

