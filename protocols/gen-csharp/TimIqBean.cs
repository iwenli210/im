/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimIqBean : TBase
{
  private Tid _fromTid;
  private Tid _toTid;
  private string _type;
  private List<TimNode> _extraList;
  private TimError _error;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 线程id
  /// </summary>
  public string ThreadId { get; set; }

  public Tid FromTid
  {
    get
    {
      return _fromTid;
    }
    set
    {
      __isset.fromTid = true;
      this._fromTid = value;
    }
  }

  public Tid ToTid
  {
    get
    {
      return _toTid;
    }
    set
    {
      __isset.toTid = true;
      this._toTid = value;
    }
  }

  /// <summary>
  /// Get :获取当前域值。类似于http get方法
  /// Set :设置或替换get查询的值。类似于http put方法。
  /// Result :说明成功的响应了先前的查询。类似于http状态码200。
  /// Error: 查询和响应中出现的错误。
  /// </summary>
  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  /// <summary>
  /// 错误码
  /// </summary>
  public TimError Error
  {
    get
    {
      return _error;
    }
    set
    {
      __isset.error = true;
      this._error = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool fromTid;
    public bool toTid;
    public bool type;
    public bool extraList;
    public bool error;
    public bool extraMap;
  }

  public TimIqBean() {
  }

  public TimIqBean(string threadId) : this() {
    this.ThreadId = threadId;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_threadId = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ThreadId = iprot.ReadString();
              isset_threadId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              FromTid = new Tid();
              FromTid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              ToTid = new Tid();
              ToTid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Type = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                ExtraList = new List<TimNode>();
                TList _list84 = iprot.ReadListBegin();
                for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                {
                  TimNode _elem86;
                  _elem86 = new TimNode();
                  _elem86.Read(iprot);
                  ExtraList.Add(_elem86);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Error = new TimError();
              Error.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map87 = iprot.ReadMapBegin();
                for( int _i88 = 0; _i88 < _map87.Count; ++_i88)
                {
                  string _key89;
                  string _val90;
                  _key89 = iprot.ReadString();
                  _val90 = iprot.ReadString();
                  ExtraMap[_key89] = _val90;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_threadId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimIqBean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "threadId";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ThreadId);
      oprot.WriteFieldEnd();
      if (FromTid != null && __isset.fromTid) {
        field.Name = "fromTid";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        FromTid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ToTid != null && __isset.toTid) {
        field.Name = "toTid";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        ToTid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Type != null && __isset.type) {
        field.Name = "type";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type);
        oprot.WriteFieldEnd();
      }
      if (ExtraList != null && __isset.extraList) {
        field.Name = "extraList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExtraList.Count));
          foreach (TimNode _iter91 in ExtraList)
          {
            _iter91.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Error != null && __isset.error) {
        field.Name = "error";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Error.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter92 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter92);
            oprot.WriteString(ExtraMap[_iter92]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimIqBean(");
    __sb.Append(", ThreadId: ");
    __sb.Append(ThreadId);
    if (FromTid != null && __isset.fromTid) {
      __sb.Append(", FromTid: ");
      __sb.Append(FromTid== null ? "<null>" : FromTid.ToString());
    }
    if (ToTid != null && __isset.toTid) {
      __sb.Append(", ToTid: ");
      __sb.Append(ToTid== null ? "<null>" : ToTid.ToString());
    }
    if (Type != null && __isset.type) {
      __sb.Append(", Type: ");
      __sb.Append(Type);
    }
    if (ExtraList != null && __isset.extraList) {
      __sb.Append(", ExtraList: ");
      __sb.Append(ExtraList);
    }
    if (Error != null && __isset.error) {
      __sb.Append(", Error: ");
      __sb.Append(Error== null ? "<null>" : Error.ToString());
    }
    if (ExtraMap != null && __isset.extraMap) {
      __sb.Append(", ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

