/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimMBeanList : TBase
{
  private List<TimMBean> _timMBeanList;
  private string _reqType;
  private Dictionary<string, string> _extraMap;

  public string ThreadId { get; set; }

  /// <summary>
  /// 信息列表
  /// </summary>
  public List<TimMBean> TimMBeanList_
  {
    get
    {
      return _timMBeanList;
    }
    set
    {
      __isset.timMBeanList = true;
      this._timMBeanList = value;
    }
  }

  /// <summary>
  /// 类型
  /// </summary>
  public string ReqType
  {
    get
    {
      return _reqType;
    }
    set
    {
      __isset.reqType = true;
      this._reqType = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool timMBeanList;
    public bool reqType;
    public bool extraMap;
  }

  public TimMBeanList() {
  }

  public TimMBeanList(string threadId) : this() {
    this.ThreadId = threadId;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_threadId = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ThreadId = iprot.ReadString();
              isset_threadId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                TimMBeanList_ = new List<TimMBean>();
                TList _list149 = iprot.ReadListBegin();
                for( int _i150 = 0; _i150 < _list149.Count; ++_i150)
                {
                  TimMBean _elem151;
                  _elem151 = new TimMBean();
                  _elem151.Read(iprot);
                  TimMBeanList_.Add(_elem151);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ReqType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map152 = iprot.ReadMapBegin();
                for( int _i153 = 0; _i153 < _map152.Count; ++_i153)
                {
                  string _key154;
                  string _val155;
                  _key154 = iprot.ReadString();
                  _val155 = iprot.ReadString();
                  ExtraMap[_key154] = _val155;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_threadId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimMBeanList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "threadId";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ThreadId);
      oprot.WriteFieldEnd();
      if (TimMBeanList_ != null && __isset.timMBeanList) {
        field.Name = "timMBeanList";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, TimMBeanList_.Count));
          foreach (TimMBean _iter156 in TimMBeanList_)
          {
            _iter156.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ReqType != null && __isset.reqType) {
        field.Name = "reqType";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ReqType);
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter157 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter157);
            oprot.WriteString(ExtraMap[_iter157]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimMBeanList(");
    __sb.Append(", ThreadId: ");
    __sb.Append(ThreadId);
    if (TimMBeanList_ != null && __isset.timMBeanList) {
      __sb.Append(", TimMBeanList_: ");
      __sb.Append(TimMBeanList_);
    }
    if (ReqType != null && __isset.reqType) {
      __sb.Append(", ReqType: ");
      __sb.Append(ReqType);
    }
    if (ExtraMap != null && __isset.extraMap) {
      __sb.Append(", ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

