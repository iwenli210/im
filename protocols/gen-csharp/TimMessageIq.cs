/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimMessageIq : TBase
{
  private List<string> _tidlist;
  private TimPage _timPage;
  private List<string> _midlist;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// tid集合
  /// </summary>
  public List<string> Tidlist
  {
    get
    {
      return _tidlist;
    }
    set
    {
      __isset.tidlist = true;
      this._tidlist = value;
    }
  }

  /// <summary>
  /// 分页
  /// </summary>
  public TimPage TimPage
  {
    get
    {
      return _timPage;
    }
    set
    {
      __isset.timPage = true;
      this._timPage = value;
    }
  }

  /// <summary>
  /// mid集合
  /// </summary>
  public List<string> Midlist
  {
    get
    {
      return _midlist;
    }
    set
    {
      __isset.midlist = true;
      this._midlist = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool tidlist;
    public bool timPage;
    public bool midlist;
    public bool extraMap;
  }

  public TimMessageIq() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Tidlist = new List<string>();
                TList _list136 = iprot.ReadListBegin();
                for( int _i137 = 0; _i137 < _list136.Count; ++_i137)
                {
                  string _elem138;
                  _elem138 = iprot.ReadString();
                  Tidlist.Add(_elem138);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              TimPage = new TimPage();
              TimPage.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Midlist = new List<string>();
                TList _list139 = iprot.ReadListBegin();
                for( int _i140 = 0; _i140 < _list139.Count; ++_i140)
                {
                  string _elem141;
                  _elem141 = iprot.ReadString();
                  Midlist.Add(_elem141);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map142 = iprot.ReadMapBegin();
                for( int _i143 = 0; _i143 < _map142.Count; ++_i143)
                {
                  string _key144;
                  string _val145;
                  _key144 = iprot.ReadString();
                  _val145 = iprot.ReadString();
                  ExtraMap[_key144] = _val145;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimMessageIq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Tidlist != null && __isset.tidlist) {
        field.Name = "tidlist";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Tidlist.Count));
          foreach (string _iter146 in Tidlist)
          {
            oprot.WriteString(_iter146);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TimPage != null && __isset.timPage) {
        field.Name = "timPage";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        TimPage.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Midlist != null && __isset.midlist) {
        field.Name = "midlist";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Midlist.Count));
          foreach (string _iter147 in Midlist)
          {
            oprot.WriteString(_iter147);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter148 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter148);
            oprot.WriteString(ExtraMap[_iter148]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimMessageIq(");
    bool __first = true;
    if (Tidlist != null && __isset.tidlist) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Tidlist: ");
      __sb.Append(Tidlist);
    }
    if (TimPage != null && __isset.timPage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TimPage: ");
      __sb.Append(TimPage== null ? "<null>" : TimPage.ToString());
    }
    if (Midlist != null && __isset.midlist) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Midlist: ");
      __sb.Append(Midlist);
    }
    if (ExtraMap != null && __isset.extraMap) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

