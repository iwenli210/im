/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimPBean : TBase
{
  private Tid _fromTid;
  private Tid _toTid;
  private string _status;
  private string _type;
  private int _priority;
  private string _show;
  private Tid _leaguerTid;
  private List<TimNode> _extraList;
  private TimError _error;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 标识
  /// </summary>
  public string ThreadId { get; set; }

  public Tid FromTid
  {
    get
    {
      return _fromTid;
    }
    set
    {
      __isset.fromTid = true;
      this._fromTid = value;
    }
  }

  public Tid ToTid
  {
    get
    {
      return _toTid;
    }
    set
    {
      __isset.toTid = true;
      this._toTid = value;
    }
  }

  /// <summary>
  /// subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
  /// </summary>
  public string Status
  {
    get
    {
      return _status;
    }
    set
    {
      __isset.status = true;
      this._status = value;
    }
  }

  /// <summary>
  /// normal：类似于email，主要特点是不要求响应；
  /// chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
  /// groupchat：类似于聊天室里的群聊；
  /// headline：用于发送alert和notification；
  /// error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
  /// </summary>
  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  /// <summary>
  /// 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
  /// </summary>
  public int Priority
  {
    get
    {
      return _priority;
    }
    set
    {
      __isset.priority = true;
      this._priority = value;
    }
  }

  /// <summary>
  /// chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
  /// </summary>
  public string Show
  {
    get
    {
      return _show;
    }
    set
    {
      __isset.show = true;
      this._show = value;
    }
  }

  /// <summary>
  /// 成员Tid   群聊时信息发送者Tid
  /// </summary>
  public Tid LeaguerTid
  {
    get
    {
      return _leaguerTid;
    }
    set
    {
      __isset.leaguerTid = true;
      this._leaguerTid = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  /// <summary>
  /// 错误码
  /// </summary>
  public TimError Error
  {
    get
    {
      return _error;
    }
    set
    {
      __isset.error = true;
      this._error = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool fromTid;
    public bool toTid;
    public bool status;
    public bool type;
    public bool priority;
    public bool show;
    public bool leaguerTid;
    public bool extraList;
    public bool error;
    public bool extraMap;
  }

  public TimPBean() {
  }

  public TimPBean(string threadId) : this() {
    this.ThreadId = threadId;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_threadId = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ThreadId = iprot.ReadString();
              isset_threadId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              FromTid = new Tid();
              FromTid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              ToTid = new Tid();
              ToTid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Status = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Type = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Priority = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Show = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              LeaguerTid = new Tid();
              LeaguerTid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                ExtraList = new List<TimNode>();
                TList _list66 = iprot.ReadListBegin();
                for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                {
                  TimNode _elem68;
                  _elem68 = new TimNode();
                  _elem68.Read(iprot);
                  ExtraList.Add(_elem68);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              Error = new TimError();
              Error.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map69 = iprot.ReadMapBegin();
                for( int _i70 = 0; _i70 < _map69.Count; ++_i70)
                {
                  string _key71;
                  string _val72;
                  _key71 = iprot.ReadString();
                  _val72 = iprot.ReadString();
                  ExtraMap[_key71] = _val72;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_threadId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimPBean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "threadId";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ThreadId);
      oprot.WriteFieldEnd();
      if (FromTid != null && __isset.fromTid) {
        field.Name = "fromTid";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        FromTid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ToTid != null && __isset.toTid) {
        field.Name = "toTid";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        ToTid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Status != null && __isset.status) {
        field.Name = "status";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Status);
        oprot.WriteFieldEnd();
      }
      if (Type != null && __isset.type) {
        field.Name = "type";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.priority) {
        field.Name = "priority";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Priority);
        oprot.WriteFieldEnd();
      }
      if (Show != null && __isset.show) {
        field.Name = "show";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Show);
        oprot.WriteFieldEnd();
      }
      if (LeaguerTid != null && __isset.leaguerTid) {
        field.Name = "leaguerTid";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        LeaguerTid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ExtraList != null && __isset.extraList) {
        field.Name = "extraList";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExtraList.Count));
          foreach (TimNode _iter73 in ExtraList)
          {
            _iter73.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Error != null && __isset.error) {
        field.Name = "error";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        Error.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter74 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter74);
            oprot.WriteString(ExtraMap[_iter74]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimPBean(");
    __sb.Append(", ThreadId: ");
    __sb.Append(ThreadId);
    if (FromTid != null && __isset.fromTid) {
      __sb.Append(", FromTid: ");
      __sb.Append(FromTid== null ? "<null>" : FromTid.ToString());
    }
    if (ToTid != null && __isset.toTid) {
      __sb.Append(", ToTid: ");
      __sb.Append(ToTid== null ? "<null>" : ToTid.ToString());
    }
    if (Status != null && __isset.status) {
      __sb.Append(", Status: ");
      __sb.Append(Status);
    }
    if (Type != null && __isset.type) {
      __sb.Append(", Type: ");
      __sb.Append(Type);
    }
    if (__isset.priority) {
      __sb.Append(", Priority: ");
      __sb.Append(Priority);
    }
    if (Show != null && __isset.show) {
      __sb.Append(", Show: ");
      __sb.Append(Show);
    }
    if (LeaguerTid != null && __isset.leaguerTid) {
      __sb.Append(", LeaguerTid: ");
      __sb.Append(LeaguerTid== null ? "<null>" : LeaguerTid.ToString());
    }
    if (ExtraList != null && __isset.extraList) {
      __sb.Append(", ExtraList: ");
      __sb.Append(ExtraList);
    }
    if (Error != null && __isset.error) {
      __sb.Append(", Error: ");
      __sb.Append(Error== null ? "<null>" : Error.ToString());
    }
    if (ExtraMap != null && __isset.extraMap) {
      __sb.Append(", ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

