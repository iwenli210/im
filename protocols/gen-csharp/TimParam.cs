/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimParam : TBase
{
  private string _timestamp;
  private short _version;
  private string _lang;
  private List<TimNode> _extraList;
  private Dictionary<string, string> _extraMap;
  private string _interflow;
  private string _tls;

  /// <summary>
  /// 服务器时间
  /// </summary>
  public string Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }

  /// <summary>
  /// 版本
  /// </summary>
  public short Version
  {
    get
    {
      return _version;
    }
    set
    {
      __isset.version = true;
      this._version = value;
    }
  }

  /// <summary>
  /// 语言
  /// </summary>
  public string Lang
  {
    get
    {
      return _lang;
    }
    set
    {
      __isset.lang = true;
      this._lang = value;
    }
  }

  /// <summary>
  /// 附加信息
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }

  /// <summary>
  /// 消息合流
  /// </summary>
  public string Interflow
  {
    get
    {
      return _interflow;
    }
    set
    {
      __isset.interflow = true;
      this._interflow = value;
    }
  }

  /// <summary>
  /// tls
  /// </summary>
  public string Tls
  {
    get
    {
      return _tls;
    }
    set
    {
      __isset.tls = true;
      this._tls = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool timestamp;
    public bool version;
    public bool lang;
    public bool extraList;
    public bool extraMap;
    public bool interflow;
    public bool tls;
  }

  public TimParam() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Timestamp = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              Version = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Lang = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ExtraList = new List<TimNode>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  TimNode _elem11;
                  _elem11 = new TimNode();
                  _elem11.Read(iprot);
                  ExtraList.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map12 = iprot.ReadMapBegin();
                for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
                {
                  string _key14;
                  string _val15;
                  _key14 = iprot.ReadString();
                  _val15 = iprot.ReadString();
                  ExtraMap[_key14] = _val15;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Interflow = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Tls = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimParam");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Timestamp != null && __isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Version);
        oprot.WriteFieldEnd();
      }
      if (Lang != null && __isset.lang) {
        field.Name = "lang";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Lang);
        oprot.WriteFieldEnd();
      }
      if (ExtraList != null && __isset.extraList) {
        field.Name = "extraList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExtraList.Count));
          foreach (TimNode _iter16 in ExtraList)
          {
            _iter16.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter17 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter17);
            oprot.WriteString(ExtraMap[_iter17]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Interflow != null && __isset.interflow) {
        field.Name = "interflow";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Interflow);
        oprot.WriteFieldEnd();
      }
      if (Tls != null && __isset.tls) {
        field.Name = "tls";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Tls);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimParam(");
    bool __first = true;
    if (Timestamp != null && __isset.timestamp) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Timestamp: ");
      __sb.Append(Timestamp);
    }
    if (__isset.version) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Version: ");
      __sb.Append(Version);
    }
    if (Lang != null && __isset.lang) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Lang: ");
      __sb.Append(Lang);
    }
    if (ExtraList != null && __isset.extraList) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraList: ");
      __sb.Append(ExtraList);
    }
    if (ExtraMap != null && __isset.extraMap) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    if (Interflow != null && __isset.interflow) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Interflow: ");
      __sb.Append(Interflow);
    }
    if (Tls != null && __isset.tls) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Tls: ");
      __sb.Append(Tls);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

