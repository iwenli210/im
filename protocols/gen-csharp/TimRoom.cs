/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimRoom : TBase
{
  private Tid _tid;
  private Tid _founderTid;
  private List<Tid> _HostsTid;
  private List<Tid> _membersTid;
  private string _headurl;
  private string _roomName;
  private string _desc;
  private TimTime _createTime;
  private List<TimNode> _extraList;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 房间Tid
  /// </summary>
  public Tid Tid
  {
    get
    {
      return _tid;
    }
    set
    {
      __isset.tid = true;
      this._tid = value;
    }
  }

  /// <summary>
  /// 创建人Tid
  /// </summary>
  public Tid FounderTid
  {
    get
    {
      return _founderTid;
    }
    set
    {
      __isset.founderTid = true;
      this._founderTid = value;
    }
  }

  /// <summary>
  /// 主持人Tid
  /// </summary>
  public List<Tid> HostsTid
  {
    get
    {
      return _HostsTid;
    }
    set
    {
      __isset.HostsTid = true;
      this._HostsTid = value;
    }
  }

  /// <summary>
  /// memberTid
  /// </summary>
  public List<Tid> MembersTid
  {
    get
    {
      return _membersTid;
    }
    set
    {
      __isset.membersTid = true;
      this._membersTid = value;
    }
  }

  /// <summary>
  /// 头像地址 http://xxx.jpg
  /// </summary>
  public string Headurl
  {
    get
    {
      return _headurl;
    }
    set
    {
      __isset.headurl = true;
      this._headurl = value;
    }
  }

  /// <summary>
  /// 房间名称
  /// </summary>
  public string RoomName
  {
    get
    {
      return _roomName;
    }
    set
    {
      __isset.roomName = true;
      this._roomName = value;
    }
  }

  /// <summary>
  /// 房间说明
  /// </summary>
  public string Desc
  {
    get
    {
      return _desc;
    }
    set
    {
      __isset.desc = true;
      this._desc = value;
    }
  }

  /// <summary>
  /// 房间创建时间
  /// </summary>
  public TimTime CreateTime
  {
    get
    {
      return _createTime;
    }
    set
    {
      __isset.createTime = true;
      this._createTime = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool tid;
    public bool founderTid;
    public bool HostsTid;
    public bool membersTid;
    public bool headurl;
    public bool roomName;
    public bool desc;
    public bool createTime;
    public bool extraList;
    public bool extraMap;
  }

  public TimRoom() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Tid = new Tid();
              Tid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              FounderTid = new Tid();
              FounderTid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                HostsTid = new List<Tid>();
                TList _list49 = iprot.ReadListBegin();
                for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                {
                  Tid _elem51;
                  _elem51 = new Tid();
                  _elem51.Read(iprot);
                  HostsTid.Add(_elem51);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                MembersTid = new List<Tid>();
                TList _list52 = iprot.ReadListBegin();
                for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                {
                  Tid _elem54;
                  _elem54 = new Tid();
                  _elem54.Read(iprot);
                  MembersTid.Add(_elem54);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Headurl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              RoomName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Desc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              CreateTime = new TimTime();
              CreateTime.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                ExtraList = new List<TimNode>();
                TList _list55 = iprot.ReadListBegin();
                for( int _i56 = 0; _i56 < _list55.Count; ++_i56)
                {
                  TimNode _elem57;
                  _elem57 = new TimNode();
                  _elem57.Read(iprot);
                  ExtraList.Add(_elem57);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map58 = iprot.ReadMapBegin();
                for( int _i59 = 0; _i59 < _map58.Count; ++_i59)
                {
                  string _key60;
                  string _val61;
                  _key60 = iprot.ReadString();
                  _val61 = iprot.ReadString();
                  ExtraMap[_key60] = _val61;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimRoom");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Tid != null && __isset.tid) {
        field.Name = "tid";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Tid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (FounderTid != null && __isset.founderTid) {
        field.Name = "founderTid";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        FounderTid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (HostsTid != null && __isset.HostsTid) {
        field.Name = "HostsTid";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, HostsTid.Count));
          foreach (Tid _iter62 in HostsTid)
          {
            _iter62.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MembersTid != null && __isset.membersTid) {
        field.Name = "membersTid";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MembersTid.Count));
          foreach (Tid _iter63 in MembersTid)
          {
            _iter63.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Headurl != null && __isset.headurl) {
        field.Name = "headurl";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Headurl);
        oprot.WriteFieldEnd();
      }
      if (RoomName != null && __isset.roomName) {
        field.Name = "roomName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RoomName);
        oprot.WriteFieldEnd();
      }
      if (Desc != null && __isset.desc) {
        field.Name = "desc";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Desc);
        oprot.WriteFieldEnd();
      }
      if (CreateTime != null && __isset.createTime) {
        field.Name = "createTime";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        CreateTime.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ExtraList != null && __isset.extraList) {
        field.Name = "extraList";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExtraList.Count));
          foreach (TimNode _iter64 in ExtraList)
          {
            _iter64.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter65 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter65);
            oprot.WriteString(ExtraMap[_iter65]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimRoom(");
    bool __first = true;
    if (Tid != null && __isset.tid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Tid: ");
      __sb.Append(Tid== null ? "<null>" : Tid.ToString());
    }
    if (FounderTid != null && __isset.founderTid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FounderTid: ");
      __sb.Append(FounderTid== null ? "<null>" : FounderTid.ToString());
    }
    if (HostsTid != null && __isset.HostsTid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HostsTid: ");
      __sb.Append(HostsTid);
    }
    if (MembersTid != null && __isset.membersTid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MembersTid: ");
      __sb.Append(MembersTid);
    }
    if (Headurl != null && __isset.headurl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Headurl: ");
      __sb.Append(Headurl);
    }
    if (RoomName != null && __isset.roomName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RoomName: ");
      __sb.Append(RoomName);
    }
    if (Desc != null && __isset.desc) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Desc: ");
      __sb.Append(Desc);
    }
    if (CreateTime != null && __isset.createTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreateTime: ");
      __sb.Append(CreateTime== null ? "<null>" : CreateTime.ToString());
    }
    if (ExtraList != null && __isset.extraList) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraList: ");
      __sb.Append(ExtraList);
    }
    if (ExtraMap != null && __isset.extraMap) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

