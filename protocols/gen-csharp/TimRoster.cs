/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimRoster : TBase
{
  private string _name;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// none表示用户和contact之前没有任何的关系（虽然在server的buddy list中存在）
  /// to表示用户能看到contact的presence，但是contact看不到用户的Presence
  /// from和to的含义相反，指用户看不到contact的presence，但是contact可以看到
  /// both表示相关之间都能看到对方的presence
  /// </summary>
  public string Subscription { get; set; }

  public Tid Tid { get; set; }

  /// <summary>
  /// 用户名
  /// </summary>
  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool name;
    public bool extraMap;
  }

  public TimRoster() {
  }

  public TimRoster(string subscription, Tid tid) : this() {
    this.Subscription = subscription;
    this.Tid = tid;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_subscription = false;
      bool isset_tid = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Subscription = iprot.ReadString();
              isset_subscription = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tid = new Tid();
              Tid.Read(iprot);
              isset_tid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map93 = iprot.ReadMapBegin();
                for( int _i94 = 0; _i94 < _map93.Count; ++_i94)
                {
                  string _key95;
                  string _val96;
                  _key95 = iprot.ReadString();
                  _val96 = iprot.ReadString();
                  ExtraMap[_key95] = _val96;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_subscription)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_tid)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimRoster");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "subscription";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Subscription);
      oprot.WriteFieldEnd();
      field.Name = "tid";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      Tid.Write(oprot);
      oprot.WriteFieldEnd();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter97 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter97);
            oprot.WriteString(ExtraMap[_iter97]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimRoster(");
    __sb.Append(", Subscription: ");
    __sb.Append(Subscription);
    __sb.Append(", Tid: ");
    __sb.Append(Tid== null ? "<null>" : Tid.ToString());
    if (Name != null && __isset.name) {
      __sb.Append(", Name: ");
      __sb.Append(Name);
    }
    if (ExtraMap != null && __isset.extraMap) {
      __sb.Append(", ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

