/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimSock5Bean : TBase
{
  private Dictionary<string, string> _extraMap;

  public Tid FromTid { get; set; }

  public Tid ToTid { get; set; }

  /// <summary>
  /// ip地址
  /// </summary>
  public string Addr { get; set; }

  /// <summary>
  /// 端口
  /// </summary>
  public int Port { get; set; }

  /// <summary>
  /// 传输类型  1:tcp 2:udp
  /// </summary>
  public short Transport { get; set; }

  /// <summary>
  /// 发布id 通过发布id 可以连接两个发布id相同的用户
  /// </summary>
  public string PubId { get; set; }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool extraMap;
  }

  public TimSock5Bean() {
  }

  public TimSock5Bean(Tid fromTid, Tid toTid, string addr, int port, short transport, string pubId) : this() {
    this.FromTid = fromTid;
    this.ToTid = toTid;
    this.Addr = addr;
    this.Port = port;
    this.Transport = transport;
    this.PubId = pubId;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_fromTid = false;
      bool isset_toTid = false;
      bool isset_addr = false;
      bool isset_port = false;
      bool isset_transport = false;
      bool isset_pubId = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              FromTid = new Tid();
              FromTid.Read(iprot);
              isset_fromTid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              ToTid = new Tid();
              ToTid.Read(iprot);
              isset_toTid = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Addr = iprot.ReadString();
              isset_addr = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Port = iprot.ReadI32();
              isset_port = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Transport = iprot.ReadI16();
              isset_transport = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              PubId = iprot.ReadString();
              isset_pubId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map117 = iprot.ReadMapBegin();
                for( int _i118 = 0; _i118 < _map117.Count; ++_i118)
                {
                  string _key119;
                  string _val120;
                  _key119 = iprot.ReadString();
                  _val120 = iprot.ReadString();
                  ExtraMap[_key119] = _val120;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_fromTid)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_toTid)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_addr)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_port)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_transport)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_pubId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimSock5Bean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "fromTid";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      FromTid.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "toTid";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      ToTid.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "addr";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Addr);
      oprot.WriteFieldEnd();
      field.Name = "port";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Port);
      oprot.WriteFieldEnd();
      field.Name = "transport";
      field.Type = TType.I16;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI16(Transport);
      oprot.WriteFieldEnd();
      field.Name = "pubId";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(PubId);
      oprot.WriteFieldEnd();
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter121 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter121);
            oprot.WriteString(ExtraMap[_iter121]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimSock5Bean(");
    __sb.Append(", FromTid: ");
    __sb.Append(FromTid== null ? "<null>" : FromTid.ToString());
    __sb.Append(", ToTid: ");
    __sb.Append(ToTid== null ? "<null>" : ToTid.ToString());
    __sb.Append(", Addr: ");
    __sb.Append(Addr);
    __sb.Append(", Port: ");
    __sb.Append(Port);
    __sb.Append(", Transport: ");
    __sb.Append(Transport);
    __sb.Append(", PubId: ");
    __sb.Append(PubId);
    if (ExtraMap != null && __isset.extraMap) {
      __sb.Append(", ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

