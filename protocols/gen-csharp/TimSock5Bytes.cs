/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimSock5Bytes : TBase
{
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 发布id
  /// </summary>
  public string PubId { get; set; }

  /// <summary>
  /// 序号数据块
  /// </summary>
  public int Index { get; set; }

  /// <summary>
  /// 数据块
  /// </summary>
  public List<byte[]> Bytes { get; set; }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool extraMap;
  }

  public TimSock5Bytes() {
  }

  public TimSock5Bytes(string pubId, int index, List<byte[]> bytes) : this() {
    this.PubId = pubId;
    this.Index = index;
    this.Bytes = bytes;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_pubId = false;
      bool isset_index = false;
      bool isset_bytes = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              PubId = iprot.ReadString();
              isset_pubId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Index = iprot.ReadI32();
              isset_index = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Bytes = new List<byte[]>();
                TList _list122 = iprot.ReadListBegin();
                for( int _i123 = 0; _i123 < _list122.Count; ++_i123)
                {
                  byte[] _elem124;
                  _elem124 = iprot.ReadBinary();
                  Bytes.Add(_elem124);
                }
                iprot.ReadListEnd();
              }
              isset_bytes = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map125 = iprot.ReadMapBegin();
                for( int _i126 = 0; _i126 < _map125.Count; ++_i126)
                {
                  string _key127;
                  string _val128;
                  _key127 = iprot.ReadString();
                  _val128 = iprot.ReadString();
                  ExtraMap[_key127] = _val128;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_pubId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_index)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_bytes)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimSock5Bytes");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "pubId";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(PubId);
      oprot.WriteFieldEnd();
      field.Name = "index";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Index);
      oprot.WriteFieldEnd();
      field.Name = "bytes";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, Bytes.Count));
        foreach (byte[] _iter129 in Bytes)
        {
          oprot.WriteBinary(_iter129);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter130 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter130);
            oprot.WriteString(ExtraMap[_iter130]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimSock5Bytes(");
    __sb.Append(", PubId: ");
    __sb.Append(PubId);
    __sb.Append(", Index: ");
    __sb.Append(Index);
    __sb.Append(", Bytes: ");
    __sb.Append(Bytes);
    if (ExtraMap != null && __isset.extraMap) {
      __sb.Append(", ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

