/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TimUserBean : TBase
{
  private Tid _tid;
  private string _nickname;
  private string _remarkname;
  private string _brithday;
  private short _gender;
  private string _headurl;
  private TimArea _area;
  private byte[] _headbyte;
  private List<byte[]> _photoBytes;
  private List<TimNode> _extraList;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 用户bean
  /// </summary>
  public Tid Tid
  {
    get
    {
      return _tid;
    }
    set
    {
      __isset.tid = true;
      this._tid = value;
    }
  }

  /// <summary>
  /// 昵称
  /// </summary>
  public string Nickname
  {
    get
    {
      return _nickname;
    }
    set
    {
      __isset.nickname = true;
      this._nickname = value;
    }
  }

  /// <summary>
  /// 备注名称
  /// </summary>
  public string Remarkname
  {
    get
    {
      return _remarkname;
    }
    set
    {
      __isset.remarkname = true;
      this._remarkname = value;
    }
  }

  /// <summary>
  /// 生日     2000-01-01
  /// </summary>
  public string Brithday
  {
    get
    {
      return _brithday;
    }
    set
    {
      __isset.brithday = true;
      this._brithday = value;
    }
  }

  /// <summary>
  /// 性别  自行约定 如 ：  0不知，1男，2女
  /// </summary>
  public short Gender
  {
    get
    {
      return _gender;
    }
    set
    {
      __isset.gender = true;
      this._gender = value;
    }
  }

  /// <summary>
  /// 头像地址 http://xxx.jpg
  /// </summary>
  public string Headurl
  {
    get
    {
      return _headurl;
    }
    set
    {
      __isset.headurl = true;
      this._headurl = value;
    }
  }

  /// <summary>
  /// 地区
  /// </summary>
  public TimArea Area
  {
    get
    {
      return _area;
    }
    set
    {
      __isset.area = true;
      this._area = value;
    }
  }

  /// <summary>
  /// 头像
  /// </summary>
  public byte[] Headbyte
  {
    get
    {
      return _headbyte;
    }
    set
    {
      __isset.headbyte = true;
      this._headbyte = value;
    }
  }

  /// <summary>
  /// 其他图片
  /// </summary>
  public List<byte[]> PhotoBytes
  {
    get
    {
      return _photoBytes;
    }
    set
    {
      __isset.photoBytes = true;
      this._photoBytes = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool tid;
    public bool nickname;
    public bool remarkname;
    public bool brithday;
    public bool gender;
    public bool headurl;
    public bool area;
    public bool headbyte;
    public bool photoBytes;
    public bool extraList;
    public bool extraMap;
  }

  public TimUserBean() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Tid = new Tid();
              Tid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Nickname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Remarkname = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Brithday = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Gender = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Headurl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              Area = new TimArea();
              Area.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Headbyte = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                PhotoBytes = new List<byte[]>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  byte[] _elem38;
                  _elem38 = iprot.ReadBinary();
                  PhotoBytes.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                ExtraList = new List<TimNode>();
                TList _list39 = iprot.ReadListBegin();
                for( int _i40 = 0; _i40 < _list39.Count; ++_i40)
                {
                  TimNode _elem41;
                  _elem41 = new TimNode();
                  _elem41.Read(iprot);
                  ExtraList.Add(_elem41);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Map) {
              {
                ExtraMap = new Dictionary<string, string>();
                TMap _map42 = iprot.ReadMapBegin();
                for( int _i43 = 0; _i43 < _map42.Count; ++_i43)
                {
                  string _key44;
                  string _val45;
                  _key44 = iprot.ReadString();
                  _val45 = iprot.ReadString();
                  ExtraMap[_key44] = _val45;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TimUserBean");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Tid != null && __isset.tid) {
        field.Name = "tid";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Tid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Nickname != null && __isset.nickname) {
        field.Name = "nickname";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Nickname);
        oprot.WriteFieldEnd();
      }
      if (Remarkname != null && __isset.remarkname) {
        field.Name = "remarkname";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Remarkname);
        oprot.WriteFieldEnd();
      }
      if (Brithday != null && __isset.brithday) {
        field.Name = "brithday";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Brithday);
        oprot.WriteFieldEnd();
      }
      if (__isset.gender) {
        field.Name = "gender";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Gender);
        oprot.WriteFieldEnd();
      }
      if (Headurl != null && __isset.headurl) {
        field.Name = "headurl";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Headurl);
        oprot.WriteFieldEnd();
      }
      if (Area != null && __isset.area) {
        field.Name = "area";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        Area.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Headbyte != null && __isset.headbyte) {
        field.Name = "headbyte";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Headbyte);
        oprot.WriteFieldEnd();
      }
      if (PhotoBytes != null && __isset.photoBytes) {
        field.Name = "photoBytes";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, PhotoBytes.Count));
          foreach (byte[] _iter46 in PhotoBytes)
          {
            oprot.WriteBinary(_iter46);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExtraList != null && __isset.extraList) {
        field.Name = "extraList";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExtraList.Count));
          foreach (TimNode _iter47 in ExtraList)
          {
            _iter47.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExtraMap != null && __isset.extraMap) {
        field.Name = "extraMap";
        field.Type = TType.Map;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraMap.Count));
          foreach (string _iter48 in ExtraMap.Keys)
          {
            oprot.WriteString(_iter48);
            oprot.WriteString(ExtraMap[_iter48]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TimUserBean(");
    bool __first = true;
    if (Tid != null && __isset.tid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Tid: ");
      __sb.Append(Tid== null ? "<null>" : Tid.ToString());
    }
    if (Nickname != null && __isset.nickname) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Nickname: ");
      __sb.Append(Nickname);
    }
    if (Remarkname != null && __isset.remarkname) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Remarkname: ");
      __sb.Append(Remarkname);
    }
    if (Brithday != null && __isset.brithday) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Brithday: ");
      __sb.Append(Brithday);
    }
    if (__isset.gender) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Gender: ");
      __sb.Append(Gender);
    }
    if (Headurl != null && __isset.headurl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Headurl: ");
      __sb.Append(Headurl);
    }
    if (Area != null && __isset.area) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Area: ");
      __sb.Append(Area== null ? "<null>" : Area.ToString());
    }
    if (Headbyte != null && __isset.headbyte) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Headbyte: ");
      __sb.Append(Headbyte);
    }
    if (PhotoBytes != null && __isset.photoBytes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PhotoBytes: ");
      __sb.Append(PhotoBytes);
    }
    if (ExtraList != null && __isset.extraList) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraList: ");
      __sb.Append(ExtraList);
    }
    if (ExtraMap != null && __isset.extraMap) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraMap: ");
      __sb.Append(ExtraMap);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

