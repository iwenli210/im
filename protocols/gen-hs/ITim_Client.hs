{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.3)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module ITim_Client(timStream,timStarttls,timLogin,timAck,timPresence,timMessage,timPing,timError,timLogout,timRegist,timRoser,timMessageList,timPresenceList,timMessageIq,timMessageResult,timProperty,timRemoteUserAuth,timRemoteUserGet,timRemoteUserEdit,timResponsePresence,timResponseMessage,timResponseMessageIq,timResponsePresenceList,timResponseMessageList) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Tim_Types
import ITim
seqid = R.newIORef 0
timStream (ip,op) arg_param = do
  send_timStream op arg_param
send_timStream op arg_param = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timStream", T.M_ONEWAY, seqn)
  write_TimStream_args op (TimStream_args{timStream_args_param=arg_param})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timStarttls (ip,op) = do
  send_timStarttls op
send_timStarttls op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timStarttls", T.M_ONEWAY, seqn)
  write_TimStarttls_args op (TimStarttls_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timLogin (ip,op) arg_tid arg_pwd = do
  send_timLogin op arg_tid arg_pwd
send_timLogin op arg_tid arg_pwd = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timLogin", T.M_ONEWAY, seqn)
  write_TimLogin_args op (TimLogin_args{timLogin_args_tid=arg_tid,timLogin_args_pwd=arg_pwd})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timAck (ip,op) arg_ab = do
  send_timAck op arg_ab
send_timAck op arg_ab = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timAck", T.M_ONEWAY, seqn)
  write_TimAck_args op (TimAck_args{timAck_args_ab=arg_ab})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timPresence (ip,op) arg_pbean = do
  send_timPresence op arg_pbean
send_timPresence op arg_pbean = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timPresence", T.M_ONEWAY, seqn)
  write_TimPresence_args op (TimPresence_args{timPresence_args_pbean=arg_pbean})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timMessage (ip,op) arg_mbean = do
  send_timMessage op arg_mbean
send_timMessage op arg_mbean = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timMessage", T.M_ONEWAY, seqn)
  write_TimMessage_args op (TimMessage_args{timMessage_args_mbean=arg_mbean})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timPing (ip,op) arg_threadId = do
  send_timPing op arg_threadId
send_timPing op arg_threadId = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timPing", T.M_ONEWAY, seqn)
  write_TimPing_args op (TimPing_args{timPing_args_threadId=arg_threadId})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timError (ip,op) arg_e = do
  send_timError op arg_e
send_timError op arg_e = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timError", T.M_ONEWAY, seqn)
  write_TimError_args op (TimError_args{timError_args_e=arg_e})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timLogout (ip,op) = do
  send_timLogout op
send_timLogout op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timLogout", T.M_ONEWAY, seqn)
  write_TimLogout_args op (TimLogout_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timRegist (ip,op) arg_tid arg_auth = do
  send_timRegist op arg_tid arg_auth
send_timRegist op arg_tid arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timRegist", T.M_ONEWAY, seqn)
  write_TimRegist_args op (TimRegist_args{timRegist_args_tid=arg_tid,timRegist_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timRoser (ip,op) arg_roster = do
  send_timRoser op arg_roster
send_timRoser op arg_roster = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timRoser", T.M_ONEWAY, seqn)
  write_TimRoser_args op (TimRoser_args{timRoser_args_roster=arg_roster})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timMessageList (ip,op) arg_mbeanList = do
  send_timMessageList op arg_mbeanList
send_timMessageList op arg_mbeanList = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timMessageList", T.M_ONEWAY, seqn)
  write_TimMessageList_args op (TimMessageList_args{timMessageList_args_mbeanList=arg_mbeanList})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timPresenceList (ip,op) arg_pbeanList = do
  send_timPresenceList op arg_pbeanList
send_timPresenceList op arg_pbeanList = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timPresenceList", T.M_ONEWAY, seqn)
  write_TimPresenceList_args op (TimPresenceList_args{timPresenceList_args_pbeanList=arg_pbeanList})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timMessageIq (ip,op) arg_timMsgIq arg_iqType = do
  send_timMessageIq op arg_timMsgIq arg_iqType
send_timMessageIq op arg_timMsgIq arg_iqType = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timMessageIq", T.M_ONEWAY, seqn)
  write_TimMessageIq_args op (TimMessageIq_args{timMessageIq_args_timMsgIq=arg_timMsgIq,timMessageIq_args_iqType=arg_iqType})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timMessageResult (ip,op) arg_mbean = do
  send_timMessageResult op arg_mbean
send_timMessageResult op arg_mbean = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timMessageResult", T.M_ONEWAY, seqn)
  write_TimMessageResult_args op (TimMessageResult_args{timMessageResult_args_mbean=arg_mbean})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timProperty (ip,op) arg_tpb = do
  send_timProperty op arg_tpb
send_timProperty op arg_tpb = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timProperty", T.M_ONEWAY, seqn)
  write_TimProperty_args op (TimProperty_args{timProperty_args_tpb=arg_tpb})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
timRemoteUserAuth (ip,op) arg_tid arg_pwd arg_auth = do
  send_timRemoteUserAuth op arg_tid arg_pwd arg_auth
  recv_timRemoteUserAuth ip
send_timRemoteUserAuth op arg_tid arg_pwd arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timRemoteUserAuth", T.M_CALL, seqn)
  write_TimRemoteUserAuth_args op (TimRemoteUserAuth_args{timRemoteUserAuth_args_tid=arg_tid,timRemoteUserAuth_args_pwd=arg_pwd,timRemoteUserAuth_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timRemoteUserAuth ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_TimRemoteUserAuth_result ip
  T.readMessageEnd ip
  P.return $ timRemoteUserAuth_result_success res
timRemoteUserGet (ip,op) arg_tid arg_auth = do
  send_timRemoteUserGet op arg_tid arg_auth
  recv_timRemoteUserGet ip
send_timRemoteUserGet op arg_tid arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timRemoteUserGet", T.M_CALL, seqn)
  write_TimRemoteUserGet_args op (TimRemoteUserGet_args{timRemoteUserGet_args_tid=arg_tid,timRemoteUserGet_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timRemoteUserGet ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_TimRemoteUserGet_result ip
  T.readMessageEnd ip
  P.return $ timRemoteUserGet_result_success res
timRemoteUserEdit (ip,op) arg_tid arg_ub arg_auth = do
  send_timRemoteUserEdit op arg_tid arg_ub arg_auth
  recv_timRemoteUserEdit ip
send_timRemoteUserEdit op arg_tid arg_ub arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timRemoteUserEdit", T.M_CALL, seqn)
  write_TimRemoteUserEdit_args op (TimRemoteUserEdit_args{timRemoteUserEdit_args_tid=arg_tid,timRemoteUserEdit_args_ub=arg_ub,timRemoteUserEdit_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timRemoteUserEdit ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_TimRemoteUserEdit_result ip
  T.readMessageEnd ip
  P.return $ timRemoteUserEdit_result_success res
timResponsePresence (ip,op) arg_pbean arg_auth = do
  send_timResponsePresence op arg_pbean arg_auth
  recv_timResponsePresence ip
send_timResponsePresence op arg_pbean arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timResponsePresence", T.M_CALL, seqn)
  write_TimResponsePresence_args op (TimResponsePresence_args{timResponsePresence_args_pbean=arg_pbean,timResponsePresence_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timResponsePresence ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_TimResponsePresence_result ip
  T.readMessageEnd ip
  P.return $ timResponsePresence_result_success res
timResponseMessage (ip,op) arg_mbean arg_auth = do
  send_timResponseMessage op arg_mbean arg_auth
  recv_timResponseMessage ip
send_timResponseMessage op arg_mbean arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timResponseMessage", T.M_CALL, seqn)
  write_TimResponseMessage_args op (TimResponseMessage_args{timResponseMessage_args_mbean=arg_mbean,timResponseMessage_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timResponseMessage ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_TimResponseMessage_result ip
  T.readMessageEnd ip
  P.return $ timResponseMessage_result_success res
timResponseMessageIq (ip,op) arg_timMsgIq arg_iqType arg_auth = do
  send_timResponseMessageIq op arg_timMsgIq arg_iqType arg_auth
  recv_timResponseMessageIq ip
send_timResponseMessageIq op arg_timMsgIq arg_iqType arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timResponseMessageIq", T.M_CALL, seqn)
  write_TimResponseMessageIq_args op (TimResponseMessageIq_args{timResponseMessageIq_args_timMsgIq=arg_timMsgIq,timResponseMessageIq_args_iqType=arg_iqType,timResponseMessageIq_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timResponseMessageIq ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_TimResponseMessageIq_result ip
  T.readMessageEnd ip
  P.return $ timResponseMessageIq_result_success res
timResponsePresenceList (ip,op) arg_pbeanList arg_auth = do
  send_timResponsePresenceList op arg_pbeanList arg_auth
  recv_timResponsePresenceList ip
send_timResponsePresenceList op arg_pbeanList arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timResponsePresenceList", T.M_CALL, seqn)
  write_TimResponsePresenceList_args op (TimResponsePresenceList_args{timResponsePresenceList_args_pbeanList=arg_pbeanList,timResponsePresenceList_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timResponsePresenceList ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_TimResponsePresenceList_result ip
  T.readMessageEnd ip
  P.return $ timResponsePresenceList_result_success res
timResponseMessageList (ip,op) arg_mbeanList arg_auth = do
  send_timResponseMessageList op arg_mbeanList arg_auth
  recv_timResponseMessageList ip
send_timResponseMessageList op arg_mbeanList arg_auth = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("timResponseMessageList", T.M_CALL, seqn)
  write_TimResponseMessageList_args op (TimResponseMessageList_args{timResponseMessageList_args_mbeanList=arg_mbeanList,timResponseMessageList_args_auth=arg_auth})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_timResponseMessageList ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_TimResponseMessageList_result ip
  T.readMessageEnd ip
  P.return $ timResponseMessageList_result_success res
