//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ITim_timStream_args = function(args) {
  this.param = null;
  if (args) {
    if (args.param !== undefined && args.param !== null) {
      this.param = new TimParam(args.param);
    }
  }
};
ITim_timStream_args.prototype = {};
ITim_timStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new TimParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timStream_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timStream_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timStream_result = function(args) {
};
ITim_timStream_result.prototype = {};
ITim_timStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timStream_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timStream_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timStarttls_args = function(args) {
};
ITim_timStarttls_args.prototype = {};
ITim_timStarttls_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timStarttls_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timStarttls_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timStarttls_result = function(args) {
};
ITim_timStarttls_result.prototype = {};
ITim_timStarttls_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timStarttls_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timStarttls_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timLogin_args = function(args) {
  this.tid = null;
  this.pwd = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
  }
};
ITim_timLogin_args.prototype = {};
ITim_timLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timLogin_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timLogin_args');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 2);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timLogin_result = function(args) {
};
ITim_timLogin_result.prototype = {};
ITim_timLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timLogin_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timLogin_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timAck_args = function(args) {
  this.ab = null;
  if (args) {
    if (args.ab !== undefined && args.ab !== null) {
      this.ab = new TimAckBean(args.ab);
    }
  }
};
ITim_timAck_args.prototype = {};
ITim_timAck_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ab = new TimAckBean();
        this.ab.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timAck_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timAck_args');
  if (this.ab !== null && this.ab !== undefined) {
    output.writeFieldBegin('ab', Thrift.Type.STRUCT, 1);
    this.ab.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timAck_result = function(args) {
};
ITim_timAck_result.prototype = {};
ITim_timAck_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timAck_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timAck_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timPresence_args = function(args) {
  this.pbean = null;
  if (args) {
    if (args.pbean !== undefined && args.pbean !== null) {
      this.pbean = new TimPBean(args.pbean);
    }
  }
};
ITim_timPresence_args.prototype = {};
ITim_timPresence_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pbean = new TimPBean();
        this.pbean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timPresence_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timPresence_args');
  if (this.pbean !== null && this.pbean !== undefined) {
    output.writeFieldBegin('pbean', Thrift.Type.STRUCT, 1);
    this.pbean.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timPresence_result = function(args) {
};
ITim_timPresence_result.prototype = {};
ITim_timPresence_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timPresence_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timPresence_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timMessage_args = function(args) {
  this.mbean = null;
  if (args) {
    if (args.mbean !== undefined && args.mbean !== null) {
      this.mbean = new TimMBean(args.mbean);
    }
  }
};
ITim_timMessage_args.prototype = {};
ITim_timMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mbean = new TimMBean();
        this.mbean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timMessage_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timMessage_args');
  if (this.mbean !== null && this.mbean !== undefined) {
    output.writeFieldBegin('mbean', Thrift.Type.STRUCT, 1);
    this.mbean.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timMessage_result = function(args) {
};
ITim_timMessage_result.prototype = {};
ITim_timMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timMessage_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timMessage_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timPing_args = function(args) {
  this.threadId = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    }
  }
};
ITim_timPing_args.prototype = {};
ITim_timPing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timPing_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timPing_args');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timPing_result = function(args) {
};
ITim_timPing_result.prototype = {};
ITim_timPing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timPing_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timPing_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timError_args = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = new TimError(args.e);
    }
  }
};
ITim_timError_args.prototype = {};
ITim_timError_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TimError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timError_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timError_args');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timError_result = function(args) {
};
ITim_timError_result.prototype = {};
ITim_timError_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timError_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timError_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timLogout_args = function(args) {
};
ITim_timLogout_args.prototype = {};
ITim_timLogout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timLogout_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timLogout_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timLogout_result = function(args) {
};
ITim_timLogout_result.prototype = {};
ITim_timLogout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timLogout_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timLogout_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRegist_args = function(args) {
  this.tid = null;
  this.auth = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = args.auth;
    }
  }
};
ITim_timRegist_args.prototype = {};
ITim_timRegist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.auth = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRegist_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRegist_args');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRING, 2);
    output.writeString(this.auth);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRegist_result = function(args) {
};
ITim_timRegist_result.prototype = {};
ITim_timRegist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRegist_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRegist_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRoser_args = function(args) {
  this.roster = null;
  if (args) {
    if (args.roster !== undefined && args.roster !== null) {
      this.roster = new TimRoster(args.roster);
    }
  }
};
ITim_timRoser_args.prototype = {};
ITim_timRoser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.roster = new TimRoster();
        this.roster.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRoser_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRoser_args');
  if (this.roster !== null && this.roster !== undefined) {
    output.writeFieldBegin('roster', Thrift.Type.STRUCT, 1);
    this.roster.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRoser_result = function(args) {
};
ITim_timRoser_result.prototype = {};
ITim_timRoser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRoser_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRoser_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timMessageList_args = function(args) {
  this.mbeanList = null;
  if (args) {
    if (args.mbeanList !== undefined && args.mbeanList !== null) {
      this.mbeanList = new TimMBeanList(args.mbeanList);
    }
  }
};
ITim_timMessageList_args.prototype = {};
ITim_timMessageList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mbeanList = new TimMBeanList();
        this.mbeanList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timMessageList_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timMessageList_args');
  if (this.mbeanList !== null && this.mbeanList !== undefined) {
    output.writeFieldBegin('mbeanList', Thrift.Type.STRUCT, 1);
    this.mbeanList.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timMessageList_result = function(args) {
};
ITim_timMessageList_result.prototype = {};
ITim_timMessageList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timMessageList_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timMessageList_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timPresenceList_args = function(args) {
  this.pbeanList = null;
  if (args) {
    if (args.pbeanList !== undefined && args.pbeanList !== null) {
      this.pbeanList = new TimPBeanList(args.pbeanList);
    }
  }
};
ITim_timPresenceList_args.prototype = {};
ITim_timPresenceList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pbeanList = new TimPBeanList();
        this.pbeanList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timPresenceList_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timPresenceList_args');
  if (this.pbeanList !== null && this.pbeanList !== undefined) {
    output.writeFieldBegin('pbeanList', Thrift.Type.STRUCT, 1);
    this.pbeanList.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timPresenceList_result = function(args) {
};
ITim_timPresenceList_result.prototype = {};
ITim_timPresenceList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timPresenceList_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timPresenceList_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timMessageIq_args = function(args) {
  this.timMsgIq = null;
  this.iqType = null;
  if (args) {
    if (args.timMsgIq !== undefined && args.timMsgIq !== null) {
      this.timMsgIq = new TimMessageIq(args.timMsgIq);
    }
    if (args.iqType !== undefined && args.iqType !== null) {
      this.iqType = args.iqType;
    }
  }
};
ITim_timMessageIq_args.prototype = {};
ITim_timMessageIq_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.timMsgIq = new TimMessageIq();
        this.timMsgIq.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.iqType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timMessageIq_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timMessageIq_args');
  if (this.timMsgIq !== null && this.timMsgIq !== undefined) {
    output.writeFieldBegin('timMsgIq', Thrift.Type.STRUCT, 1);
    this.timMsgIq.write(output);
    output.writeFieldEnd();
  }
  if (this.iqType !== null && this.iqType !== undefined) {
    output.writeFieldBegin('iqType', Thrift.Type.STRING, 2);
    output.writeString(this.iqType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timMessageIq_result = function(args) {
};
ITim_timMessageIq_result.prototype = {};
ITim_timMessageIq_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timMessageIq_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timMessageIq_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timMessageResult_args = function(args) {
  this.mbean = null;
  if (args) {
    if (args.mbean !== undefined && args.mbean !== null) {
      this.mbean = new TimMBean(args.mbean);
    }
  }
};
ITim_timMessageResult_args.prototype = {};
ITim_timMessageResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mbean = new TimMBean();
        this.mbean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timMessageResult_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timMessageResult_args');
  if (this.mbean !== null && this.mbean !== undefined) {
    output.writeFieldBegin('mbean', Thrift.Type.STRUCT, 1);
    this.mbean.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timMessageResult_result = function(args) {
};
ITim_timMessageResult_result.prototype = {};
ITim_timMessageResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timMessageResult_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timMessageResult_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timProperty_args = function(args) {
  this.tpb = null;
  if (args) {
    if (args.tpb !== undefined && args.tpb !== null) {
      this.tpb = new TimPropertyBean(args.tpb);
    }
  }
};
ITim_timProperty_args.prototype = {};
ITim_timProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tpb = new TimPropertyBean();
        this.tpb.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timProperty_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timProperty_args');
  if (this.tpb !== null && this.tpb !== undefined) {
    output.writeFieldBegin('tpb', Thrift.Type.STRUCT, 1);
    this.tpb.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timProperty_result = function(args) {
};
ITim_timProperty_result.prototype = {};
ITim_timProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timProperty_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timProperty_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRemoteUserAuth_args = function(args) {
  this.tid = null;
  this.pwd = null;
  this.auth = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new TimAuth(args.auth);
    }
  }
};
ITim_timRemoteUserAuth_args.prototype = {};
ITim_timRemoteUserAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new TimAuth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRemoteUserAuth_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRemoteUserAuth_args');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 2);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 3);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRemoteUserAuth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TimRemoteUserBean(args.success);
    }
  }
};
ITim_timRemoteUserAuth_result.prototype = {};
ITim_timRemoteUserAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimRemoteUserBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRemoteUserAuth_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRemoteUserAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRemoteUserGet_args = function(args) {
  this.tid = null;
  this.auth = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new TimAuth(args.auth);
    }
  }
};
ITim_timRemoteUserGet_args.prototype = {};
ITim_timRemoteUserGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new TimAuth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRemoteUserGet_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRemoteUserGet_args');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 2);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRemoteUserGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TimRemoteUserBean(args.success);
    }
  }
};
ITim_timRemoteUserGet_result.prototype = {};
ITim_timRemoteUserGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimRemoteUserBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRemoteUserGet_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRemoteUserGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRemoteUserEdit_args = function(args) {
  this.tid = null;
  this.ub = null;
  this.auth = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.ub !== undefined && args.ub !== null) {
      this.ub = new TimUserBean(args.ub);
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new TimAuth(args.auth);
    }
  }
};
ITim_timRemoteUserEdit_args.prototype = {};
ITim_timRemoteUserEdit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ub = new TimUserBean();
        this.ub.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new TimAuth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRemoteUserEdit_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRemoteUserEdit_args');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.ub !== null && this.ub !== undefined) {
    output.writeFieldBegin('ub', Thrift.Type.STRUCT, 2);
    this.ub.write(output);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 3);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timRemoteUserEdit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TimRemoteUserBean(args.success);
    }
  }
};
ITim_timRemoteUserEdit_result.prototype = {};
ITim_timRemoteUserEdit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimRemoteUserBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timRemoteUserEdit_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timRemoteUserEdit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponsePresence_args = function(args) {
  this.pbean = null;
  this.auth = null;
  if (args) {
    if (args.pbean !== undefined && args.pbean !== null) {
      this.pbean = new TimPBean(args.pbean);
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new TimAuth(args.auth);
    }
  }
};
ITim_timResponsePresence_args.prototype = {};
ITim_timResponsePresence_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pbean = new TimPBean();
        this.pbean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new TimAuth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponsePresence_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponsePresence_args');
  if (this.pbean !== null && this.pbean !== undefined) {
    output.writeFieldBegin('pbean', Thrift.Type.STRUCT, 1);
    this.pbean.write(output);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 2);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponsePresence_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TimResponseBean(args.success);
    }
  }
};
ITim_timResponsePresence_result.prototype = {};
ITim_timResponsePresence_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimResponseBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponsePresence_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponsePresence_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponseMessage_args = function(args) {
  this.mbean = null;
  this.auth = null;
  if (args) {
    if (args.mbean !== undefined && args.mbean !== null) {
      this.mbean = new TimMBean(args.mbean);
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new TimAuth(args.auth);
    }
  }
};
ITim_timResponseMessage_args.prototype = {};
ITim_timResponseMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mbean = new TimMBean();
        this.mbean.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new TimAuth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponseMessage_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponseMessage_args');
  if (this.mbean !== null && this.mbean !== undefined) {
    output.writeFieldBegin('mbean', Thrift.Type.STRUCT, 1);
    this.mbean.write(output);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 2);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponseMessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TimResponseBean(args.success);
    }
  }
};
ITim_timResponseMessage_result.prototype = {};
ITim_timResponseMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimResponseBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponseMessage_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponseMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponseMessageIq_args = function(args) {
  this.timMsgIq = null;
  this.iqType = null;
  this.auth = null;
  if (args) {
    if (args.timMsgIq !== undefined && args.timMsgIq !== null) {
      this.timMsgIq = new TimMessageIq(args.timMsgIq);
    }
    if (args.iqType !== undefined && args.iqType !== null) {
      this.iqType = args.iqType;
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new TimAuth(args.auth);
    }
  }
};
ITim_timResponseMessageIq_args.prototype = {};
ITim_timResponseMessageIq_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.timMsgIq = new TimMessageIq();
        this.timMsgIq.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.iqType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new TimAuth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponseMessageIq_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponseMessageIq_args');
  if (this.timMsgIq !== null && this.timMsgIq !== undefined) {
    output.writeFieldBegin('timMsgIq', Thrift.Type.STRUCT, 1);
    this.timMsgIq.write(output);
    output.writeFieldEnd();
  }
  if (this.iqType !== null && this.iqType !== undefined) {
    output.writeFieldBegin('iqType', Thrift.Type.STRING, 2);
    output.writeString(this.iqType);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 3);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponseMessageIq_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TimMBeanList(args.success);
    }
  }
};
ITim_timResponseMessageIq_result.prototype = {};
ITim_timResponseMessageIq_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimMBeanList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponseMessageIq_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponseMessageIq_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponsePresenceList_args = function(args) {
  this.pbeanList = null;
  this.auth = null;
  if (args) {
    if (args.pbeanList !== undefined && args.pbeanList !== null) {
      this.pbeanList = new TimPBeanList(args.pbeanList);
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new TimAuth(args.auth);
    }
  }
};
ITim_timResponsePresenceList_args.prototype = {};
ITim_timResponsePresenceList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pbeanList = new TimPBeanList();
        this.pbeanList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new TimAuth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponsePresenceList_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponsePresenceList_args');
  if (this.pbeanList !== null && this.pbeanList !== undefined) {
    output.writeFieldBegin('pbeanList', Thrift.Type.STRUCT, 1);
    this.pbeanList.write(output);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 2);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponsePresenceList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TimResponseBean(args.success);
    }
  }
};
ITim_timResponsePresenceList_result.prototype = {};
ITim_timResponsePresenceList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimResponseBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponsePresenceList_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponsePresenceList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponseMessageList_args = function(args) {
  this.mbeanList = null;
  this.auth = null;
  if (args) {
    if (args.mbeanList !== undefined && args.mbeanList !== null) {
      this.mbeanList = new TimMBeanList(args.mbeanList);
    }
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new TimAuth(args.auth);
    }
  }
};
ITim_timResponseMessageList_args.prototype = {};
ITim_timResponseMessageList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mbeanList = new TimMBeanList();
        this.mbeanList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new TimAuth();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponseMessageList_args.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponseMessageList_args');
  if (this.mbeanList !== null && this.mbeanList !== undefined) {
    output.writeFieldBegin('mbeanList', Thrift.Type.STRUCT, 1);
    this.mbeanList.write(output);
    output.writeFieldEnd();
  }
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 2);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITim_timResponseMessageList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TimResponseBean(args.success);
    }
  }
};
ITim_timResponseMessageList_result.prototype = {};
ITim_timResponseMessageList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TimResponseBean();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ITim_timResponseMessageList_result.prototype.write = function(output) {
  output.writeStructBegin('ITim_timResponseMessageList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ITimClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ITimClient.prototype = {};
ITimClient.prototype.timStream = function(param, callback) {
  this.send_timStream(param, callback); 
};

ITimClient.prototype.send_timStream = function(param, callback) {
  this.output.writeMessageBegin('timStream', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timStream_args();
  args.param = param;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timStream();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timStarttls = function(callback) {
  this.send_timStarttls(callback); 
};

ITimClient.prototype.send_timStarttls = function(callback) {
  this.output.writeMessageBegin('timStarttls', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timStarttls_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timStarttls();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timLogin = function(tid, pwd, callback) {
  this.send_timLogin(tid, pwd, callback); 
};

ITimClient.prototype.send_timLogin = function(tid, pwd, callback) {
  this.output.writeMessageBegin('timLogin', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timLogin_args();
  args.tid = tid;
  args.pwd = pwd;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timLogin();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timAck = function(ab, callback) {
  this.send_timAck(ab, callback); 
};

ITimClient.prototype.send_timAck = function(ab, callback) {
  this.output.writeMessageBegin('timAck', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timAck_args();
  args.ab = ab;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timAck();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timPresence = function(pbean, callback) {
  this.send_timPresence(pbean, callback); 
};

ITimClient.prototype.send_timPresence = function(pbean, callback) {
  this.output.writeMessageBegin('timPresence', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timPresence_args();
  args.pbean = pbean;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timPresence();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timMessage = function(mbean, callback) {
  this.send_timMessage(mbean, callback); 
};

ITimClient.prototype.send_timMessage = function(mbean, callback) {
  this.output.writeMessageBegin('timMessage', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timMessage_args();
  args.mbean = mbean;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timPing = function(threadId, callback) {
  this.send_timPing(threadId, callback); 
};

ITimClient.prototype.send_timPing = function(threadId, callback) {
  this.output.writeMessageBegin('timPing', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timPing_args();
  args.threadId = threadId;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timPing();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timError = function(e, callback) {
  this.send_timError(e, callback); 
};

ITimClient.prototype.send_timError = function(e, callback) {
  this.output.writeMessageBegin('timError', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timError_args();
  args.e = e;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timError();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timLogout = function(callback) {
  this.send_timLogout(callback); 
};

ITimClient.prototype.send_timLogout = function(callback) {
  this.output.writeMessageBegin('timLogout', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timLogout_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timLogout();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timRegist = function(tid, auth, callback) {
  this.send_timRegist(tid, auth, callback); 
};

ITimClient.prototype.send_timRegist = function(tid, auth, callback) {
  this.output.writeMessageBegin('timRegist', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timRegist_args();
  args.tid = tid;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timRegist();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timRoser = function(roster, callback) {
  this.send_timRoser(roster, callback); 
};

ITimClient.prototype.send_timRoser = function(roster, callback) {
  this.output.writeMessageBegin('timRoser', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timRoser_args();
  args.roster = roster;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timRoser();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timMessageList = function(mbeanList, callback) {
  this.send_timMessageList(mbeanList, callback); 
};

ITimClient.prototype.send_timMessageList = function(mbeanList, callback) {
  this.output.writeMessageBegin('timMessageList', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timMessageList_args();
  args.mbeanList = mbeanList;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timMessageList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timPresenceList = function(pbeanList, callback) {
  this.send_timPresenceList(pbeanList, callback); 
};

ITimClient.prototype.send_timPresenceList = function(pbeanList, callback) {
  this.output.writeMessageBegin('timPresenceList', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timPresenceList_args();
  args.pbeanList = pbeanList;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timPresenceList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timMessageIq = function(timMsgIq, iqType, callback) {
  this.send_timMessageIq(timMsgIq, iqType, callback); 
};

ITimClient.prototype.send_timMessageIq = function(timMsgIq, iqType, callback) {
  this.output.writeMessageBegin('timMessageIq', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timMessageIq_args();
  args.timMsgIq = timMsgIq;
  args.iqType = iqType;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timMessageIq();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timMessageResult = function(mbean, callback) {
  this.send_timMessageResult(mbean, callback); 
};

ITimClient.prototype.send_timMessageResult = function(mbean, callback) {
  this.output.writeMessageBegin('timMessageResult', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timMessageResult_args();
  args.mbean = mbean;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timMessageResult();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timProperty = function(tpb, callback) {
  this.send_timProperty(tpb, callback); 
};

ITimClient.prototype.send_timProperty = function(tpb, callback) {
  this.output.writeMessageBegin('timProperty', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new ITim_timProperty_args();
  args.tpb = tpb;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timProperty();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};
ITimClient.prototype.timRemoteUserAuth = function(tid, pwd, auth, callback) {
  this.send_timRemoteUserAuth(tid, pwd, auth, callback); 
  if (!callback) {
    return this.recv_timRemoteUserAuth();
  }
};

ITimClient.prototype.send_timRemoteUserAuth = function(tid, pwd, auth, callback) {
  this.output.writeMessageBegin('timRemoteUserAuth', Thrift.MessageType.CALL, this.seqid);
  var args = new ITim_timRemoteUserAuth_args();
  args.tid = tid;
  args.pwd = pwd;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timRemoteUserAuth();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ITimClient.prototype.recv_timRemoteUserAuth = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ITim_timRemoteUserAuth_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'timRemoteUserAuth failed: unknown result';
};
ITimClient.prototype.timRemoteUserGet = function(tid, auth, callback) {
  this.send_timRemoteUserGet(tid, auth, callback); 
  if (!callback) {
    return this.recv_timRemoteUserGet();
  }
};

ITimClient.prototype.send_timRemoteUserGet = function(tid, auth, callback) {
  this.output.writeMessageBegin('timRemoteUserGet', Thrift.MessageType.CALL, this.seqid);
  var args = new ITim_timRemoteUserGet_args();
  args.tid = tid;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timRemoteUserGet();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ITimClient.prototype.recv_timRemoteUserGet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ITim_timRemoteUserGet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'timRemoteUserGet failed: unknown result';
};
ITimClient.prototype.timRemoteUserEdit = function(tid, ub, auth, callback) {
  this.send_timRemoteUserEdit(tid, ub, auth, callback); 
  if (!callback) {
    return this.recv_timRemoteUserEdit();
  }
};

ITimClient.prototype.send_timRemoteUserEdit = function(tid, ub, auth, callback) {
  this.output.writeMessageBegin('timRemoteUserEdit', Thrift.MessageType.CALL, this.seqid);
  var args = new ITim_timRemoteUserEdit_args();
  args.tid = tid;
  args.ub = ub;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timRemoteUserEdit();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ITimClient.prototype.recv_timRemoteUserEdit = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ITim_timRemoteUserEdit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'timRemoteUserEdit failed: unknown result';
};
ITimClient.prototype.timResponsePresence = function(pbean, auth, callback) {
  this.send_timResponsePresence(pbean, auth, callback); 
  if (!callback) {
    return this.recv_timResponsePresence();
  }
};

ITimClient.prototype.send_timResponsePresence = function(pbean, auth, callback) {
  this.output.writeMessageBegin('timResponsePresence', Thrift.MessageType.CALL, this.seqid);
  var args = new ITim_timResponsePresence_args();
  args.pbean = pbean;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timResponsePresence();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ITimClient.prototype.recv_timResponsePresence = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ITim_timResponsePresence_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'timResponsePresence failed: unknown result';
};
ITimClient.prototype.timResponseMessage = function(mbean, auth, callback) {
  this.send_timResponseMessage(mbean, auth, callback); 
  if (!callback) {
    return this.recv_timResponseMessage();
  }
};

ITimClient.prototype.send_timResponseMessage = function(mbean, auth, callback) {
  this.output.writeMessageBegin('timResponseMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new ITim_timResponseMessage_args();
  args.mbean = mbean;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timResponseMessage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ITimClient.prototype.recv_timResponseMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ITim_timResponseMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'timResponseMessage failed: unknown result';
};
ITimClient.prototype.timResponseMessageIq = function(timMsgIq, iqType, auth, callback) {
  this.send_timResponseMessageIq(timMsgIq, iqType, auth, callback); 
  if (!callback) {
    return this.recv_timResponseMessageIq();
  }
};

ITimClient.prototype.send_timResponseMessageIq = function(timMsgIq, iqType, auth, callback) {
  this.output.writeMessageBegin('timResponseMessageIq', Thrift.MessageType.CALL, this.seqid);
  var args = new ITim_timResponseMessageIq_args();
  args.timMsgIq = timMsgIq;
  args.iqType = iqType;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timResponseMessageIq();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ITimClient.prototype.recv_timResponseMessageIq = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ITim_timResponseMessageIq_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'timResponseMessageIq failed: unknown result';
};
ITimClient.prototype.timResponsePresenceList = function(pbeanList, auth, callback) {
  this.send_timResponsePresenceList(pbeanList, auth, callback); 
  if (!callback) {
    return this.recv_timResponsePresenceList();
  }
};

ITimClient.prototype.send_timResponsePresenceList = function(pbeanList, auth, callback) {
  this.output.writeMessageBegin('timResponsePresenceList', Thrift.MessageType.CALL, this.seqid);
  var args = new ITim_timResponsePresenceList_args();
  args.pbeanList = pbeanList;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timResponsePresenceList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ITimClient.prototype.recv_timResponsePresenceList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ITim_timResponsePresenceList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'timResponsePresenceList failed: unknown result';
};
ITimClient.prototype.timResponseMessageList = function(mbeanList, auth, callback) {
  this.send_timResponseMessageList(mbeanList, auth, callback); 
  if (!callback) {
    return this.recv_timResponseMessageList();
  }
};

ITimClient.prototype.send_timResponseMessageList = function(mbeanList, auth, callback) {
  this.output.writeMessageBegin('timResponseMessageList', Thrift.MessageType.CALL, this.seqid);
  var args = new ITim_timResponseMessageList_args();
  args.mbeanList = mbeanList;
  args.auth = auth;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_timResponseMessageList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ITimClient.prototype.recv_timResponseMessageList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ITim_timResponseMessageList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'timResponseMessageList failed: unknown result';
};
