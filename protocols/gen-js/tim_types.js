//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TimError = function(args) {
  this.errCode = null;
  this.errMsg = null;
  if (args) {
    if (args.errCode !== undefined && args.errCode !== null) {
      this.errCode = args.errCode;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
TimError.prototype = {};
TimError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimError.prototype.write = function(output) {
  output.writeStructBegin('TimError');
  if (this.errCode !== null && this.errCode !== undefined) {
    output.writeFieldBegin('errCode', Thrift.Type.I32, 1);
    output.writeI32(this.errCode);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 2);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimNode = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TimNode.prototype = {};
TimNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimNode.prototype.write = function(output) {
  output.writeStructBegin('TimNode');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimAckBean = function(args) {
  this.id = null;
  this.ackType = null;
  this.ackStatus = null;
  this.extraList = null;
  this.err = null;
  this.extraMap = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ackType !== undefined && args.ackType !== null) {
      this.ackType = args.ackType;
    }
    if (args.ackStatus !== undefined && args.ackStatus !== null) {
      this.ackStatus = args.ackStatus;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = new TimError(args.err);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimAckBean.prototype = {};
TimAckBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ackType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ackStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.extraList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TimNode();
          elem6.read(input);
          this.extraList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new TimError();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size7 = 0;
        var _rtmp311;
        this.extraMap = {};
        var _ktype8 = 0;
        var _vtype9 = 0;
        _rtmp311 = input.readMapBegin();
        _ktype8 = _rtmp311.ktype;
        _vtype9 = _rtmp311.vtype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          if (_i12 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key13 = null;
          var val14 = null;
          key13 = input.readString().value;
          val14 = input.readString().value;
          this.extraMap[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimAckBean.prototype.write = function(output) {
  output.writeStructBegin('TimAckBean');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.ackType !== null && this.ackType !== undefined) {
    output.writeFieldBegin('ackType', Thrift.Type.STRING, 2);
    output.writeString(this.ackType);
    output.writeFieldEnd();
  }
  if (this.ackStatus !== null && this.ackStatus !== undefined) {
    output.writeFieldBegin('ackStatus', Thrift.Type.STRING, 3);
    output.writeString(this.ackStatus);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter15 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter15))
      {
        iter15 = this.extraList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 5);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter16 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter16))
      {
        var viter17 = this.extraMap[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimHBean = function(args) {
  this.chl = null;
  this.platform = null;
  this.version = null;
  if (args) {
    if (args.chl !== undefined && args.chl !== null) {
      this.chl = args.chl;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field chl is unset!');
    }
    if (args.platform !== undefined && args.platform !== null) {
      this.platform = args.platform;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
  }
};
TimHBean.prototype = {};
TimHBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.chl = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimHBean.prototype.write = function(output) {
  output.writeStructBegin('TimHBean');
  if (this.chl !== null && this.chl !== undefined) {
    output.writeFieldBegin('chl', Thrift.Type.I32, 1);
    output.writeI32(this.chl);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 2);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 3);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimParam = function(args) {
  this.timestamp = null;
  this.version = null;
  this.lang = null;
  this.extraList = null;
  this.extraMap = null;
  this.interflow = null;
  this.tls = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.lang !== undefined && args.lang !== null) {
      this.lang = args.lang;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
    if (args.interflow !== undefined && args.interflow !== null) {
      this.interflow = args.interflow;
    }
    if (args.tls !== undefined && args.tls !== null) {
      this.tls = args.tls;
    }
  }
};
TimParam.prototype = {};
TimParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lang = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.extraList = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new TimNode();
          elem24.read(input);
          this.extraList.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size25 = 0;
        var _rtmp329;
        this.extraMap = {};
        var _ktype26 = 0;
        var _vtype27 = 0;
        _rtmp329 = input.readMapBegin();
        _ktype26 = _rtmp329.ktype;
        _vtype27 = _rtmp329.vtype;
        _size25 = _rtmp329.size;
        for (var _i30 = 0; _i30 < _size25; ++_i30)
        {
          if (_i30 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key31 = null;
          var val32 = null;
          key31 = input.readString().value;
          val32 = input.readString().value;
          this.extraMap[key31] = val32;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.interflow = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.tls = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimParam.prototype.write = function(output) {
  output.writeStructBegin('TimParam');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 2);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.STRING, 3);
    output.writeString(this.lang);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter33 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter33))
      {
        iter33 = this.extraList[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter34 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter34))
      {
        var viter35 = this.extraMap[kiter34];
        output.writeString(kiter34);
        output.writeString(viter35);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.interflow !== null && this.interflow !== undefined) {
    output.writeFieldBegin('interflow', Thrift.Type.STRING, 6);
    output.writeString(this.interflow);
    output.writeFieldEnd();
  }
  if (this.tls !== null && this.tls !== undefined) {
    output.writeFieldBegin('tls', Thrift.Type.STRING, 7);
    output.writeString(this.tls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimTime = function(args) {
  this.timestamp = null;
  this.formattime = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.formattime !== undefined && args.formattime !== null) {
      this.formattime = args.formattime;
    }
  }
};
TimTime.prototype = {};
TimTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.formattime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimTime.prototype.write = function(output) {
  output.writeStructBegin('TimTime');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.formattime !== null && this.formattime !== undefined) {
    output.writeFieldBegin('formattime', Thrift.Type.STRING, 2);
    output.writeString(this.formattime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimArea = function(args) {
  this.country = null;
  this.province = null;
  this.city = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimArea.prototype = {};
TimArea.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.extraList = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = new TimNode();
          elem42.read(input);
          this.extraList.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size43 = 0;
        var _rtmp347;
        this.extraMap = {};
        var _ktype44 = 0;
        var _vtype45 = 0;
        _rtmp347 = input.readMapBegin();
        _ktype44 = _rtmp347.ktype;
        _vtype45 = _rtmp347.vtype;
        _size43 = _rtmp347.size;
        for (var _i48 = 0; _i48 < _size43; ++_i48)
        {
          if (_i48 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key49 = null;
          var val50 = null;
          key49 = input.readString().value;
          val50 = input.readString().value;
          this.extraMap[key49] = val50;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimArea.prototype.write = function(output) {
  output.writeStructBegin('TimArea');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 1);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 2);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 3);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter51 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter51))
      {
        iter51 = this.extraList[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter52 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter52))
      {
        var viter53 = this.extraMap[kiter52];
        output.writeString(kiter52);
        output.writeString(viter53);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tid = function(args) {
  this.name = null;
  this.domain = null;
  this.resource = null;
  this.type = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.domain !== undefined && args.domain !== null) {
      this.domain = args.domain;
    }
    if (args.resource !== undefined && args.resource !== null) {
      this.resource = args.resource;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
Tid.prototype = {};
Tid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.resource = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.extraList = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = new TimNode();
          elem60.read(input);
          this.extraList.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size61 = 0;
        var _rtmp365;
        this.extraMap = {};
        var _ktype62 = 0;
        var _vtype63 = 0;
        _rtmp365 = input.readMapBegin();
        _ktype62 = _rtmp365.ktype;
        _vtype63 = _rtmp365.vtype;
        _size61 = _rtmp365.size;
        for (var _i66 = 0; _i66 < _size61; ++_i66)
        {
          if (_i66 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key67 = null;
          var val68 = null;
          key67 = input.readString().value;
          val68 = input.readString().value;
          this.extraMap[key67] = val68;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tid.prototype.write = function(output) {
  output.writeStructBegin('Tid');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 2);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRING, 3);
    output.writeString(this.resource);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 4);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter69 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter69))
      {
        iter69 = this.extraList[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter70 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter70))
      {
        var viter71 = this.extraMap[kiter70];
        output.writeString(kiter70);
        output.writeString(viter71);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimUserBean = function(args) {
  this.tid = null;
  this.nickname = null;
  this.remarkname = null;
  this.brithday = null;
  this.gender = null;
  this.headurl = null;
  this.area = null;
  this.headbyte = null;
  this.photoBytes = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.nickname !== undefined && args.nickname !== null) {
      this.nickname = args.nickname;
    }
    if (args.remarkname !== undefined && args.remarkname !== null) {
      this.remarkname = args.remarkname;
    }
    if (args.brithday !== undefined && args.brithday !== null) {
      this.brithday = args.brithday;
    }
    if (args.gender !== undefined && args.gender !== null) {
      this.gender = args.gender;
    }
    if (args.headurl !== undefined && args.headurl !== null) {
      this.headurl = args.headurl;
    }
    if (args.area !== undefined && args.area !== null) {
      this.area = new TimArea(args.area);
    }
    if (args.headbyte !== undefined && args.headbyte !== null) {
      this.headbyte = args.headbyte;
    }
    if (args.photoBytes !== undefined && args.photoBytes !== null) {
      this.photoBytes = Thrift.copyList(args.photoBytes, [null]);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimUserBean.prototype = {};
TimUserBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.remarkname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.brithday = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.gender = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.headurl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.area = new TimArea();
        this.area.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.headbyte = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.photoBytes = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readBinary().value;
          this.photoBytes.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.extraList = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = new TimNode();
          elem85.read(input);
          this.extraList.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        var _size86 = 0;
        var _rtmp390;
        this.extraMap = {};
        var _ktype87 = 0;
        var _vtype88 = 0;
        _rtmp390 = input.readMapBegin();
        _ktype87 = _rtmp390.ktype;
        _vtype88 = _rtmp390.vtype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          if (_i91 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key92 = null;
          var val93 = null;
          key92 = input.readString().value;
          val93 = input.readString().value;
          this.extraMap[key92] = val93;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimUserBean.prototype.write = function(output) {
  output.writeStructBegin('TimUserBean');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 2);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.remarkname !== null && this.remarkname !== undefined) {
    output.writeFieldBegin('remarkname', Thrift.Type.STRING, 3);
    output.writeString(this.remarkname);
    output.writeFieldEnd();
  }
  if (this.brithday !== null && this.brithday !== undefined) {
    output.writeFieldBegin('brithday', Thrift.Type.STRING, 4);
    output.writeString(this.brithday);
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.I16, 5);
    output.writeI16(this.gender);
    output.writeFieldEnd();
  }
  if (this.headurl !== null && this.headurl !== undefined) {
    output.writeFieldBegin('headurl', Thrift.Type.STRING, 6);
    output.writeString(this.headurl);
    output.writeFieldEnd();
  }
  if (this.area !== null && this.area !== undefined) {
    output.writeFieldBegin('area', Thrift.Type.STRUCT, 7);
    this.area.write(output);
    output.writeFieldEnd();
  }
  if (this.headbyte !== null && this.headbyte !== undefined) {
    output.writeFieldBegin('headbyte', Thrift.Type.STRING, 8);
    output.writeBinary(this.headbyte);
    output.writeFieldEnd();
  }
  if (this.photoBytes !== null && this.photoBytes !== undefined) {
    output.writeFieldBegin('photoBytes', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.photoBytes.length);
    for (var iter94 in this.photoBytes)
    {
      if (this.photoBytes.hasOwnProperty(iter94))
      {
        iter94 = this.photoBytes[iter94];
        output.writeBinary(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter95 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter95))
      {
        iter95 = this.extraList[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter96 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter96))
      {
        var viter97 = this.extraMap[kiter96];
        output.writeString(kiter96);
        output.writeString(viter97);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRoom = function(args) {
  this.tid = null;
  this.founderTid = null;
  this.HostsTid = null;
  this.membersTid = null;
  this.headurl = null;
  this.roomName = null;
  this.desc = null;
  this.createTime = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.founderTid !== undefined && args.founderTid !== null) {
      this.founderTid = new Tid(args.founderTid);
    }
    if (args.HostsTid !== undefined && args.HostsTid !== null) {
      this.HostsTid = Thrift.copyList(args.HostsTid, [Tid]);
    }
    if (args.membersTid !== undefined && args.membersTid !== null) {
      this.membersTid = Thrift.copyList(args.membersTid, [Tid]);
    }
    if (args.headurl !== undefined && args.headurl !== null) {
      this.headurl = args.headurl;
    }
    if (args.roomName !== undefined && args.roomName !== null) {
      this.roomName = args.roomName;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = new TimTime(args.createTime);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimRoom.prototype = {};
TimRoom.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.founderTid = new Tid();
        this.founderTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.HostsTid = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = new Tid();
          elem104.read(input);
          this.HostsTid.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size105 = 0;
        var _rtmp3109;
        this.membersTid = [];
        var _etype108 = 0;
        _rtmp3109 = input.readListBegin();
        _etype108 = _rtmp3109.etype;
        _size105 = _rtmp3109.size;
        for (var _i110 = 0; _i110 < _size105; ++_i110)
        {
          var elem111 = null;
          elem111 = new Tid();
          elem111.read(input);
          this.membersTid.push(elem111);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.headurl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.roomName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.createTime = new TimTime();
        this.createTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.extraList = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new TimNode();
          elem118.read(input);
          this.extraList.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size119 = 0;
        var _rtmp3123;
        this.extraMap = {};
        var _ktype120 = 0;
        var _vtype121 = 0;
        _rtmp3123 = input.readMapBegin();
        _ktype120 = _rtmp3123.ktype;
        _vtype121 = _rtmp3123.vtype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          if (_i124 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key125 = null;
          var val126 = null;
          key125 = input.readString().value;
          val126 = input.readString().value;
          this.extraMap[key125] = val126;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRoom.prototype.write = function(output) {
  output.writeStructBegin('TimRoom');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.founderTid !== null && this.founderTid !== undefined) {
    output.writeFieldBegin('founderTid', Thrift.Type.STRUCT, 2);
    this.founderTid.write(output);
    output.writeFieldEnd();
  }
  if (this.HostsTid !== null && this.HostsTid !== undefined) {
    output.writeFieldBegin('HostsTid', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.HostsTid.length);
    for (var iter127 in this.HostsTid)
    {
      if (this.HostsTid.hasOwnProperty(iter127))
      {
        iter127 = this.HostsTid[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.membersTid !== null && this.membersTid !== undefined) {
    output.writeFieldBegin('membersTid', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.membersTid.length);
    for (var iter128 in this.membersTid)
    {
      if (this.membersTid.hasOwnProperty(iter128))
      {
        iter128 = this.membersTid[iter128];
        iter128.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.headurl !== null && this.headurl !== undefined) {
    output.writeFieldBegin('headurl', Thrift.Type.STRING, 5);
    output.writeString(this.headurl);
    output.writeFieldEnd();
  }
  if (this.roomName !== null && this.roomName !== undefined) {
    output.writeFieldBegin('roomName', Thrift.Type.STRING, 6);
    output.writeString(this.roomName);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 7);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRUCT, 8);
    this.createTime.write(output);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter129 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter129))
      {
        iter129 = this.extraList[iter129];
        iter129.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter130 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter130))
      {
        var viter131 = this.extraMap[kiter130];
        output.writeString(kiter130);
        output.writeString(viter131);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPBean = function(args) {
  this.threadId = null;
  this.fromTid = null;
  this.toTid = null;
  this.status = null;
  this.type = null;
  this.priority = null;
  this.show = null;
  this.leaguerTid = null;
  this.extraList = null;
  this.error = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.show !== undefined && args.show !== null) {
      this.show = args.show;
    }
    if (args.leaguerTid !== undefined && args.leaguerTid !== null) {
      this.leaguerTid = new Tid(args.leaguerTid);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimPBean.prototype = {};
TimPBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.show = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.leaguerTid = new Tid();
        this.leaguerTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.extraList = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new TimNode();
          elem138.read(input);
          this.extraList.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        var _size139 = 0;
        var _rtmp3143;
        this.extraMap = {};
        var _ktype140 = 0;
        var _vtype141 = 0;
        _rtmp3143 = input.readMapBegin();
        _ktype140 = _rtmp3143.ktype;
        _vtype141 = _rtmp3143.vtype;
        _size139 = _rtmp3143.size;
        for (var _i144 = 0; _i144 < _size139; ++_i144)
        {
          if (_i144 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key145 = null;
          var val146 = null;
          key145 = input.readString().value;
          val146 = input.readString().value;
          this.extraMap[key145] = val146;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPBean.prototype.write = function(output) {
  output.writeStructBegin('TimPBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 2);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 3);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 4);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 6);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.show !== null && this.show !== undefined) {
    output.writeFieldBegin('show', Thrift.Type.STRING, 7);
    output.writeString(this.show);
    output.writeFieldEnd();
  }
  if (this.leaguerTid !== null && this.leaguerTid !== undefined) {
    output.writeFieldBegin('leaguerTid', Thrift.Type.STRUCT, 8);
    this.leaguerTid.write(output);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter147 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter147))
      {
        iter147 = this.extraList[iter147];
        iter147.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 10);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter148 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter148))
      {
        var viter149 = this.extraMap[kiter148];
        output.writeString(kiter148);
        output.writeString(viter149);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimMBean = function(args) {
  this.threadId = null;
  this.mid = null;
  this.fromTid = null;
  this.toTid = null;
  this.body = null;
  this.type = null;
  this.msgType = null;
  this.offline = null;
  this.leaguerTid = null;
  this.extraList = null;
  this.timestamp = null;
  this.error = null;
  this.extraMap = null;
  this.readstatus = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.msgType !== undefined && args.msgType !== null) {
      this.msgType = args.msgType;
    }
    if (args.offline !== undefined && args.offline !== null) {
      this.offline = new TimTime(args.offline);
    }
    if (args.leaguerTid !== undefined && args.leaguerTid !== null) {
      this.leaguerTid = new Tid(args.leaguerTid);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
    if (args.readstatus !== undefined && args.readstatus !== null) {
      this.readstatus = args.readstatus;
    }
  }
};
TimMBean.prototype = {};
TimMBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.msgType = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.offline = new TimTime();
        this.offline.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.leaguerTid = new Tid();
        this.leaguerTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size150 = 0;
        var _rtmp3154;
        this.extraList = [];
        var _etype153 = 0;
        _rtmp3154 = input.readListBegin();
        _etype153 = _rtmp3154.etype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          var elem156 = null;
          elem156 = new TimNode();
          elem156.read(input);
          this.extraList.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.MAP) {
        var _size157 = 0;
        var _rtmp3161;
        this.extraMap = {};
        var _ktype158 = 0;
        var _vtype159 = 0;
        _rtmp3161 = input.readMapBegin();
        _ktype158 = _rtmp3161.ktype;
        _vtype159 = _rtmp3161.vtype;
        _size157 = _rtmp3161.size;
        for (var _i162 = 0; _i162 < _size157; ++_i162)
        {
          if (_i162 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key163 = null;
          var val164 = null;
          key163 = input.readString().value;
          val164 = input.readString().value;
          this.extraMap[key163] = val164;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I16) {
        this.readstatus = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimMBean.prototype.write = function(output) {
  output.writeStructBegin('TimMBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 3);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 4);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 5);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 6);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.msgType !== null && this.msgType !== undefined) {
    output.writeFieldBegin('msgType', Thrift.Type.I16, 7);
    output.writeI16(this.msgType);
    output.writeFieldEnd();
  }
  if (this.offline !== null && this.offline !== undefined) {
    output.writeFieldBegin('offline', Thrift.Type.STRUCT, 8);
    this.offline.write(output);
    output.writeFieldEnd();
  }
  if (this.leaguerTid !== null && this.leaguerTid !== undefined) {
    output.writeFieldBegin('leaguerTid', Thrift.Type.STRUCT, 9);
    this.leaguerTid.write(output);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter165 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter165))
      {
        iter165 = this.extraList[iter165];
        iter165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 11);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 12);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 13);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter166 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter166))
      {
        var viter167 = this.extraMap[kiter166];
        output.writeString(kiter166);
        output.writeString(viter167);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.readstatus !== null && this.readstatus !== undefined) {
    output.writeFieldBegin('readstatus', Thrift.Type.I16, 14);
    output.writeI16(this.readstatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimIqBean = function(args) {
  this.threadId = null;
  this.fromTid = null;
  this.toTid = null;
  this.type = null;
  this.extraList = null;
  this.error = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimIqBean.prototype = {};
TimIqBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.extraList = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new TimNode();
          elem174.read(input);
          this.extraList.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size175 = 0;
        var _rtmp3179;
        this.extraMap = {};
        var _ktype176 = 0;
        var _vtype177 = 0;
        _rtmp3179 = input.readMapBegin();
        _ktype176 = _rtmp3179.ktype;
        _vtype177 = _rtmp3179.vtype;
        _size175 = _rtmp3179.size;
        for (var _i180 = 0; _i180 < _size175; ++_i180)
        {
          if (_i180 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key181 = null;
          var val182 = null;
          key181 = input.readString().value;
          val182 = input.readString().value;
          this.extraMap[key181] = val182;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimIqBean.prototype.write = function(output) {
  output.writeStructBegin('TimIqBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 2);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 3);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 4);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter183 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter183))
      {
        iter183 = this.extraList[iter183];
        iter183.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 6);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter184 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter184))
      {
        var viter185 = this.extraMap[kiter184];
        output.writeString(kiter184);
        output.writeString(viter185);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRoster = function(args) {
  this.subscription = null;
  this.tid = null;
  this.name = null;
  this.extraMap = null;
  if (args) {
    if (args.subscription !== undefined && args.subscription !== null) {
      this.subscription = args.subscription;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subscription is unset!');
    }
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tid is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimRoster.prototype = {};
TimRoster.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.subscription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size186 = 0;
        var _rtmp3190;
        this.extraMap = {};
        var _ktype187 = 0;
        var _vtype188 = 0;
        _rtmp3190 = input.readMapBegin();
        _ktype187 = _rtmp3190.ktype;
        _vtype188 = _rtmp3190.vtype;
        _size186 = _rtmp3190.size;
        for (var _i191 = 0; _i191 < _size186; ++_i191)
        {
          if (_i191 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key192 = null;
          var val193 = null;
          key192 = input.readString().value;
          val193 = input.readString().value;
          this.extraMap[key192] = val193;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRoster.prototype.write = function(output) {
  output.writeStructBegin('TimRoster');
  if (this.subscription !== null && this.subscription !== undefined) {
    output.writeFieldBegin('subscription', Thrift.Type.STRING, 1);
    output.writeString(this.subscription);
    output.writeFieldEnd();
  }
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 2);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter194 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter194))
      {
        var viter195 = this.extraMap[kiter194];
        output.writeString(kiter194);
        output.writeString(viter195);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRemoteUserBean = function(args) {
  this.error = null;
  this.ub = null;
  this.extraMap = null;
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.ub !== undefined && args.ub !== null) {
      this.ub = new TimUserBean(args.ub);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimRemoteUserBean.prototype = {};
TimRemoteUserBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ub = new TimUserBean();
        this.ub.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size196 = 0;
        var _rtmp3200;
        this.extraMap = {};
        var _ktype197 = 0;
        var _vtype198 = 0;
        _rtmp3200 = input.readMapBegin();
        _ktype197 = _rtmp3200.ktype;
        _vtype198 = _rtmp3200.vtype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          if (_i201 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key202 = null;
          var val203 = null;
          key202 = input.readString().value;
          val203 = input.readString().value;
          this.extraMap[key202] = val203;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRemoteUserBean.prototype.write = function(output) {
  output.writeStructBegin('TimRemoteUserBean');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.ub !== null && this.ub !== undefined) {
    output.writeFieldBegin('ub', Thrift.Type.STRUCT, 2);
    this.ub.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter204 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter204))
      {
        var viter205 = this.extraMap[kiter204];
        output.writeString(kiter204);
        output.writeString(viter205);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRemoteRoom = function(args) {
  this.error = null;
  this.room = null;
  this.extraMap = null;
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.room !== undefined && args.room !== null) {
      this.room = new TimRoom(args.room);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimRemoteRoom.prototype = {};
TimRemoteRoom.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.room = new TimRoom();
        this.room.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size206 = 0;
        var _rtmp3210;
        this.extraMap = {};
        var _ktype207 = 0;
        var _vtype208 = 0;
        _rtmp3210 = input.readMapBegin();
        _ktype207 = _rtmp3210.ktype;
        _vtype208 = _rtmp3210.vtype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          if (_i211 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key212 = null;
          var val213 = null;
          key212 = input.readString().value;
          val213 = input.readString().value;
          this.extraMap[key212] = val213;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRemoteRoom.prototype.write = function(output) {
  output.writeStructBegin('TimRemoteRoom');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.room !== null && this.room !== undefined) {
    output.writeFieldBegin('room', Thrift.Type.STRUCT, 2);
    this.room.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter214 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter214))
      {
        var viter215 = this.extraMap[kiter214];
        output.writeString(kiter214);
        output.writeString(viter215);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimResponseBean = function(args) {
  this.threadId = null;
  this.error = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimResponseBean.prototype = {};
TimResponseBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.extraList = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = new TimNode();
          elem222.read(input);
          this.extraList.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size223 = 0;
        var _rtmp3227;
        this.extraMap = {};
        var _ktype224 = 0;
        var _vtype225 = 0;
        _rtmp3227 = input.readMapBegin();
        _ktype224 = _rtmp3227.ktype;
        _vtype225 = _rtmp3227.vtype;
        _size223 = _rtmp3227.size;
        for (var _i228 = 0; _i228 < _size223; ++_i228)
        {
          if (_i228 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key229 = null;
          var val230 = null;
          key229 = input.readString().value;
          val230 = input.readString().value;
          this.extraMap[key229] = val230;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimResponseBean.prototype.write = function(output) {
  output.writeStructBegin('TimResponseBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter231 in this.extraList)
    {
      if (this.extraList.hasOwnProperty(iter231))
      {
        iter231 = this.extraList[iter231];
        iter231.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter232 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter232))
      {
        var viter233 = this.extraMap[kiter232];
        output.writeString(kiter232);
        output.writeString(viter233);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimSock5Bean = function(args) {
  this.fromTid = null;
  this.toTid = null;
  this.addr = null;
  this.port = null;
  this.transport = null;
  this.pubId = null;
  this.extraMap = null;
  if (args) {
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fromTid is unset!');
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toTid is unset!');
    }
    if (args.addr !== undefined && args.addr !== null) {
      this.addr = args.addr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field addr is unset!');
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
    }
    if (args.transport !== undefined && args.transport !== null) {
      this.transport = args.transport;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field transport is unset!');
    }
    if (args.pubId !== undefined && args.pubId !== null) {
      this.pubId = args.pubId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pubId is unset!');
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimSock5Bean.prototype = {};
TimSock5Bean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.addr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.transport = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.pubId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size234 = 0;
        var _rtmp3238;
        this.extraMap = {};
        var _ktype235 = 0;
        var _vtype236 = 0;
        _rtmp3238 = input.readMapBegin();
        _ktype235 = _rtmp3238.ktype;
        _vtype236 = _rtmp3238.vtype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          if (_i239 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key240 = null;
          var val241 = null;
          key240 = input.readString().value;
          val241 = input.readString().value;
          this.extraMap[key240] = val241;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimSock5Bean.prototype.write = function(output) {
  output.writeStructBegin('TimSock5Bean');
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 1);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 2);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.addr !== null && this.addr !== undefined) {
    output.writeFieldBegin('addr', Thrift.Type.STRING, 3);
    output.writeString(this.addr);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 4);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.transport !== null && this.transport !== undefined) {
    output.writeFieldBegin('transport', Thrift.Type.I16, 5);
    output.writeI16(this.transport);
    output.writeFieldEnd();
  }
  if (this.pubId !== null && this.pubId !== undefined) {
    output.writeFieldBegin('pubId', Thrift.Type.STRING, 6);
    output.writeString(this.pubId);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter242 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter242))
      {
        var viter243 = this.extraMap[kiter242];
        output.writeString(kiter242);
        output.writeString(viter243);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimSock5Bytes = function(args) {
  this.pubId = null;
  this.index = null;
  this.bytes = null;
  this.extraMap = null;
  if (args) {
    if (args.pubId !== undefined && args.pubId !== null) {
      this.pubId = args.pubId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pubId is unset!');
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field index is unset!');
    }
    if (args.bytes !== undefined && args.bytes !== null) {
      this.bytes = Thrift.copyList(args.bytes, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bytes is unset!');
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimSock5Bytes.prototype = {};
TimSock5Bytes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pubId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size244 = 0;
        var _rtmp3248;
        this.bytes = [];
        var _etype247 = 0;
        _rtmp3248 = input.readListBegin();
        _etype247 = _rtmp3248.etype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var elem250 = null;
          elem250 = input.readBinary().value;
          this.bytes.push(elem250);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size251 = 0;
        var _rtmp3255;
        this.extraMap = {};
        var _ktype252 = 0;
        var _vtype253 = 0;
        _rtmp3255 = input.readMapBegin();
        _ktype252 = _rtmp3255.ktype;
        _vtype253 = _rtmp3255.vtype;
        _size251 = _rtmp3255.size;
        for (var _i256 = 0; _i256 < _size251; ++_i256)
        {
          if (_i256 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key257 = null;
          var val258 = null;
          key257 = input.readString().value;
          val258 = input.readString().value;
          this.extraMap[key257] = val258;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimSock5Bytes.prototype.write = function(output) {
  output.writeStructBegin('TimSock5Bytes');
  if (this.pubId !== null && this.pubId !== undefined) {
    output.writeFieldBegin('pubId', Thrift.Type.STRING, 1);
    output.writeString(this.pubId);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 2);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.bytes !== null && this.bytes !== undefined) {
    output.writeFieldBegin('bytes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.bytes.length);
    for (var iter259 in this.bytes)
    {
      if (this.bytes.hasOwnProperty(iter259))
      {
        iter259 = this.bytes[iter259];
        output.writeBinary(iter259);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter260 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter260))
      {
        var viter261 = this.extraMap[kiter260];
        output.writeString(kiter260);
        output.writeString(viter261);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPage = function(args) {
  this.fromTimeStamp = null;
  this.toTimeStamp = null;
  this.limitCount = null;
  this.extraMap = null;
  if (args) {
    if (args.fromTimeStamp !== undefined && args.fromTimeStamp !== null) {
      this.fromTimeStamp = args.fromTimeStamp;
    }
    if (args.toTimeStamp !== undefined && args.toTimeStamp !== null) {
      this.toTimeStamp = args.toTimeStamp;
    }
    if (args.limitCount !== undefined && args.limitCount !== null) {
      this.limitCount = args.limitCount;
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimPage.prototype = {};
TimPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fromTimeStamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toTimeStamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limitCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size262 = 0;
        var _rtmp3266;
        this.extraMap = {};
        var _ktype263 = 0;
        var _vtype264 = 0;
        _rtmp3266 = input.readMapBegin();
        _ktype263 = _rtmp3266.ktype;
        _vtype264 = _rtmp3266.vtype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          if (_i267 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key268 = null;
          var val269 = null;
          key268 = input.readString().value;
          val269 = input.readString().value;
          this.extraMap[key268] = val269;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPage.prototype.write = function(output) {
  output.writeStructBegin('TimPage');
  if (this.fromTimeStamp !== null && this.fromTimeStamp !== undefined) {
    output.writeFieldBegin('fromTimeStamp', Thrift.Type.STRING, 1);
    output.writeString(this.fromTimeStamp);
    output.writeFieldEnd();
  }
  if (this.toTimeStamp !== null && this.toTimeStamp !== undefined) {
    output.writeFieldBegin('toTimeStamp', Thrift.Type.STRING, 2);
    output.writeString(this.toTimeStamp);
    output.writeFieldEnd();
  }
  if (this.limitCount !== null && this.limitCount !== undefined) {
    output.writeFieldBegin('limitCount', Thrift.Type.I32, 3);
    output.writeI32(this.limitCount);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter270 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter270))
      {
        var viter271 = this.extraMap[kiter270];
        output.writeString(kiter270);
        output.writeString(viter271);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimMessageIq = function(args) {
  this.tidlist = null;
  this.timPage = null;
  this.midlist = null;
  this.extraMap = null;
  if (args) {
    if (args.tidlist !== undefined && args.tidlist !== null) {
      this.tidlist = Thrift.copyList(args.tidlist, [null]);
    }
    if (args.timPage !== undefined && args.timPage !== null) {
      this.timPage = new TimPage(args.timPage);
    }
    if (args.midlist !== undefined && args.midlist !== null) {
      this.midlist = Thrift.copyList(args.midlist, [null]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimMessageIq.prototype = {};
TimMessageIq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.tidlist = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = input.readString().value;
          this.tidlist.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timPage = new TimPage();
        this.timPage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size279 = 0;
        var _rtmp3283;
        this.midlist = [];
        var _etype282 = 0;
        _rtmp3283 = input.readListBegin();
        _etype282 = _rtmp3283.etype;
        _size279 = _rtmp3283.size;
        for (var _i284 = 0; _i284 < _size279; ++_i284)
        {
          var elem285 = null;
          elem285 = input.readString().value;
          this.midlist.push(elem285);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size286 = 0;
        var _rtmp3290;
        this.extraMap = {};
        var _ktype287 = 0;
        var _vtype288 = 0;
        _rtmp3290 = input.readMapBegin();
        _ktype287 = _rtmp3290.ktype;
        _vtype288 = _rtmp3290.vtype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          if (_i291 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key292 = null;
          var val293 = null;
          key292 = input.readString().value;
          val293 = input.readString().value;
          this.extraMap[key292] = val293;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimMessageIq.prototype.write = function(output) {
  output.writeStructBegin('TimMessageIq');
  if (this.tidlist !== null && this.tidlist !== undefined) {
    output.writeFieldBegin('tidlist', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.tidlist.length);
    for (var iter294 in this.tidlist)
    {
      if (this.tidlist.hasOwnProperty(iter294))
      {
        iter294 = this.tidlist[iter294];
        output.writeString(iter294);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timPage !== null && this.timPage !== undefined) {
    output.writeFieldBegin('timPage', Thrift.Type.STRUCT, 2);
    this.timPage.write(output);
    output.writeFieldEnd();
  }
  if (this.midlist !== null && this.midlist !== undefined) {
    output.writeFieldBegin('midlist', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.midlist.length);
    for (var iter295 in this.midlist)
    {
      if (this.midlist.hasOwnProperty(iter295))
      {
        iter295 = this.midlist[iter295];
        output.writeString(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter296 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter296))
      {
        var viter297 = this.extraMap[kiter296];
        output.writeString(kiter296);
        output.writeString(viter297);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimAuth = function(args) {
  this.domain = null;
  this.username = null;
  this.pwd = null;
  if (args) {
    if (args.domain !== undefined && args.domain !== null) {
      this.domain = args.domain;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
  }
};
TimAuth.prototype = {};
TimAuth.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimAuth.prototype.write = function(output) {
  output.writeStructBegin('TimAuth');
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 1);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 3);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimMBeanList = function(args) {
  this.threadId = null;
  this.timMBeanList = null;
  this.reqType = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.timMBeanList !== undefined && args.timMBeanList !== null) {
      this.timMBeanList = Thrift.copyList(args.timMBeanList, [TimMBean]);
    }
    if (args.reqType !== undefined && args.reqType !== null) {
      this.reqType = args.reqType;
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimMBeanList.prototype = {};
TimMBeanList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size298 = 0;
        var _rtmp3302;
        this.timMBeanList = [];
        var _etype301 = 0;
        _rtmp3302 = input.readListBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = new TimMBean();
          elem304.read(input);
          this.timMBeanList.push(elem304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reqType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size305 = 0;
        var _rtmp3309;
        this.extraMap = {};
        var _ktype306 = 0;
        var _vtype307 = 0;
        _rtmp3309 = input.readMapBegin();
        _ktype306 = _rtmp3309.ktype;
        _vtype307 = _rtmp3309.vtype;
        _size305 = _rtmp3309.size;
        for (var _i310 = 0; _i310 < _size305; ++_i310)
        {
          if (_i310 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key311 = null;
          var val312 = null;
          key311 = input.readString().value;
          val312 = input.readString().value;
          this.extraMap[key311] = val312;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimMBeanList.prototype.write = function(output) {
  output.writeStructBegin('TimMBeanList');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.timMBeanList !== null && this.timMBeanList !== undefined) {
    output.writeFieldBegin('timMBeanList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.timMBeanList.length);
    for (var iter313 in this.timMBeanList)
    {
      if (this.timMBeanList.hasOwnProperty(iter313))
      {
        iter313 = this.timMBeanList[iter313];
        iter313.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reqType !== null && this.reqType !== undefined) {
    output.writeFieldBegin('reqType', Thrift.Type.STRING, 3);
    output.writeString(this.reqType);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter314 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter314))
      {
        var viter315 = this.extraMap[kiter314];
        output.writeString(kiter314);
        output.writeString(viter315);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPBeanList = function(args) {
  this.threadId = null;
  this.timPBeanList = null;
  this.reqType = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.timPBeanList !== undefined && args.timPBeanList !== null) {
      this.timPBeanList = Thrift.copyList(args.timPBeanList, [TimPBean]);
    }
    if (args.reqType !== undefined && args.reqType !== null) {
      this.reqType = args.reqType;
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimPBeanList.prototype = {};
TimPBeanList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size316 = 0;
        var _rtmp3320;
        this.timPBeanList = [];
        var _etype319 = 0;
        _rtmp3320 = input.readListBegin();
        _etype319 = _rtmp3320.etype;
        _size316 = _rtmp3320.size;
        for (var _i321 = 0; _i321 < _size316; ++_i321)
        {
          var elem322 = null;
          elem322 = new TimPBean();
          elem322.read(input);
          this.timPBeanList.push(elem322);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reqType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size323 = 0;
        var _rtmp3327;
        this.extraMap = {};
        var _ktype324 = 0;
        var _vtype325 = 0;
        _rtmp3327 = input.readMapBegin();
        _ktype324 = _rtmp3327.ktype;
        _vtype325 = _rtmp3327.vtype;
        _size323 = _rtmp3327.size;
        for (var _i328 = 0; _i328 < _size323; ++_i328)
        {
          if (_i328 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key329 = null;
          var val330 = null;
          key329 = input.readString().value;
          val330 = input.readString().value;
          this.extraMap[key329] = val330;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPBeanList.prototype.write = function(output) {
  output.writeStructBegin('TimPBeanList');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.timPBeanList !== null && this.timPBeanList !== undefined) {
    output.writeFieldBegin('timPBeanList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.timPBeanList.length);
    for (var iter331 in this.timPBeanList)
    {
      if (this.timPBeanList.hasOwnProperty(iter331))
      {
        iter331 = this.timPBeanList[iter331];
        iter331.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reqType !== null && this.reqType !== undefined) {
    output.writeFieldBegin('reqType', Thrift.Type.STRING, 3);
    output.writeString(this.reqType);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter332 in this.extraMap)
    {
      if (this.extraMap.hasOwnProperty(kiter332))
      {
        var viter333 = this.extraMap[kiter332];
        output.writeString(kiter332);
        output.writeString(viter333);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPropertyBean = function(args) {
  this.threadId = null;
  this.interflow = null;
  this.tls = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    }
    if (args.interflow !== undefined && args.interflow !== null) {
      this.interflow = args.interflow;
    }
    if (args.tls !== undefined && args.tls !== null) {
      this.tls = args.tls;
    }
  }
};
TimPropertyBean.prototype = {};
TimPropertyBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.interflow = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tls = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPropertyBean.prototype.write = function(output) {
  output.writeStructBegin('TimPropertyBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.interflow !== null && this.interflow !== undefined) {
    output.writeFieldBegin('interflow', Thrift.Type.STRING, 2);
    output.writeString(this.interflow);
    output.writeFieldEnd();
  }
  if (this.tls !== null && this.tls !== undefined) {
    output.writeFieldBegin('tls', Thrift.Type.STRING, 3);
    output.writeString(this.tls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

protocolversion = 4;
protocolversionName = '1.1.0';
TIM_SC_SUCCESS = '200';
TIM_SC_FAILED = '400';
