<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ITimIf {
  /**
   * 流程开始
   * 
   * @param \TimParam $param
   */
  public function timStream(\TimParam $param);
  /**
   * tls协议
   * 
   */
  public function timStarttls();
  /**
   * 登陆协议
   * 
   * @param \Tid $tid
   * @param string $pwd
   */
  public function timLogin(\Tid $tid, $pwd);
  /**
   * 回执信息
   * 
   * @param \TimAckBean $ab
   */
  public function timAck(\TimAckBean $ab);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param \TimPBean $pbean
   */
  public function timPresence(\TimPBean $pbean);
  /**
   * 发送信息或接收信息
   * 
   * @param \TimMBean $mbean
   */
  public function timMessage(\TimMBean $mbean);
  /**
   * ping 心跳协议
   * 
   * @param string $threadId
   */
  public function timPing($threadId);
  /**
   * 错误通知
   * 
   * @param \TimError $e
   */
  public function timError(\TimError $e);
  /**
   * 登出协议
   * 
   */
  public function timLogout();
  /**
   * 注册协议
   * 
   * @param \Tid $tid
   * @param string $auth
   */
  public function timRegist(\Tid $tid, $auth);
  /**
   * 花名册
   * 
   * @param \TimRoster $roster
   */
  public function timRoser(\TimRoster $roster);
  /**
   * 发送信息或接收信息列表（合流）
   * 
   * @param \TimMBeanList $mbeanList
   */
  public function timMessageList(\TimMBeanList $mbeanList);
  /**
   * 发送状态信息列表（合流）
   * 
   * @param \TimPBeanList $pbeanList
   */
  public function timPresenceList(\TimPBeanList $pbeanList);
  /**
   * 信息请求 get请求数据 del删除
   * 
   * @param \TimMessageIq $timMsgIq
   * @param string $iqType
   */
  public function timMessageIq(\TimMessageIq $timMsgIq, $iqType);
  /**
   * 信息请求
   * 
   * @param \TimMBean $mbean
   */
  public function timMessageResult(\TimMBean $mbean);
  /**
   * 用户协议属性请求
   * 
   * @param \TimPropertyBean $tpb
   */
  public function timProperty(\TimPropertyBean $tpb);
  /**
   * 请求远程验证信息
   * 
   * @param \Tid $tid
   * @param string $pwd
   * @param \TimAuth $auth
   * @return \TimRemoteUserBean
   */
  public function timRemoteUserAuth(\Tid $tid, $pwd, \TimAuth $auth);
  /**
   * 请求远程用户信息
   * 
   * @param \Tid $tid
   * @param \TimAuth $auth
   * @return \TimRemoteUserBean
   */
  public function timRemoteUserGet(\Tid $tid, \TimAuth $auth);
  /**
   * 编辑远程用户信息
   * 
   * @param \Tid $tid
   * @param \TimUserBean $ub
   * @param \TimAuth $auth
   * @return \TimRemoteUserBean
   */
  public function timRemoteUserEdit(\Tid $tid, \TimUserBean $ub, \TimAuth $auth);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param \TimPBean $pbean
   * @param \TimAuth $auth
   * @return \TimResponseBean
   */
  public function timResponsePresence(\TimPBean $pbean, \TimAuth $auth);
  /**
   * 发送信息或接收信息
   * 
   * @param \TimMBean $mbean
   * @param \TimAuth $auth
   * @return \TimResponseBean
   */
  public function timResponseMessage(\TimMBean $mbean, \TimAuth $auth);
  /**
   * 信息请求 get请求数据 del删除（辅助接口）
   * 
   * @param \TimMessageIq $timMsgIq
   * @param string $iqType
   * @param \TimAuth $auth
   * @return \TimMBeanList
   */
  public function timResponseMessageIq(\TimMessageIq $timMsgIq, $iqType, \TimAuth $auth);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param \TimPBeanList $pbeanList
   * @param \TimAuth $auth
   * @return \TimResponseBean
   */
  public function timResponsePresenceList(\TimPBeanList $pbeanList, \TimAuth $auth);
  /**
   * 发送信息或接收信息
   * 
   * @param \TimMBeanList $mbeanList
   * @param \TimAuth $auth
   * @return \TimResponseBean
   */
  public function timResponseMessageList(\TimMBeanList $mbeanList, \TimAuth $auth);
}

class ITimClient implements \ITimIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function timStream(\TimParam $param)
  {
    $this->send_timStream($param);
  }

  public function send_timStream(\TimParam $param)
  {
    $args = new \ITim_timStream_args();
    $args->param = $param;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timStream', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timStream', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timStarttls()
  {
    $this->send_timStarttls();
  }

  public function send_timStarttls()
  {
    $args = new \ITim_timStarttls_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timStarttls', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timStarttls', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timLogin(\Tid $tid, $pwd)
  {
    $this->send_timLogin($tid, $pwd);
  }

  public function send_timLogin(\Tid $tid, $pwd)
  {
    $args = new \ITim_timLogin_args();
    $args->tid = $tid;
    $args->pwd = $pwd;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timLogin', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timLogin', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timAck(\TimAckBean $ab)
  {
    $this->send_timAck($ab);
  }

  public function send_timAck(\TimAckBean $ab)
  {
    $args = new \ITim_timAck_args();
    $args->ab = $ab;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timAck', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timAck', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timPresence(\TimPBean $pbean)
  {
    $this->send_timPresence($pbean);
  }

  public function send_timPresence(\TimPBean $pbean)
  {
    $args = new \ITim_timPresence_args();
    $args->pbean = $pbean;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timPresence', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timPresence', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timMessage(\TimMBean $mbean)
  {
    $this->send_timMessage($mbean);
  }

  public function send_timMessage(\TimMBean $mbean)
  {
    $args = new \ITim_timMessage_args();
    $args->mbean = $mbean;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timMessage', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timMessage', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timPing($threadId)
  {
    $this->send_timPing($threadId);
  }

  public function send_timPing($threadId)
  {
    $args = new \ITim_timPing_args();
    $args->threadId = $threadId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timPing', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timPing', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timError(\TimError $e)
  {
    $this->send_timError($e);
  }

  public function send_timError(\TimError $e)
  {
    $args = new \ITim_timError_args();
    $args->e = $e;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timError', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timError', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timLogout()
  {
    $this->send_timLogout();
  }

  public function send_timLogout()
  {
    $args = new \ITim_timLogout_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timLogout', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timLogout', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timRegist(\Tid $tid, $auth)
  {
    $this->send_timRegist($tid, $auth);
  }

  public function send_timRegist(\Tid $tid, $auth)
  {
    $args = new \ITim_timRegist_args();
    $args->tid = $tid;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timRegist', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timRegist', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timRoser(\TimRoster $roster)
  {
    $this->send_timRoser($roster);
  }

  public function send_timRoser(\TimRoster $roster)
  {
    $args = new \ITim_timRoser_args();
    $args->roster = $roster;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timRoser', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timRoser', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timMessageList(\TimMBeanList $mbeanList)
  {
    $this->send_timMessageList($mbeanList);
  }

  public function send_timMessageList(\TimMBeanList $mbeanList)
  {
    $args = new \ITim_timMessageList_args();
    $args->mbeanList = $mbeanList;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timMessageList', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timMessageList', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timPresenceList(\TimPBeanList $pbeanList)
  {
    $this->send_timPresenceList($pbeanList);
  }

  public function send_timPresenceList(\TimPBeanList $pbeanList)
  {
    $args = new \ITim_timPresenceList_args();
    $args->pbeanList = $pbeanList;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timPresenceList', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timPresenceList', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timMessageIq(\TimMessageIq $timMsgIq, $iqType)
  {
    $this->send_timMessageIq($timMsgIq, $iqType);
  }

  public function send_timMessageIq(\TimMessageIq $timMsgIq, $iqType)
  {
    $args = new \ITim_timMessageIq_args();
    $args->timMsgIq = $timMsgIq;
    $args->iqType = $iqType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timMessageIq', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timMessageIq', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timMessageResult(\TimMBean $mbean)
  {
    $this->send_timMessageResult($mbean);
  }

  public function send_timMessageResult(\TimMBean $mbean)
  {
    $args = new \ITim_timMessageResult_args();
    $args->mbean = $mbean;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timMessageResult', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timMessageResult', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timProperty(\TimPropertyBean $tpb)
  {
    $this->send_timProperty($tpb);
  }

  public function send_timProperty(\TimPropertyBean $tpb)
  {
    $args = new \ITim_timProperty_args();
    $args->tpb = $tpb;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timProperty', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timProperty', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function timRemoteUserAuth(\Tid $tid, $pwd, \TimAuth $auth)
  {
    $this->send_timRemoteUserAuth($tid, $pwd, $auth);
    return $this->recv_timRemoteUserAuth();
  }

  public function send_timRemoteUserAuth(\Tid $tid, $pwd, \TimAuth $auth)
  {
    $args = new \ITim_timRemoteUserAuth_args();
    $args->tid = $tid;
    $args->pwd = $pwd;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timRemoteUserAuth', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timRemoteUserAuth', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timRemoteUserAuth()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ITim_timRemoteUserAuth_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ITim_timRemoteUserAuth_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("timRemoteUserAuth failed: unknown result");
  }

  public function timRemoteUserGet(\Tid $tid, \TimAuth $auth)
  {
    $this->send_timRemoteUserGet($tid, $auth);
    return $this->recv_timRemoteUserGet();
  }

  public function send_timRemoteUserGet(\Tid $tid, \TimAuth $auth)
  {
    $args = new \ITim_timRemoteUserGet_args();
    $args->tid = $tid;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timRemoteUserGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timRemoteUserGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timRemoteUserGet()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ITim_timRemoteUserGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ITim_timRemoteUserGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("timRemoteUserGet failed: unknown result");
  }

  public function timRemoteUserEdit(\Tid $tid, \TimUserBean $ub, \TimAuth $auth)
  {
    $this->send_timRemoteUserEdit($tid, $ub, $auth);
    return $this->recv_timRemoteUserEdit();
  }

  public function send_timRemoteUserEdit(\Tid $tid, \TimUserBean $ub, \TimAuth $auth)
  {
    $args = new \ITim_timRemoteUserEdit_args();
    $args->tid = $tid;
    $args->ub = $ub;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timRemoteUserEdit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timRemoteUserEdit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timRemoteUserEdit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ITim_timRemoteUserEdit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ITim_timRemoteUserEdit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("timRemoteUserEdit failed: unknown result");
  }

  public function timResponsePresence(\TimPBean $pbean, \TimAuth $auth)
  {
    $this->send_timResponsePresence($pbean, $auth);
    return $this->recv_timResponsePresence();
  }

  public function send_timResponsePresence(\TimPBean $pbean, \TimAuth $auth)
  {
    $args = new \ITim_timResponsePresence_args();
    $args->pbean = $pbean;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timResponsePresence', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timResponsePresence', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timResponsePresence()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ITim_timResponsePresence_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ITim_timResponsePresence_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("timResponsePresence failed: unknown result");
  }

  public function timResponseMessage(\TimMBean $mbean, \TimAuth $auth)
  {
    $this->send_timResponseMessage($mbean, $auth);
    return $this->recv_timResponseMessage();
  }

  public function send_timResponseMessage(\TimMBean $mbean, \TimAuth $auth)
  {
    $args = new \ITim_timResponseMessage_args();
    $args->mbean = $mbean;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timResponseMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timResponseMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timResponseMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ITim_timResponseMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ITim_timResponseMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("timResponseMessage failed: unknown result");
  }

  public function timResponseMessageIq(\TimMessageIq $timMsgIq, $iqType, \TimAuth $auth)
  {
    $this->send_timResponseMessageIq($timMsgIq, $iqType, $auth);
    return $this->recv_timResponseMessageIq();
  }

  public function send_timResponseMessageIq(\TimMessageIq $timMsgIq, $iqType, \TimAuth $auth)
  {
    $args = new \ITim_timResponseMessageIq_args();
    $args->timMsgIq = $timMsgIq;
    $args->iqType = $iqType;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timResponseMessageIq', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timResponseMessageIq', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timResponseMessageIq()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ITim_timResponseMessageIq_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ITim_timResponseMessageIq_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("timResponseMessageIq failed: unknown result");
  }

  public function timResponsePresenceList(\TimPBeanList $pbeanList, \TimAuth $auth)
  {
    $this->send_timResponsePresenceList($pbeanList, $auth);
    return $this->recv_timResponsePresenceList();
  }

  public function send_timResponsePresenceList(\TimPBeanList $pbeanList, \TimAuth $auth)
  {
    $args = new \ITim_timResponsePresenceList_args();
    $args->pbeanList = $pbeanList;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timResponsePresenceList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timResponsePresenceList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timResponsePresenceList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ITim_timResponsePresenceList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ITim_timResponsePresenceList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("timResponsePresenceList failed: unknown result");
  }

  public function timResponseMessageList(\TimMBeanList $mbeanList, \TimAuth $auth)
  {
    $this->send_timResponseMessageList($mbeanList, $auth);
    return $this->recv_timResponseMessageList();
  }

  public function send_timResponseMessageList(\TimMBeanList $mbeanList, \TimAuth $auth)
  {
    $args = new \ITim_timResponseMessageList_args();
    $args->mbeanList = $mbeanList;
    $args->auth = $auth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timResponseMessageList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timResponseMessageList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timResponseMessageList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ITim_timResponseMessageList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ITim_timResponseMessageList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("timResponseMessageList failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ITim_timStream_args {
  static $_TSPEC;

  /**
   * @var \TimParam
   */
  public $param = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'param',
          'type' => TType::STRUCT,
          'class' => '\TimParam',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['param'])) {
        $this->param = $vals['param'];
      }
    }
  }

  public function getName() {
    return 'ITim_timStream_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->param = new \TimParam();
            $xfer += $this->param->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timStream_args');
    if ($this->param !== null) {
      if (!is_object($this->param)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('param', TType::STRUCT, 1);
      $xfer += $this->param->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timStarttls_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ITim_timStarttls_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timStarttls_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timLogin_args {
  static $_TSPEC;

  /**
   * @var \Tid
   */
  public $tid = null;
  /**
   * @var string
   */
  public $pwd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        2 => array(
          'var' => 'pwd',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['pwd'])) {
        $this->pwd = $vals['pwd'];
      }
    }
  }

  public function getName() {
    return 'ITim_timLogin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tid = new \Tid();
            $xfer += $this->tid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timLogin_args');
    if ($this->tid !== null) {
      if (!is_object($this->tid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
      $xfer += $this->tid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pwd !== null) {
      $xfer += $output->writeFieldBegin('pwd', TType::STRING, 2);
      $xfer += $output->writeString($this->pwd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timAck_args {
  static $_TSPEC;

  /**
   * @var \TimAckBean
   */
  public $ab = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ab',
          'type' => TType::STRUCT,
          'class' => '\TimAckBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ab'])) {
        $this->ab = $vals['ab'];
      }
    }
  }

  public function getName() {
    return 'ITim_timAck_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ab = new \TimAckBean();
            $xfer += $this->ab->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timAck_args');
    if ($this->ab !== null) {
      if (!is_object($this->ab)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ab', TType::STRUCT, 1);
      $xfer += $this->ab->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timPresence_args {
  static $_TSPEC;

  /**
   * @var \TimPBean
   */
  public $pbean = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pbean',
          'type' => TType::STRUCT,
          'class' => '\TimPBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pbean'])) {
        $this->pbean = $vals['pbean'];
      }
    }
  }

  public function getName() {
    return 'ITim_timPresence_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->pbean = new \TimPBean();
            $xfer += $this->pbean->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timPresence_args');
    if ($this->pbean !== null) {
      if (!is_object($this->pbean)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pbean', TType::STRUCT, 1);
      $xfer += $this->pbean->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timMessage_args {
  static $_TSPEC;

  /**
   * @var \TimMBean
   */
  public $mbean = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mbean',
          'type' => TType::STRUCT,
          'class' => '\TimMBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mbean'])) {
        $this->mbean = $vals['mbean'];
      }
    }
  }

  public function getName() {
    return 'ITim_timMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->mbean = new \TimMBean();
            $xfer += $this->mbean->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timMessage_args');
    if ($this->mbean !== null) {
      if (!is_object($this->mbean)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mbean', TType::STRUCT, 1);
      $xfer += $this->mbean->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timPing_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $threadId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
    }
  }

  public function getName() {
    return 'ITim_timPing_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timPing_args');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timError_args {
  static $_TSPEC;

  /**
   * @var \TimError
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\TimError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'ITim_timError_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \TimError();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timError_args');
    if ($this->e !== null) {
      if (!is_object($this->e)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timLogout_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ITim_timLogout_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timLogout_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timRegist_args {
  static $_TSPEC;

  /**
   * @var \Tid
   */
  public $tid = null;
  /**
   * @var string
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        2 => array(
          'var' => 'auth',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timRegist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tid = new \Tid();
            $xfer += $this->tid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->auth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timRegist_args');
    if ($this->tid !== null) {
      if (!is_object($this->tid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
      $xfer += $this->tid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      $xfer += $output->writeFieldBegin('auth', TType::STRING, 2);
      $xfer += $output->writeString($this->auth);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timRoser_args {
  static $_TSPEC;

  /**
   * @var \TimRoster
   */
  public $roster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'roster',
          'type' => TType::STRUCT,
          'class' => '\TimRoster',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['roster'])) {
        $this->roster = $vals['roster'];
      }
    }
  }

  public function getName() {
    return 'ITim_timRoser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->roster = new \TimRoster();
            $xfer += $this->roster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timRoser_args');
    if ($this->roster !== null) {
      if (!is_object($this->roster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('roster', TType::STRUCT, 1);
      $xfer += $this->roster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timMessageList_args {
  static $_TSPEC;

  /**
   * @var \TimMBeanList
   */
  public $mbeanList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mbeanList',
          'type' => TType::STRUCT,
          'class' => '\TimMBeanList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mbeanList'])) {
        $this->mbeanList = $vals['mbeanList'];
      }
    }
  }

  public function getName() {
    return 'ITim_timMessageList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->mbeanList = new \TimMBeanList();
            $xfer += $this->mbeanList->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timMessageList_args');
    if ($this->mbeanList !== null) {
      if (!is_object($this->mbeanList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mbeanList', TType::STRUCT, 1);
      $xfer += $this->mbeanList->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timPresenceList_args {
  static $_TSPEC;

  /**
   * @var \TimPBeanList
   */
  public $pbeanList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pbeanList',
          'type' => TType::STRUCT,
          'class' => '\TimPBeanList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pbeanList'])) {
        $this->pbeanList = $vals['pbeanList'];
      }
    }
  }

  public function getName() {
    return 'ITim_timPresenceList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->pbeanList = new \TimPBeanList();
            $xfer += $this->pbeanList->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timPresenceList_args');
    if ($this->pbeanList !== null) {
      if (!is_object($this->pbeanList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pbeanList', TType::STRUCT, 1);
      $xfer += $this->pbeanList->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timMessageIq_args {
  static $_TSPEC;

  /**
   * @var \TimMessageIq
   */
  public $timMsgIq = null;
  /**
   * @var string
   */
  public $iqType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'timMsgIq',
          'type' => TType::STRUCT,
          'class' => '\TimMessageIq',
          ),
        2 => array(
          'var' => 'iqType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['timMsgIq'])) {
        $this->timMsgIq = $vals['timMsgIq'];
      }
      if (isset($vals['iqType'])) {
        $this->iqType = $vals['iqType'];
      }
    }
  }

  public function getName() {
    return 'ITim_timMessageIq_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->timMsgIq = new \TimMessageIq();
            $xfer += $this->timMsgIq->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iqType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timMessageIq_args');
    if ($this->timMsgIq !== null) {
      if (!is_object($this->timMsgIq)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('timMsgIq', TType::STRUCT, 1);
      $xfer += $this->timMsgIq->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iqType !== null) {
      $xfer += $output->writeFieldBegin('iqType', TType::STRING, 2);
      $xfer += $output->writeString($this->iqType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timMessageResult_args {
  static $_TSPEC;

  /**
   * @var \TimMBean
   */
  public $mbean = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mbean',
          'type' => TType::STRUCT,
          'class' => '\TimMBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mbean'])) {
        $this->mbean = $vals['mbean'];
      }
    }
  }

  public function getName() {
    return 'ITim_timMessageResult_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->mbean = new \TimMBean();
            $xfer += $this->mbean->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timMessageResult_args');
    if ($this->mbean !== null) {
      if (!is_object($this->mbean)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mbean', TType::STRUCT, 1);
      $xfer += $this->mbean->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timProperty_args {
  static $_TSPEC;

  /**
   * @var \TimPropertyBean
   */
  public $tpb = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tpb',
          'type' => TType::STRUCT,
          'class' => '\TimPropertyBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tpb'])) {
        $this->tpb = $vals['tpb'];
      }
    }
  }

  public function getName() {
    return 'ITim_timProperty_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tpb = new \TimPropertyBean();
            $xfer += $this->tpb->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timProperty_args');
    if ($this->tpb !== null) {
      if (!is_object($this->tpb)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tpb', TType::STRUCT, 1);
      $xfer += $this->tpb->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timRemoteUserAuth_args {
  static $_TSPEC;

  /**
   * @var \Tid
   */
  public $tid = null;
  /**
   * @var string
   */
  public $pwd = null;
  /**
   * @var \TimAuth
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        2 => array(
          'var' => 'pwd',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'auth',
          'type' => TType::STRUCT,
          'class' => '\TimAuth',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['pwd'])) {
        $this->pwd = $vals['pwd'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timRemoteUserAuth_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tid = new \Tid();
            $xfer += $this->tid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->auth = new \TimAuth();
            $xfer += $this->auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timRemoteUserAuth_args');
    if ($this->tid !== null) {
      if (!is_object($this->tid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
      $xfer += $this->tid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pwd !== null) {
      $xfer += $output->writeFieldBegin('pwd', TType::STRING, 2);
      $xfer += $output->writeString($this->pwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      if (!is_object($this->auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auth', TType::STRUCT, 3);
      $xfer += $this->auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timRemoteUserAuth_result {
  static $_TSPEC;

  /**
   * @var \TimRemoteUserBean
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TimRemoteUserBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ITim_timRemoteUserAuth_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TimRemoteUserBean();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timRemoteUserAuth_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timRemoteUserGet_args {
  static $_TSPEC;

  /**
   * @var \Tid
   */
  public $tid = null;
  /**
   * @var \TimAuth
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        2 => array(
          'var' => 'auth',
          'type' => TType::STRUCT,
          'class' => '\TimAuth',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timRemoteUserGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tid = new \Tid();
            $xfer += $this->tid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->auth = new \TimAuth();
            $xfer += $this->auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timRemoteUserGet_args');
    if ($this->tid !== null) {
      if (!is_object($this->tid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
      $xfer += $this->tid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      if (!is_object($this->auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auth', TType::STRUCT, 2);
      $xfer += $this->auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timRemoteUserGet_result {
  static $_TSPEC;

  /**
   * @var \TimRemoteUserBean
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TimRemoteUserBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ITim_timRemoteUserGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TimRemoteUserBean();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timRemoteUserGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timRemoteUserEdit_args {
  static $_TSPEC;

  /**
   * @var \Tid
   */
  public $tid = null;
  /**
   * @var \TimUserBean
   */
  public $ub = null;
  /**
   * @var \TimAuth
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        2 => array(
          'var' => 'ub',
          'type' => TType::STRUCT,
          'class' => '\TimUserBean',
          ),
        3 => array(
          'var' => 'auth',
          'type' => TType::STRUCT,
          'class' => '\TimAuth',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['ub'])) {
        $this->ub = $vals['ub'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timRemoteUserEdit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tid = new \Tid();
            $xfer += $this->tid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ub = new \TimUserBean();
            $xfer += $this->ub->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->auth = new \TimAuth();
            $xfer += $this->auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timRemoteUserEdit_args');
    if ($this->tid !== null) {
      if (!is_object($this->tid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
      $xfer += $this->tid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ub !== null) {
      if (!is_object($this->ub)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ub', TType::STRUCT, 2);
      $xfer += $this->ub->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      if (!is_object($this->auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auth', TType::STRUCT, 3);
      $xfer += $this->auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timRemoteUserEdit_result {
  static $_TSPEC;

  /**
   * @var \TimRemoteUserBean
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TimRemoteUserBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ITim_timRemoteUserEdit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TimRemoteUserBean();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timRemoteUserEdit_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponsePresence_args {
  static $_TSPEC;

  /**
   * @var \TimPBean
   */
  public $pbean = null;
  /**
   * @var \TimAuth
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pbean',
          'type' => TType::STRUCT,
          'class' => '\TimPBean',
          ),
        2 => array(
          'var' => 'auth',
          'type' => TType::STRUCT,
          'class' => '\TimAuth',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pbean'])) {
        $this->pbean = $vals['pbean'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponsePresence_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->pbean = new \TimPBean();
            $xfer += $this->pbean->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->auth = new \TimAuth();
            $xfer += $this->auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponsePresence_args');
    if ($this->pbean !== null) {
      if (!is_object($this->pbean)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pbean', TType::STRUCT, 1);
      $xfer += $this->pbean->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      if (!is_object($this->auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auth', TType::STRUCT, 2);
      $xfer += $this->auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponsePresence_result {
  static $_TSPEC;

  /**
   * @var \TimResponseBean
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TimResponseBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponsePresence_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TimResponseBean();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponsePresence_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponseMessage_args {
  static $_TSPEC;

  /**
   * @var \TimMBean
   */
  public $mbean = null;
  /**
   * @var \TimAuth
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mbean',
          'type' => TType::STRUCT,
          'class' => '\TimMBean',
          ),
        2 => array(
          'var' => 'auth',
          'type' => TType::STRUCT,
          'class' => '\TimAuth',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mbean'])) {
        $this->mbean = $vals['mbean'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponseMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->mbean = new \TimMBean();
            $xfer += $this->mbean->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->auth = new \TimAuth();
            $xfer += $this->auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponseMessage_args');
    if ($this->mbean !== null) {
      if (!is_object($this->mbean)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mbean', TType::STRUCT, 1);
      $xfer += $this->mbean->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      if (!is_object($this->auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auth', TType::STRUCT, 2);
      $xfer += $this->auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponseMessage_result {
  static $_TSPEC;

  /**
   * @var \TimResponseBean
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TimResponseBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponseMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TimResponseBean();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponseMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponseMessageIq_args {
  static $_TSPEC;

  /**
   * @var \TimMessageIq
   */
  public $timMsgIq = null;
  /**
   * @var string
   */
  public $iqType = null;
  /**
   * @var \TimAuth
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'timMsgIq',
          'type' => TType::STRUCT,
          'class' => '\TimMessageIq',
          ),
        2 => array(
          'var' => 'iqType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'auth',
          'type' => TType::STRUCT,
          'class' => '\TimAuth',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['timMsgIq'])) {
        $this->timMsgIq = $vals['timMsgIq'];
      }
      if (isset($vals['iqType'])) {
        $this->iqType = $vals['iqType'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponseMessageIq_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->timMsgIq = new \TimMessageIq();
            $xfer += $this->timMsgIq->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iqType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->auth = new \TimAuth();
            $xfer += $this->auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponseMessageIq_args');
    if ($this->timMsgIq !== null) {
      if (!is_object($this->timMsgIq)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('timMsgIq', TType::STRUCT, 1);
      $xfer += $this->timMsgIq->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iqType !== null) {
      $xfer += $output->writeFieldBegin('iqType', TType::STRING, 2);
      $xfer += $output->writeString($this->iqType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      if (!is_object($this->auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auth', TType::STRUCT, 3);
      $xfer += $this->auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponseMessageIq_result {
  static $_TSPEC;

  /**
   * @var \TimMBeanList
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TimMBeanList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponseMessageIq_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TimMBeanList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponseMessageIq_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponsePresenceList_args {
  static $_TSPEC;

  /**
   * @var \TimPBeanList
   */
  public $pbeanList = null;
  /**
   * @var \TimAuth
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pbeanList',
          'type' => TType::STRUCT,
          'class' => '\TimPBeanList',
          ),
        2 => array(
          'var' => 'auth',
          'type' => TType::STRUCT,
          'class' => '\TimAuth',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pbeanList'])) {
        $this->pbeanList = $vals['pbeanList'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponsePresenceList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->pbeanList = new \TimPBeanList();
            $xfer += $this->pbeanList->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->auth = new \TimAuth();
            $xfer += $this->auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponsePresenceList_args');
    if ($this->pbeanList !== null) {
      if (!is_object($this->pbeanList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pbeanList', TType::STRUCT, 1);
      $xfer += $this->pbeanList->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      if (!is_object($this->auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auth', TType::STRUCT, 2);
      $xfer += $this->auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponsePresenceList_result {
  static $_TSPEC;

  /**
   * @var \TimResponseBean
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TimResponseBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponsePresenceList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TimResponseBean();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponsePresenceList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponseMessageList_args {
  static $_TSPEC;

  /**
   * @var \TimMBeanList
   */
  public $mbeanList = null;
  /**
   * @var \TimAuth
   */
  public $auth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mbeanList',
          'type' => TType::STRUCT,
          'class' => '\TimMBeanList',
          ),
        2 => array(
          'var' => 'auth',
          'type' => TType::STRUCT,
          'class' => '\TimAuth',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mbeanList'])) {
        $this->mbeanList = $vals['mbeanList'];
      }
      if (isset($vals['auth'])) {
        $this->auth = $vals['auth'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponseMessageList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->mbeanList = new \TimMBeanList();
            $xfer += $this->mbeanList->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->auth = new \TimAuth();
            $xfer += $this->auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponseMessageList_args');
    if ($this->mbeanList !== null) {
      if (!is_object($this->mbeanList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mbeanList', TType::STRUCT, 1);
      $xfer += $this->mbeanList->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auth !== null) {
      if (!is_object($this->auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auth', TType::STRUCT, 2);
      $xfer += $this->auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ITim_timResponseMessageList_result {
  static $_TSPEC;

  /**
   * @var \TimResponseBean
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TimResponseBean',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ITim_timResponseMessageList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TimResponseBean();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ITim_timResponseMessageList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


