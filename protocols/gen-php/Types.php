<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class TimError {
  static $_TSPEC;

  /**
   * 错误码
   * 
   * @var int
   */
  public $errCode = null;
  /**
   * 错误内容
   * 
   * @var string
   */
  public $errMsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errMsg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errCode'])) {
        $this->errCode = $vals['errCode'];
      }
      if (isset($vals['errMsg'])) {
        $this->errMsg = $vals['errMsg'];
      }
    }
  }

  public function getName() {
    return 'TimError';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimError');
    if ($this->errCode !== null) {
      $xfer += $output->writeFieldBegin('errCode', TType::I32, 1);
      $xfer += $output->writeI32($this->errCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errMsg !== null) {
      $xfer += $output->writeFieldBegin('errMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errMsg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimNode {
  static $_TSPEC;

  /**
   * 键
   * 
   * @var string
   */
  public $key = null;
  /**
   * 值
   * 
   * @var string
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'TimNode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimNode');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimAckBean {
  static $_TSPEC;

  /**
   * id，返回所要回执协议的线程id
   * 
   * @var string
   */
  public $id = null;
  /**
   * 类型，自定义 如：ping，message等
   * 
   * @var string
   */
  public $ackType = null;
  /**
   * 状态，如成功，失败等
   * 
   * @var string
   */
  public $ackStatus = null;
  /**
   * 附加信息
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * 错误信息
   * 
   * @var \TimError
   */
  public $err = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ackType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ackStatus',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        5 => array(
          'var' => 'err',
          'type' => TType::STRUCT,
          'class' => '\TimError',
          ),
        6 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['ackType'])) {
        $this->ackType = $vals['ackType'];
      }
      if (isset($vals['ackStatus'])) {
        $this->ackStatus = $vals['ackStatus'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['err'])) {
        $this->err = $vals['err'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimAckBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ackType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ackStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \TimNode();
              $xfer += $elem5->read($input);
              $this->extraList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->err = new \TimError();
            $xfer += $this->err->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $key11 = '';
              $val12 = '';
              $xfer += $input->readString($key11);
              $xfer += $input->readString($val12);
              $this->extraMap[$key11] = $val12;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimAckBean');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ackType !== null) {
      $xfer += $output->writeFieldBegin('ackType', TType::STRING, 2);
      $xfer += $output->writeString($this->ackType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ackStatus !== null) {
      $xfer += $output->writeFieldBegin('ackStatus', TType::STRING, 3);
      $xfer += $output->writeString($this->ackStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err !== null) {
      if (!is_object($this->err)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('err', TType::STRUCT, 5);
      $xfer += $this->err->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter14 => $viter15)
          {
            $xfer += $output->writeString($kiter14);
            $xfer += $output->writeString($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimHBean {
  static $_TSPEC;

  /**
   * 渠道
   * 
   * @var int
   */
  public $chl = null;
  /**
   * 平台
   * 
   * @var int
   */
  public $platform = null;
  /**
   * version 客户端协议版本
   * 
   * @var int
   */
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'chl',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['chl'])) {
        $this->chl = $vals['chl'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'TimHBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->chl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimHBean');
    if ($this->chl !== null) {
      $xfer += $output->writeFieldBegin('chl', TType::I32, 1);
      $xfer += $output->writeI32($this->chl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 2);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I16, 3);
      $xfer += $output->writeI16($this->version);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimParam {
  static $_TSPEC;

  /**
   * 服务器时间
   * 
   * @var string
   */
  public $timestamp = null;
  /**
   * 版本
   * 
   * @var int
   */
  public $version = null;
  /**
   * 语言
   * 
   * @var string
   */
  public $lang = null;
  /**
   * 附加信息
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * @var array
   */
  public $extraMap = null;
  /**
   * 消息合流
   * 
   * @var string
   */
  public $interflow = null;
  /**
   * tls
   * 
   * @var string
   */
  public $tls = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'version',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'lang',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        5 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'interflow',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'tls',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['lang'])) {
        $this->lang = $vals['lang'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
      if (isset($vals['interflow'])) {
        $this->interflow = $vals['interflow'];
      }
      if (isset($vals['tls'])) {
        $this->tls = $vals['tls'];
      }
    }
  }

  public function getName() {
    return 'TimParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lang);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = new \TimNode();
              $xfer += $elem21->read($input);
              $this->extraList []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size22 = 0;
            $_ktype23 = 0;
            $_vtype24 = 0;
            $xfer += $input->readMapBegin($_ktype23, $_vtype24, $_size22);
            for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
            {
              $key27 = '';
              $val28 = '';
              $xfer += $input->readString($key27);
              $xfer += $input->readString($val28);
              $this->extraMap[$key27] = $val28;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->interflow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tls);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimParam');
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 1);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I16, 2);
      $xfer += $output->writeI16($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lang !== null) {
      $xfer += $output->writeFieldBegin('lang', TType::STRING, 3);
      $xfer += $output->writeString($this->lang);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter29)
          {
            $xfer += $iter29->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter30 => $viter31)
          {
            $xfer += $output->writeString($kiter30);
            $xfer += $output->writeString($viter31);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interflow !== null) {
      $xfer += $output->writeFieldBegin('interflow', TType::STRING, 6);
      $xfer += $output->writeString($this->interflow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tls !== null) {
      $xfer += $output->writeFieldBegin('tls', TType::STRING, 7);
      $xfer += $output->writeString($this->tls);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimTime {
  static $_TSPEC;

  /**
   * 时间戳    (毫秒)
   * 
   * @var string
   */
  public $timestamp = null;
  /**
   * 格式化时间
   * 
   * @var string
   */
  public $formattime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'formattime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['formattime'])) {
        $this->formattime = $vals['formattime'];
      }
    }
  }

  public function getName() {
    return 'TimTime';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->formattime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimTime');
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 1);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->formattime !== null) {
      $xfer += $output->writeFieldBegin('formattime', TType::STRING, 2);
      $xfer += $output->writeString($this->formattime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimArea {
  static $_TSPEC;

  /**
   * 国家
   * 
   * @var string
   */
  public $country = null;
  /**
   * 省
   * 
   * @var string
   */
  public $province = null;
  /**
   * 市
   * 
   * @var string
   */
  public $city = null;
  /**
   * 附加信息：如区，镇，乡等
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        5 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimArea';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size32 = 0;
            $_etype35 = 0;
            $xfer += $input->readListBegin($_etype35, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $elem37 = null;
              $elem37 = new \TimNode();
              $xfer += $elem37->read($input);
              $this->extraList []= $elem37;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size38 = 0;
            $_ktype39 = 0;
            $_vtype40 = 0;
            $xfer += $input->readMapBegin($_ktype39, $_vtype40, $_size38);
            for ($_i42 = 0; $_i42 < $_size38; ++$_i42)
            {
              $key43 = '';
              $val44 = '';
              $xfer += $input->readString($key43);
              $xfer += $input->readString($val44);
              $this->extraMap[$key43] = $val44;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimArea');
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 1);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 2);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 3);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter45)
          {
            $xfer += $iter45->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter46 => $viter47)
          {
            $xfer += $output->writeString($kiter46);
            $xfer += $output->writeString($viter47);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tid {
  static $_TSPEC;

  /**
   * 登陆名   用户登录号，房间号等
   * 
   * @var string
   */
  public $name = null;
  /**
   * 域名 用于区分渠道等 appid，appsecret
   * 
   * @var string
   */
  public $domain = null;
  /**
   * 系统 自行约定 如 ： 1IOS，2android，3H5，4WEB 等
   * 
   * @var string
   */
  public $resource = null;
  /**
   * normal，group
   * 
   * @var string
   */
  public $type = null;
  /**
   * 附加信息：如传递客户端信息 iphone6，xiaomi，huawei等
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'domain',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'resource',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        6 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['domain'])) {
        $this->domain = $vals['domain'];
      }
      if (isset($vals['resource'])) {
        $this->resource = $vals['resource'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'Tid';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $elem53 = new \TimNode();
              $xfer += $elem53->read($input);
              $this->extraList []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size54 = 0;
            $_ktype55 = 0;
            $_vtype56 = 0;
            $xfer += $input->readMapBegin($_ktype55, $_vtype56, $_size54);
            for ($_i58 = 0; $_i58 < $_size54; ++$_i58)
            {
              $key59 = '';
              $val60 = '';
              $xfer += $input->readString($key59);
              $xfer += $input->readString($val60);
              $this->extraMap[$key59] = $val60;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tid');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain !== null) {
      $xfer += $output->writeFieldBegin('domain', TType::STRING, 2);
      $xfer += $output->writeString($this->domain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resource !== null) {
      $xfer += $output->writeFieldBegin('resource', TType::STRING, 3);
      $xfer += $output->writeString($this->resource);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 4);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter61)
          {
            $xfer += $iter61->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter62 => $viter63)
          {
            $xfer += $output->writeString($kiter62);
            $xfer += $output->writeString($viter63);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimUserBean {
  static $_TSPEC;

  /**
   * 用户bean
   * 
   * @var \Tid
   */
  public $tid = null;
  /**
   * 昵称
   * 
   * @var string
   */
  public $nickname = null;
  /**
   * 备注名称
   * 
   * @var string
   */
  public $remarkname = null;
  /**
   * 生日     2000-01-01
   * 
   * @var string
   */
  public $brithday = null;
  /**
   * 性别  自行约定 如 ：  0不知，1男，2女
   * 
   * @var int
   */
  public $gender = null;
  /**
   * 头像地址 http://xxx.jpg
   * 
   * @var string
   */
  public $headurl = null;
  /**
   * 地区
   * 
   * @var \TimArea
   */
  public $area = null;
  /**
   * 头像
   * 
   * @var string
   */
  public $headbyte = null;
  /**
   * 其他图片
   * 
   * @var string[]
   */
  public $photoBytes = null;
  /**
   * 扩展字段
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        2 => array(
          'var' => 'nickname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'remarkname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'brithday',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'gender',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'headurl',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'area',
          'type' => TType::STRUCT,
          'class' => '\TimArea',
          ),
        8 => array(
          'var' => 'headbyte',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'photoBytes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        11 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['nickname'])) {
        $this->nickname = $vals['nickname'];
      }
      if (isset($vals['remarkname'])) {
        $this->remarkname = $vals['remarkname'];
      }
      if (isset($vals['brithday'])) {
        $this->brithday = $vals['brithday'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['headurl'])) {
        $this->headurl = $vals['headurl'];
      }
      if (isset($vals['area'])) {
        $this->area = $vals['area'];
      }
      if (isset($vals['headbyte'])) {
        $this->headbyte = $vals['headbyte'];
      }
      if (isset($vals['photoBytes'])) {
        $this->photoBytes = $vals['photoBytes'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimUserBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tid = new \Tid();
            $xfer += $this->tid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remarkname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->brithday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->headurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->area = new \TimArea();
            $xfer += $this->area->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->headbyte);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->photoBytes = array();
            $_size64 = 0;
            $_etype67 = 0;
            $xfer += $input->readListBegin($_etype67, $_size64);
            for ($_i68 = 0; $_i68 < $_size64; ++$_i68)
            {
              $elem69 = null;
              $xfer += $input->readString($elem69);
              $this->photoBytes []= $elem69;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \TimNode();
              $xfer += $elem75->read($input);
              $this->extraList []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size76 = 0;
            $_ktype77 = 0;
            $_vtype78 = 0;
            $xfer += $input->readMapBegin($_ktype77, $_vtype78, $_size76);
            for ($_i80 = 0; $_i80 < $_size76; ++$_i80)
            {
              $key81 = '';
              $val82 = '';
              $xfer += $input->readString($key81);
              $xfer += $input->readString($val82);
              $this->extraMap[$key81] = $val82;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimUserBean');
    if ($this->tid !== null) {
      if (!is_object($this->tid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
      $xfer += $this->tid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickname !== null) {
      $xfer += $output->writeFieldBegin('nickname', TType::STRING, 2);
      $xfer += $output->writeString($this->nickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remarkname !== null) {
      $xfer += $output->writeFieldBegin('remarkname', TType::STRING, 3);
      $xfer += $output->writeString($this->remarkname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brithday !== null) {
      $xfer += $output->writeFieldBegin('brithday', TType::STRING, 4);
      $xfer += $output->writeString($this->brithday);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I16, 5);
      $xfer += $output->writeI16($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->headurl !== null) {
      $xfer += $output->writeFieldBegin('headurl', TType::STRING, 6);
      $xfer += $output->writeString($this->headurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area !== null) {
      if (!is_object($this->area)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('area', TType::STRUCT, 7);
      $xfer += $this->area->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->headbyte !== null) {
      $xfer += $output->writeFieldBegin('headbyte', TType::STRING, 8);
      $xfer += $output->writeString($this->headbyte);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoBytes !== null) {
      if (!is_array($this->photoBytes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('photoBytes', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->photoBytes));
        {
          foreach ($this->photoBytes as $iter83)
          {
            $xfer += $output->writeString($iter83);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter84)
          {
            $xfer += $iter84->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter85 => $viter86)
          {
            $xfer += $output->writeString($kiter85);
            $xfer += $output->writeString($viter86);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimRoom {
  static $_TSPEC;

  /**
   * 房间Tid
   * 
   * @var \Tid
   */
  public $tid = null;
  /**
   * 创建人Tid
   * 
   * @var \Tid
   */
  public $founderTid = null;
  /**
   * 主持人Tid
   * 
   * @var \Tid[]
   */
  public $HostsTid = null;
  /**
   * memberTid
   * 
   * @var \Tid[]
   */
  public $membersTid = null;
  /**
   * 头像地址 http://xxx.jpg
   * 
   * @var string
   */
  public $headurl = null;
  /**
   * 房间名称
   * 
   * @var string
   */
  public $roomName = null;
  /**
   * 房间说明
   * 
   * @var string
   */
  public $desc = null;
  /**
   * 房间创建时间
   * 
   * @var \TimTime
   */
  public $createTime = null;
  /**
   * 扩展字段
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        2 => array(
          'var' => 'founderTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        3 => array(
          'var' => 'HostsTid',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Tid',
            ),
          ),
        4 => array(
          'var' => 'membersTid',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Tid',
            ),
          ),
        5 => array(
          'var' => 'headurl',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'roomName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'createTime',
          'type' => TType::STRUCT,
          'class' => '\TimTime',
          ),
        9 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        10 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['founderTid'])) {
        $this->founderTid = $vals['founderTid'];
      }
      if (isset($vals['HostsTid'])) {
        $this->HostsTid = $vals['HostsTid'];
      }
      if (isset($vals['membersTid'])) {
        $this->membersTid = $vals['membersTid'];
      }
      if (isset($vals['headurl'])) {
        $this->headurl = $vals['headurl'];
      }
      if (isset($vals['roomName'])) {
        $this->roomName = $vals['roomName'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimRoom';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tid = new \Tid();
            $xfer += $this->tid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->founderTid = new \Tid();
            $xfer += $this->founderTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->HostsTid = array();
            $_size87 = 0;
            $_etype90 = 0;
            $xfer += $input->readListBegin($_etype90, $_size87);
            for ($_i91 = 0; $_i91 < $_size87; ++$_i91)
            {
              $elem92 = null;
              $elem92 = new \Tid();
              $xfer += $elem92->read($input);
              $this->HostsTid []= $elem92;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->membersTid = array();
            $_size93 = 0;
            $_etype96 = 0;
            $xfer += $input->readListBegin($_etype96, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $elem98 = null;
              $elem98 = new \Tid();
              $xfer += $elem98->read($input);
              $this->membersTid []= $elem98;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->headurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->roomName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->createTime = new \TimTime();
            $xfer += $this->createTime->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size99 = 0;
            $_etype102 = 0;
            $xfer += $input->readListBegin($_etype102, $_size99);
            for ($_i103 = 0; $_i103 < $_size99; ++$_i103)
            {
              $elem104 = null;
              $elem104 = new \TimNode();
              $xfer += $elem104->read($input);
              $this->extraList []= $elem104;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size105 = 0;
            $_ktype106 = 0;
            $_vtype107 = 0;
            $xfer += $input->readMapBegin($_ktype106, $_vtype107, $_size105);
            for ($_i109 = 0; $_i109 < $_size105; ++$_i109)
            {
              $key110 = '';
              $val111 = '';
              $xfer += $input->readString($key110);
              $xfer += $input->readString($val111);
              $this->extraMap[$key110] = $val111;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimRoom');
    if ($this->tid !== null) {
      if (!is_object($this->tid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
      $xfer += $this->tid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->founderTid !== null) {
      if (!is_object($this->founderTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('founderTid', TType::STRUCT, 2);
      $xfer += $this->founderTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HostsTid !== null) {
      if (!is_array($this->HostsTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('HostsTid', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->HostsTid));
        {
          foreach ($this->HostsTid as $iter112)
          {
            $xfer += $iter112->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->membersTid !== null) {
      if (!is_array($this->membersTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('membersTid', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->membersTid));
        {
          foreach ($this->membersTid as $iter113)
          {
            $xfer += $iter113->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->headurl !== null) {
      $xfer += $output->writeFieldBegin('headurl', TType::STRING, 5);
      $xfer += $output->writeString($this->headurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roomName !== null) {
      $xfer += $output->writeFieldBegin('roomName', TType::STRING, 6);
      $xfer += $output->writeString($this->roomName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      if (!is_object($this->createTime)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('createTime', TType::STRUCT, 8);
      $xfer += $this->createTime->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter114)
          {
            $xfer += $iter114->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter115 => $viter116)
          {
            $xfer += $output->writeString($kiter115);
            $xfer += $output->writeString($viter116);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimPBean {
  static $_TSPEC;

  /**
   * 标识
   * 
   * @var string
   */
  public $threadId = null;
  /**
   * @var \Tid
   */
  public $fromTid = null;
  /**
   * @var \Tid
   */
  public $toTid = null;
  /**
   * subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
   * 
   * @var string
   */
  public $status = null;
  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   * 
   * @var string
   */
  public $type = null;
  /**
   * 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
   * 
   * @var int
   */
  public $priority = null;
  /**
   * chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
   * 
   * @var string
   */
  public $show = null;
  /**
   * 成员Tid   群聊时信息发送者Tid
   * 
   * @var \Tid
   */
  public $leaguerTid = null;
  /**
   * 扩展字段
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * 错误码
   * 
   * @var \TimError
   */
  public $error = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fromTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        3 => array(
          'var' => 'toTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'priority',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'show',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'leaguerTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        9 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        10 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\TimError',
          ),
        11 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['fromTid'])) {
        $this->fromTid = $vals['fromTid'];
      }
      if (isset($vals['toTid'])) {
        $this->toTid = $vals['toTid'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
      if (isset($vals['show'])) {
        $this->show = $vals['show'];
      }
      if (isset($vals['leaguerTid'])) {
        $this->leaguerTid = $vals['leaguerTid'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimPBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->fromTid = new \Tid();
            $xfer += $this->fromTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->toTid = new \Tid();
            $xfer += $this->toTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->show);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->leaguerTid = new \Tid();
            $xfer += $this->leaguerTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size117 = 0;
            $_etype120 = 0;
            $xfer += $input->readListBegin($_etype120, $_size117);
            for ($_i121 = 0; $_i121 < $_size117; ++$_i121)
            {
              $elem122 = null;
              $elem122 = new \TimNode();
              $xfer += $elem122->read($input);
              $this->extraList []= $elem122;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->error = new \TimError();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size123 = 0;
            $_ktype124 = 0;
            $_vtype125 = 0;
            $xfer += $input->readMapBegin($_ktype124, $_vtype125, $_size123);
            for ($_i127 = 0; $_i127 < $_size123; ++$_i127)
            {
              $key128 = '';
              $val129 = '';
              $xfer += $input->readString($key128);
              $xfer += $input->readString($val129);
              $this->extraMap[$key128] = $val129;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimPBean');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromTid !== null) {
      if (!is_object($this->fromTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fromTid', TType::STRUCT, 2);
      $xfer += $this->fromTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toTid !== null) {
      if (!is_object($this->toTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('toTid', TType::STRUCT, 3);
      $xfer += $this->toTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 4);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 5);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I32, 6);
      $xfer += $output->writeI32($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show !== null) {
      $xfer += $output->writeFieldBegin('show', TType::STRING, 7);
      $xfer += $output->writeString($this->show);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leaguerTid !== null) {
      if (!is_object($this->leaguerTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('leaguerTid', TType::STRUCT, 8);
      $xfer += $this->leaguerTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter130)
          {
            $xfer += $iter130->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 10);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter131 => $viter132)
          {
            $xfer += $output->writeString($kiter131);
            $xfer += $output->writeString($viter132);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimMBean {
  static $_TSPEC;

  /**
   * 线程id
   * 
   * @var string
   */
  public $threadId = null;
  /**
   * 消息id号
   * 
   * @var string
   */
  public $mid = null;
  /**
   * 来源Tid
   * 
   * @var \Tid
   */
  public $fromTid = null;
  /**
   * 目标Tid
   * 
   * @var \Tid
   */
  public $toTid = null;
  /**
   * 信息内容
   * 
   * @var string
   */
  public $body = null;
  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   * 
   * @var string
   */
  public $type = null;
  /**
   * 消息类型  1 文字 2 图片 3 语音 4视频 5混合
   * 
   * @var int
   */
  public $msgType = null;
  /**
   * 是否离线信息
   * 
   * @var \TimTime
   */
  public $offline = null;
  /**
   * 成员Tid   群聊时信息发送者Tid
   * 
   * @var \Tid
   */
  public $leaguerTid = null;
  /**
   * 扩展字段
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * 服务器发送信息时间戳(毫秒)
   * 
   * @var string
   */
  public $timestamp = null;
  /**
   * 错误码
   * 
   * @var \TimError
   */
  public $error = null;
  /**
   * @var array
   */
  public $extraMap = null;
  /**
   * 0未读  1已读
   * 
   * @var int
   */
  public $readstatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fromTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        4 => array(
          'var' => 'toTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        5 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'msgType',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'offline',
          'type' => TType::STRUCT,
          'class' => '\TimTime',
          ),
        9 => array(
          'var' => 'leaguerTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        10 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        11 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\TimError',
          ),
        13 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        14 => array(
          'var' => 'readstatus',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['fromTid'])) {
        $this->fromTid = $vals['fromTid'];
      }
      if (isset($vals['toTid'])) {
        $this->toTid = $vals['toTid'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['msgType'])) {
        $this->msgType = $vals['msgType'];
      }
      if (isset($vals['offline'])) {
        $this->offline = $vals['offline'];
      }
      if (isset($vals['leaguerTid'])) {
        $this->leaguerTid = $vals['leaguerTid'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
      if (isset($vals['readstatus'])) {
        $this->readstatus = $vals['readstatus'];
      }
    }
  }

  public function getName() {
    return 'TimMBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->fromTid = new \Tid();
            $xfer += $this->fromTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->toTid = new \Tid();
            $xfer += $this->toTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->msgType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->offline = new \TimTime();
            $xfer += $this->offline->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->leaguerTid = new \Tid();
            $xfer += $this->leaguerTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size133 = 0;
            $_etype136 = 0;
            $xfer += $input->readListBegin($_etype136, $_size133);
            for ($_i137 = 0; $_i137 < $_size133; ++$_i137)
            {
              $elem138 = null;
              $elem138 = new \TimNode();
              $xfer += $elem138->read($input);
              $this->extraList []= $elem138;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->error = new \TimError();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size139 = 0;
            $_ktype140 = 0;
            $_vtype141 = 0;
            $xfer += $input->readMapBegin($_ktype140, $_vtype141, $_size139);
            for ($_i143 = 0; $_i143 < $_size139; ++$_i143)
            {
              $key144 = '';
              $val145 = '';
              $xfer += $input->readString($key144);
              $xfer += $input->readString($val145);
              $this->extraMap[$key144] = $val145;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->readstatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimMBean');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromTid !== null) {
      if (!is_object($this->fromTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fromTid', TType::STRUCT, 3);
      $xfer += $this->fromTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toTid !== null) {
      if (!is_object($this->toTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('toTid', TType::STRUCT, 4);
      $xfer += $this->toTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 5);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 6);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgType !== null) {
      $xfer += $output->writeFieldBegin('msgType', TType::I16, 7);
      $xfer += $output->writeI16($this->msgType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offline !== null) {
      if (!is_object($this->offline)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('offline', TType::STRUCT, 8);
      $xfer += $this->offline->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leaguerTid !== null) {
      if (!is_object($this->leaguerTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('leaguerTid', TType::STRUCT, 9);
      $xfer += $this->leaguerTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter146)
          {
            $xfer += $iter146->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 11);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 12);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 13);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter147 => $viter148)
          {
            $xfer += $output->writeString($kiter147);
            $xfer += $output->writeString($viter148);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->readstatus !== null) {
      $xfer += $output->writeFieldBegin('readstatus', TType::I16, 14);
      $xfer += $output->writeI16($this->readstatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimIqBean {
  static $_TSPEC;

  /**
   * 线程id
   * 
   * @var string
   */
  public $threadId = null;
  /**
   * @var \Tid
   */
  public $fromTid = null;
  /**
   * @var \Tid
   */
  public $toTid = null;
  /**
   * Get :获取当前域值。类似于http get方法
   * Set :设置或替换get查询的值。类似于http put方法。
   * Result :说明成功的响应了先前的查询。类似于http状态码200。
   * Error: 查询和响应中出现的错误。
   * 
   * @var string
   */
  public $type = null;
  /**
   * 扩展字段
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * 错误码
   * 
   * @var \TimError
   */
  public $error = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fromTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        3 => array(
          'var' => 'toTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        6 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\TimError',
          ),
        7 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['fromTid'])) {
        $this->fromTid = $vals['fromTid'];
      }
      if (isset($vals['toTid'])) {
        $this->toTid = $vals['toTid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimIqBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->fromTid = new \Tid();
            $xfer += $this->fromTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->toTid = new \Tid();
            $xfer += $this->toTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size149 = 0;
            $_etype152 = 0;
            $xfer += $input->readListBegin($_etype152, $_size149);
            for ($_i153 = 0; $_i153 < $_size149; ++$_i153)
            {
              $elem154 = null;
              $elem154 = new \TimNode();
              $xfer += $elem154->read($input);
              $this->extraList []= $elem154;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->error = new \TimError();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size155 = 0;
            $_ktype156 = 0;
            $_vtype157 = 0;
            $xfer += $input->readMapBegin($_ktype156, $_vtype157, $_size155);
            for ($_i159 = 0; $_i159 < $_size155; ++$_i159)
            {
              $key160 = '';
              $val161 = '';
              $xfer += $input->readString($key160);
              $xfer += $input->readString($val161);
              $this->extraMap[$key160] = $val161;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimIqBean');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromTid !== null) {
      if (!is_object($this->fromTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fromTid', TType::STRUCT, 2);
      $xfer += $this->fromTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toTid !== null) {
      if (!is_object($this->toTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('toTid', TType::STRUCT, 3);
      $xfer += $this->toTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 4);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter162)
          {
            $xfer += $iter162->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 6);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter163 => $viter164)
          {
            $xfer += $output->writeString($kiter163);
            $xfer += $output->writeString($viter164);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimRoster {
  static $_TSPEC;

  /**
   * none表示用户和contact之前没有任何的关系（虽然在server的buddy list中存在）
   * to表示用户能看到contact的presence，但是contact看不到用户的Presence
   * from和to的含义相反，指用户看不到contact的presence，但是contact可以看到
   * both表示相关之间都能看到对方的presence
   * 
   * @var string
   */
  public $subscription = null;
  /**
   * @var \Tid
   */
  public $tid = null;
  /**
   * 用户名
   * 
   * @var string
   */
  public $name = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'subscription',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['subscription'])) {
        $this->subscription = $vals['subscription'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimRoster';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subscription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->tid = new \Tid();
            $xfer += $this->tid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size165 = 0;
            $_ktype166 = 0;
            $_vtype167 = 0;
            $xfer += $input->readMapBegin($_ktype166, $_vtype167, $_size165);
            for ($_i169 = 0; $_i169 < $_size165; ++$_i169)
            {
              $key170 = '';
              $val171 = '';
              $xfer += $input->readString($key170);
              $xfer += $input->readString($val171);
              $this->extraMap[$key170] = $val171;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimRoster');
    if ($this->subscription !== null) {
      $xfer += $output->writeFieldBegin('subscription', TType::STRING, 1);
      $xfer += $output->writeString($this->subscription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      if (!is_object($this->tid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 2);
      $xfer += $this->tid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter172 => $viter173)
          {
            $xfer += $output->writeString($kiter172);
            $xfer += $output->writeString($viter173);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimRemoteUserBean {
  static $_TSPEC;

  /**
   * 错误码
   * 
   * @var \TimError
   */
  public $error = null;
  /**
   * 远程用户信息
   * 
   * @var \TimUserBean
   */
  public $ub = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\TimError',
          ),
        2 => array(
          'var' => 'ub',
          'type' => TType::STRUCT,
          'class' => '\TimUserBean',
          ),
        3 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['ub'])) {
        $this->ub = $vals['ub'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimRemoteUserBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->error = new \TimError();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ub = new \TimUserBean();
            $xfer += $this->ub->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size174 = 0;
            $_ktype175 = 0;
            $_vtype176 = 0;
            $xfer += $input->readMapBegin($_ktype175, $_vtype176, $_size174);
            for ($_i178 = 0; $_i178 < $_size174; ++$_i178)
            {
              $key179 = '';
              $val180 = '';
              $xfer += $input->readString($key179);
              $xfer += $input->readString($val180);
              $this->extraMap[$key179] = $val180;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimRemoteUserBean');
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ub !== null) {
      if (!is_object($this->ub)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ub', TType::STRUCT, 2);
      $xfer += $this->ub->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter181 => $viter182)
          {
            $xfer += $output->writeString($kiter181);
            $xfer += $output->writeString($viter182);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimRemoteRoom {
  static $_TSPEC;

  /**
   * 错误码
   * 
   * @var \TimError
   */
  public $error = null;
  /**
   * 远程房间信息
   * 
   * @var \TimRoom
   */
  public $room = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\TimError',
          ),
        2 => array(
          'var' => 'room',
          'type' => TType::STRUCT,
          'class' => '\TimRoom',
          ),
        3 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['room'])) {
        $this->room = $vals['room'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimRemoteRoom';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->error = new \TimError();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->room = new \TimRoom();
            $xfer += $this->room->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size183 = 0;
            $_ktype184 = 0;
            $_vtype185 = 0;
            $xfer += $input->readMapBegin($_ktype184, $_vtype185, $_size183);
            for ($_i187 = 0; $_i187 < $_size183; ++$_i187)
            {
              $key188 = '';
              $val189 = '';
              $xfer += $input->readString($key188);
              $xfer += $input->readString($val189);
              $this->extraMap[$key188] = $val189;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimRemoteRoom');
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->room !== null) {
      if (!is_object($this->room)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('room', TType::STRUCT, 2);
      $xfer += $this->room->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter190 => $viter191)
          {
            $xfer += $output->writeString($kiter190);
            $xfer += $output->writeString($viter191);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimResponseBean {
  static $_TSPEC;

  /**
   * @var string
   */
  public $threadId = null;
  /**
   * 错误码
   * 
   * @var \TimError
   */
  public $error = null;
  /**
   * 附加信息
   * 
   * @var \TimNode[]
   */
  public $extraList = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\TimError',
          ),
        3 => array(
          'var' => 'extraList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimNode',
            ),
          ),
        4 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['extraList'])) {
        $this->extraList = $vals['extraList'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimResponseBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new \TimError();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->extraList = array();
            $_size192 = 0;
            $_etype195 = 0;
            $xfer += $input->readListBegin($_etype195, $_size192);
            for ($_i196 = 0; $_i196 < $_size192; ++$_i196)
            {
              $elem197 = null;
              $elem197 = new \TimNode();
              $xfer += $elem197->read($input);
              $this->extraList []= $elem197;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size198 = 0;
            $_ktype199 = 0;
            $_vtype200 = 0;
            $xfer += $input->readMapBegin($_ktype199, $_vtype200, $_size198);
            for ($_i202 = 0; $_i202 < $_size198; ++$_i202)
            {
              $key203 = '';
              $val204 = '';
              $xfer += $input->readString($key203);
              $xfer += $input->readString($val204);
              $this->extraMap[$key203] = $val204;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimResponseBean');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraList !== null) {
      if (!is_array($this->extraList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extraList));
        {
          foreach ($this->extraList as $iter205)
          {
            $xfer += $iter205->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter206 => $viter207)
          {
            $xfer += $output->writeString($kiter206);
            $xfer += $output->writeString($viter207);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimSock5Bean {
  static $_TSPEC;

  /**
   * @var \Tid
   */
  public $fromTid = null;
  /**
   * @var \Tid
   */
  public $toTid = null;
  /**
   * ip地址
   * 
   * @var string
   */
  public $addr = null;
  /**
   * 端口
   * 
   * @var int
   */
  public $port = null;
  /**
   * 传输类型  1:tcp 2:udp
   * 
   * @var int
   */
  public $transport = null;
  /**
   * 发布id 通过发布id 可以连接两个发布id相同的用户
   * 
   * @var string
   */
  public $pubId = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fromTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        2 => array(
          'var' => 'toTid',
          'type' => TType::STRUCT,
          'class' => '\Tid',
          ),
        3 => array(
          'var' => 'addr',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'transport',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'pubId',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fromTid'])) {
        $this->fromTid = $vals['fromTid'];
      }
      if (isset($vals['toTid'])) {
        $this->toTid = $vals['toTid'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['transport'])) {
        $this->transport = $vals['transport'];
      }
      if (isset($vals['pubId'])) {
        $this->pubId = $vals['pubId'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimSock5Bean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->fromTid = new \Tid();
            $xfer += $this->fromTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->toTid = new \Tid();
            $xfer += $this->toTid->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->transport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pubId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size208 = 0;
            $_ktype209 = 0;
            $_vtype210 = 0;
            $xfer += $input->readMapBegin($_ktype209, $_vtype210, $_size208);
            for ($_i212 = 0; $_i212 < $_size208; ++$_i212)
            {
              $key213 = '';
              $val214 = '';
              $xfer += $input->readString($key213);
              $xfer += $input->readString($val214);
              $this->extraMap[$key213] = $val214;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimSock5Bean');
    if ($this->fromTid !== null) {
      if (!is_object($this->fromTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fromTid', TType::STRUCT, 1);
      $xfer += $this->fromTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toTid !== null) {
      if (!is_object($this->toTid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('toTid', TType::STRUCT, 2);
      $xfer += $this->toTid->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 3);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 4);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transport !== null) {
      $xfer += $output->writeFieldBegin('transport', TType::I16, 5);
      $xfer += $output->writeI16($this->transport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pubId !== null) {
      $xfer += $output->writeFieldBegin('pubId', TType::STRING, 6);
      $xfer += $output->writeString($this->pubId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter215 => $viter216)
          {
            $xfer += $output->writeString($kiter215);
            $xfer += $output->writeString($viter216);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimSock5Bytes {
  static $_TSPEC;

  /**
   * 发布id
   * 
   * @var string
   */
  public $pubId = null;
  /**
   * 序号数据块
   * 
   * @var int
   */
  public $index = null;
  /**
   * 数据块
   * 
   * @var string[]
   */
  public $bytes = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pubId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'index',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'bytes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pubId'])) {
        $this->pubId = $vals['pubId'];
      }
      if (isset($vals['index'])) {
        $this->index = $vals['index'];
      }
      if (isset($vals['bytes'])) {
        $this->bytes = $vals['bytes'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimSock5Bytes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pubId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->bytes = array();
            $_size217 = 0;
            $_etype220 = 0;
            $xfer += $input->readListBegin($_etype220, $_size217);
            for ($_i221 = 0; $_i221 < $_size217; ++$_i221)
            {
              $elem222 = null;
              $xfer += $input->readString($elem222);
              $this->bytes []= $elem222;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size223 = 0;
            $_ktype224 = 0;
            $_vtype225 = 0;
            $xfer += $input->readMapBegin($_ktype224, $_vtype225, $_size223);
            for ($_i227 = 0; $_i227 < $_size223; ++$_i227)
            {
              $key228 = '';
              $val229 = '';
              $xfer += $input->readString($key228);
              $xfer += $input->readString($val229);
              $this->extraMap[$key228] = $val229;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimSock5Bytes');
    if ($this->pubId !== null) {
      $xfer += $output->writeFieldBegin('pubId', TType::STRING, 1);
      $xfer += $output->writeString($this->pubId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->index !== null) {
      $xfer += $output->writeFieldBegin('index', TType::I32, 2);
      $xfer += $output->writeI32($this->index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bytes !== null) {
      if (!is_array($this->bytes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bytes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->bytes));
        {
          foreach ($this->bytes as $iter230)
          {
            $xfer += $output->writeString($iter230);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter231 => $viter232)
          {
            $xfer += $output->writeString($kiter231);
            $xfer += $output->writeString($viter232);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimPage {
  static $_TSPEC;

  /**
   * 时间上
   * 
   * @var string
   */
  public $fromTimeStamp = null;
  /**
   * 时间下
   * 
   * @var string
   */
  public $toTimeStamp = null;
  /**
   * 条数
   * 
   * @var int
   */
  public $limitCount = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fromTimeStamp',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'toTimeStamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'limitCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fromTimeStamp'])) {
        $this->fromTimeStamp = $vals['fromTimeStamp'];
      }
      if (isset($vals['toTimeStamp'])) {
        $this->toTimeStamp = $vals['toTimeStamp'];
      }
      if (isset($vals['limitCount'])) {
        $this->limitCount = $vals['limitCount'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimPage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromTimeStamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toTimeStamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limitCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size233 = 0;
            $_ktype234 = 0;
            $_vtype235 = 0;
            $xfer += $input->readMapBegin($_ktype234, $_vtype235, $_size233);
            for ($_i237 = 0; $_i237 < $_size233; ++$_i237)
            {
              $key238 = '';
              $val239 = '';
              $xfer += $input->readString($key238);
              $xfer += $input->readString($val239);
              $this->extraMap[$key238] = $val239;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimPage');
    if ($this->fromTimeStamp !== null) {
      $xfer += $output->writeFieldBegin('fromTimeStamp', TType::STRING, 1);
      $xfer += $output->writeString($this->fromTimeStamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toTimeStamp !== null) {
      $xfer += $output->writeFieldBegin('toTimeStamp', TType::STRING, 2);
      $xfer += $output->writeString($this->toTimeStamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limitCount !== null) {
      $xfer += $output->writeFieldBegin('limitCount', TType::I32, 3);
      $xfer += $output->writeI32($this->limitCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter240 => $viter241)
          {
            $xfer += $output->writeString($kiter240);
            $xfer += $output->writeString($viter241);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimMessageIq {
  static $_TSPEC;

  /**
   * tid集合
   * 
   * @var string[]
   */
  public $tidlist = null;
  /**
   * 分页
   * 
   * @var \TimPage
   */
  public $timPage = null;
  /**
   * mid集合
   * 
   * @var string[]
   */
  public $midlist = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tidlist',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timPage',
          'type' => TType::STRUCT,
          'class' => '\TimPage',
          ),
        3 => array(
          'var' => 'midlist',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tidlist'])) {
        $this->tidlist = $vals['tidlist'];
      }
      if (isset($vals['timPage'])) {
        $this->timPage = $vals['timPage'];
      }
      if (isset($vals['midlist'])) {
        $this->midlist = $vals['midlist'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimMessageIq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->tidlist = array();
            $_size242 = 0;
            $_etype245 = 0;
            $xfer += $input->readListBegin($_etype245, $_size242);
            for ($_i246 = 0; $_i246 < $_size242; ++$_i246)
            {
              $elem247 = null;
              $xfer += $input->readString($elem247);
              $this->tidlist []= $elem247;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->timPage = new \TimPage();
            $xfer += $this->timPage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->midlist = array();
            $_size248 = 0;
            $_etype251 = 0;
            $xfer += $input->readListBegin($_etype251, $_size248);
            for ($_i252 = 0; $_i252 < $_size248; ++$_i252)
            {
              $elem253 = null;
              $xfer += $input->readString($elem253);
              $this->midlist []= $elem253;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size254 = 0;
            $_ktype255 = 0;
            $_vtype256 = 0;
            $xfer += $input->readMapBegin($_ktype255, $_vtype256, $_size254);
            for ($_i258 = 0; $_i258 < $_size254; ++$_i258)
            {
              $key259 = '';
              $val260 = '';
              $xfer += $input->readString($key259);
              $xfer += $input->readString($val260);
              $this->extraMap[$key259] = $val260;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimMessageIq');
    if ($this->tidlist !== null) {
      if (!is_array($this->tidlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tidlist', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->tidlist));
        {
          foreach ($this->tidlist as $iter261)
          {
            $xfer += $output->writeString($iter261);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timPage !== null) {
      if (!is_object($this->timPage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('timPage', TType::STRUCT, 2);
      $xfer += $this->timPage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->midlist !== null) {
      if (!is_array($this->midlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('midlist', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->midlist));
        {
          foreach ($this->midlist as $iter262)
          {
            $xfer += $output->writeString($iter262);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter263 => $viter264)
          {
            $xfer += $output->writeString($kiter263);
            $xfer += $output->writeString($viter264);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimAuth {
  static $_TSPEC;

  /**
   * 域名
   * 
   * @var string
   */
  public $domain = null;
  /**
   * 用户名
   * 
   * @var string
   */
  public $username = null;
  /**
   * 密码
   * 
   * @var string
   */
  public $pwd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'domain',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pwd',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['domain'])) {
        $this->domain = $vals['domain'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['pwd'])) {
        $this->pwd = $vals['pwd'];
      }
    }
  }

  public function getName() {
    return 'TimAuth';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimAuth');
    if ($this->domain !== null) {
      $xfer += $output->writeFieldBegin('domain', TType::STRING, 1);
      $xfer += $output->writeString($this->domain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pwd !== null) {
      $xfer += $output->writeFieldBegin('pwd', TType::STRING, 3);
      $xfer += $output->writeString($this->pwd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimMBeanList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $threadId = null;
  /**
   * 信息列表
   * 
   * @var \TimMBean[]
   */
  public $timMBeanList = null;
  /**
   * 类型
   * 
   * @var string
   */
  public $reqType = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timMBeanList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimMBean',
            ),
          ),
        3 => array(
          'var' => 'reqType',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['timMBeanList'])) {
        $this->timMBeanList = $vals['timMBeanList'];
      }
      if (isset($vals['reqType'])) {
        $this->reqType = $vals['reqType'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimMBeanList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->timMBeanList = array();
            $_size265 = 0;
            $_etype268 = 0;
            $xfer += $input->readListBegin($_etype268, $_size265);
            for ($_i269 = 0; $_i269 < $_size265; ++$_i269)
            {
              $elem270 = null;
              $elem270 = new \TimMBean();
              $xfer += $elem270->read($input);
              $this->timMBeanList []= $elem270;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reqType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size271 = 0;
            $_ktype272 = 0;
            $_vtype273 = 0;
            $xfer += $input->readMapBegin($_ktype272, $_vtype273, $_size271);
            for ($_i275 = 0; $_i275 < $_size271; ++$_i275)
            {
              $key276 = '';
              $val277 = '';
              $xfer += $input->readString($key276);
              $xfer += $input->readString($val277);
              $this->extraMap[$key276] = $val277;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimMBeanList');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timMBeanList !== null) {
      if (!is_array($this->timMBeanList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('timMBeanList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->timMBeanList));
        {
          foreach ($this->timMBeanList as $iter278)
          {
            $xfer += $iter278->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqType !== null) {
      $xfer += $output->writeFieldBegin('reqType', TType::STRING, 3);
      $xfer += $output->writeString($this->reqType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter279 => $viter280)
          {
            $xfer += $output->writeString($kiter279);
            $xfer += $output->writeString($viter280);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimPBeanList {
  static $_TSPEC;

  /**
   * @var string
   */
  public $threadId = null;
  /**
   * 状态信息列表
   * 
   * @var \TimPBean[]
   */
  public $timPBeanList = null;
  /**
   * 类型
   * 
   * @var string
   */
  public $reqType = null;
  /**
   * @var array
   */
  public $extraMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timPBeanList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TimPBean',
            ),
          ),
        3 => array(
          'var' => 'reqType',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'extraMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['timPBeanList'])) {
        $this->timPBeanList = $vals['timPBeanList'];
      }
      if (isset($vals['reqType'])) {
        $this->reqType = $vals['reqType'];
      }
      if (isset($vals['extraMap'])) {
        $this->extraMap = $vals['extraMap'];
      }
    }
  }

  public function getName() {
    return 'TimPBeanList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->timPBeanList = array();
            $_size281 = 0;
            $_etype284 = 0;
            $xfer += $input->readListBegin($_etype284, $_size281);
            for ($_i285 = 0; $_i285 < $_size281; ++$_i285)
            {
              $elem286 = null;
              $elem286 = new \TimPBean();
              $xfer += $elem286->read($input);
              $this->timPBeanList []= $elem286;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reqType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->extraMap = array();
            $_size287 = 0;
            $_ktype288 = 0;
            $_vtype289 = 0;
            $xfer += $input->readMapBegin($_ktype288, $_vtype289, $_size287);
            for ($_i291 = 0; $_i291 < $_size287; ++$_i291)
            {
              $key292 = '';
              $val293 = '';
              $xfer += $input->readString($key292);
              $xfer += $input->readString($val293);
              $this->extraMap[$key292] = $val293;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimPBeanList');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timPBeanList !== null) {
      if (!is_array($this->timPBeanList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('timPBeanList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->timPBeanList));
        {
          foreach ($this->timPBeanList as $iter294)
          {
            $xfer += $iter294->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqType !== null) {
      $xfer += $output->writeFieldBegin('reqType', TType::STRING, 3);
      $xfer += $output->writeString($this->reqType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMap !== null) {
      if (!is_array($this->extraMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
        {
          foreach ($this->extraMap as $kiter295 => $viter296)
          {
            $xfer += $output->writeString($kiter295);
            $xfer += $output->writeString($viter296);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TimPropertyBean {
  static $_TSPEC;

  /**
   * @var string
   */
  public $threadId = null;
  /**
   * 消息合流
   * 
   * @var string
   */
  public $interflow = null;
  /**
   * tls
   * 
   * @var string
   */
  public $tls = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'interflow',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tls',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['interflow'])) {
        $this->interflow = $vals['interflow'];
      }
      if (isset($vals['tls'])) {
        $this->tls = $vals['tls'];
      }
    }
  }

  public function getName() {
    return 'TimPropertyBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->interflow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tls);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimPropertyBean');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interflow !== null) {
      $xfer += $output->writeFieldBegin('interflow', TType::STRING, 2);
      $xfer += $output->writeString($this->interflow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tls !== null) {
      $xfer += $output->writeFieldBegin('tls', TType::STRING, 3);
      $xfer += $output->writeString($this->tls);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $protocolversion;
  static protected $protocolversionName;
  static protected $TIM_SC_SUCCESS;
  static protected $TIM_SC_FAILED;

  static protected function init_protocolversion() {
    return     /**
     * 内部版本号
     */
4;
  }

  static protected function init_protocolversionName() {
    return     /**
     * 外部版本号
     */
"1.1.0";
  }

  static protected function init_TIM_SC_SUCCESS() {
    return     /**
     * 状态码：成功
     */
"200";
  }

  static protected function init_TIM_SC_FAILED() {
    return     /**
     * 状态码：失败
     */
"400";
  }
}


